{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nfunction toComputedKey() {\n  var key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  var body = this.get(\"body\");\n  var bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  var statements = [];\n  var stringPath = \"body\";\n  var key;\n  var listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(t.returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(t.expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = t.blockStatement(statements);\n  var parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$allowInsertArrow = _ref.allowInsertArrow,\n      allowInsertArrow = _ref$allowInsertArrow === void 0 ? true : _ref$allowInsertArrow,\n      _ref$specCompliant = _ref.specCompliant,\n      specCompliant = _ref$specCompliant === void 0 ? false : _ref$specCompliant,\n      _ref$noNewArrows = _ref.noNewArrows,\n      noNewArrows = _ref$noNewArrows === void 0 ? !specCompliant : _ref$noNewArrows;\n\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  var thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    var checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: t.objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", t.expressionStatement(t.callExpression(this.hub.addHelper(\"newArrowCheck\"), [t.thisExpression(), checkBinding ? t.identifier(checkBinding.name) : t.identifier(thisBinding)])));\n    this.replaceWith(t.callExpression(t.memberExpression((0, _helperFunctionName.default)(this, true) || this.node, t.identifier(\"bind\")), [checkBinding ? t.identifier(checkBinding.name) : t.thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath) {\n  var noNewArrows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var allowInsertArrow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var thisEnvFn = fnPath.findParent(function (p) {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  var inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  var _getScopeInformation = getScopeInformation(fnPath),\n      thisPaths = _getScopeInformation.thisPaths,\n      argumentsPaths = _getScopeInformation.argumentsPaths,\n      newTargetPaths = _getScopeInformation.newTargetPaths,\n      superProps = _getScopeInformation.superProps,\n      superCalls = _getScopeInformation.superCalls;\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    var allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function: function Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n      ClassProperty: function ClassProperty(child) {\n        child.skip();\n      },\n      CallExpression: function CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n    });\n    var superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(function (superCall) {\n      var callee = t.identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    var argumentsBinding = getBinding(thisEnvFn, \"arguments\", function () {\n      var args = function args() {\n        return t.identifier(\"arguments\");\n      };\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return t.conditionalExpression(t.binaryExpression(\"===\", t.unaryExpression(\"typeof\", args()), t.stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(function (argumentsChild) {\n      var argsRef = t.identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    var newTargetBinding = getBinding(thisEnvFn, \"newtarget\", function () {\n      return t.metaProperty(t.identifier(\"new\"), t.identifier(\"target\"));\n    });\n    newTargetPaths.forEach(function (targetChild) {\n      var targetRef = t.identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    var flatSuperProps = superProps.reduce(function (acc, superProp) {\n      return acc.concat(standardizeSuperProperty(superProp));\n    }, []);\n    flatSuperProps.forEach(function (superProp) {\n      var key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      var isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      var isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      var superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      var args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        var value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      var call = t.callExpression(t.identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", t.thisExpression());\n        superProp.replaceWith(t.memberExpression(call, t.identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  var thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(function (thisChild) {\n        var thisRef = thisChild.isJSX() ? t.jsxIdentifier(thisBinding) : t.identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    var assignmentPath = superProp.parentPath;\n    var op = assignmentPath.node.operator.slice(0, -1);\n    var value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      var tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, t.assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    var updateExpr = superProp.parentPath;\n\n    var _tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n\n    var computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    var parts = [t.assignmentExpression(\"=\", _tmp, t.memberExpression(superProp.node.object, computedKey ? t.assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), t.assignmentExpression(\"=\", t.memberExpression(superProp.node.object, computedKey ? t.identifier(computedKey.name) : superProp.node.property, superProp.node.computed), t.binaryExpression(\"+\", t.identifier(_tmp.name), t.numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(t.identifier(_tmp.name));\n    }\n\n    updateExpr.replaceWith(t.sequenceExpression(parts));\n    var left = updateExpr.get(\"expressions.0.right\");\n    var right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", function (thisBinding) {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return t.thisExpression();\n    var supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function: function Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n      ClassProperty: function ClassProperty(child) {\n        child.skip();\n      },\n      CallExpression: function CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, t.assignmentExpression(\"=\", t.identifier(thisBinding), t.identifier(\"this\"))]);\n      }\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", function () {\n    var argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return t.arrowFunctionExpression([t.restElement(argsBinding)], t.callExpression(t.super(), [t.spreadElement(t.identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  var op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, \"superprop_\".concat(op, \":\").concat(propName || \"\"), function () {\n    var argsList = [];\n    var fnBody;\n\n    if (propName) {\n      fnBody = t.memberExpression(t.super(), t.identifier(propName));\n    } else {\n      var method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = t.memberExpression(t.super(), t.identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      var valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = t.assignmentExpression(\"=\", fnBody, t.identifier(valueIdent.name));\n    }\n\n    return t.arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  var cacheKey = \"binding:\" + key;\n  var data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    var id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  var thisPaths = [];\n  var argumentsPaths = [];\n  var newTargetPaths = [];\n  var superProps = [];\n  var superCalls = [];\n  fnPath.traverse({\n    ClassProperty: function ClassProperty(child) {\n      child.skip();\n    },\n    Function: function Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n    ThisExpression: function ThisExpression(child) {\n      thisPaths.push(child);\n    },\n    JSXIdentifier: function JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n    CallExpression: function CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n    MemberExpression: function MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n    ReferencedIdentifier: function ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      var curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n    MetaProperty: function MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n  });\n  return {\n    thisPaths: thisPaths,\n    argumentsPaths: argumentsPaths,\n    newTargetPaths: newTargetPaths,\n    superProps: superProps,\n    superCalls: superCalls\n  };\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/traverse/lib/path/conversion.js"],"names":["Object","defineProperty","exports","value","toComputedKey","ensureBlock","arrowFunctionToShadowed","unwrapFunctionEnvironment","arrowFunctionToExpression","t","require","_helperFunctionName","key","isMemberExpression","node","property","isProperty","isMethod","ReferenceError","computed","isIdentifier","stringLiteral","name","body","get","bodyNode","Array","isArray","Error","isBlockStatement","statements","stringPath","listKey","isStatement","push","isFunction","returnStatement","expressionStatement","blockStatement","parentPath","setup","isArrowFunctionExpression","isFunctionExpression","isFunctionDeclaration","buildCodeFrameError","hoistFunctionEnvironment","allowInsertArrow","specCompliant","noNewArrows","thisBinding","type","checkBinding","scope","generateUidIdentifier","id","init","objectExpression","unshiftContainer","callExpression","hub","addHelper","thisExpression","identifier","replaceWith","memberExpression","default","fnPath","thisEnvFn","findParent","p","isProgram","isClassProperty","static","inConstructor","kind","getScopeInformation","thisPaths","argumentsPaths","newTargetPaths","superProps","superCalls","length","allSuperCalls","traverse","Function","child","skip","ClassProperty","CallExpression","isSuper","superBinding","getSuperBinding","forEach","superCall","callee","loc","argumentsBinding","getBinding","args","path","conditionalExpression","binaryExpression","unaryExpression","buildUndefinedNode","argumentsChild","argsRef","newTargetBinding","metaProperty","targetChild","targetRef","flatSuperProps","reduce","acc","superProp","concat","standardizeSuperProperty","isAssignment","isAssignmentExpression","left","isCall","isCallExpression","getSuperPropBinding","right","call","getThisBinding","hasSuperClass","thisChild","thisRef","isJSX","jsxIdentifier","operator","assignmentPath","op","slice","tmp","generateDeclaredUidIdentifier","object","assignmentExpression","isUpdateExpression","updateExpr","computedKey","parts","numericLiteral","prefix","sequenceExpression","isClassMethod","superClass","supers","WeakSet","has","add","replaceWithMultiple","argsBinding","arrowFunctionExpression","restElement","super","spreadElement","propName","argsList","fnBody","method","unshift","valueIdent","cacheKey","data","getData","setData","ThisExpression","JSXIdentifier","isJSXMemberExpression","isJSXOpeningElement","MemberExpression","ReferencedIdentifier","curr","hasOwnBinding","rename","parent","MetaProperty"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(t.returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(t.expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = t.blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: t.objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", t.expressionStatement(t.callExpression(this.hub.addHelper(\"newArrowCheck\"), [t.thisExpression(), checkBinding ? t.identifier(checkBinding.name) : t.identifier(thisBinding)])));\n    this.replaceWith(t.callExpression(t.memberExpression((0, _helperFunctionName.default)(this, true) || this.node, t.identifier(\"bind\")), [checkBinding ? t.identifier(checkBinding.name) : t.thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  const thisEnvFn = fnPath.findParent(p => {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = t.identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => t.identifier(\"arguments\");\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return t.conditionalExpression(t.binaryExpression(\"===\", t.unaryExpression(\"typeof\", args()), t.stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = t.identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => t.metaProperty(t.identifier(\"new\"), t.identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = t.identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = t.callExpression(t.identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", t.thisExpression());\n        superProp.replaceWith(t.memberExpression(call, t.identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? t.jsxIdentifier(thisBinding) : t.identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, t.assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(t.memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(t.binaryExpression(op, t.memberExpression(superProp.node.object, t.identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [t.assignmentExpression(\"=\", tmp, t.memberExpression(superProp.node.object, computedKey ? t.assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), t.assignmentExpression(\"=\", t.memberExpression(superProp.node.object, computedKey ? t.identifier(computedKey.name) : superProp.node.property, superProp.node.computed), t.binaryExpression(\"+\", t.identifier(tmp.name), t.numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(t.identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(t.sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return t.thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, t.assignmentExpression(\"=\", t.identifier(thisBinding), t.identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return t.arrowFunctionExpression([t.restElement(argsBinding)], t.callExpression(t.super(), [t.spreadElement(t.identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = t.memberExpression(t.super(), t.identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = t.memberExpression(t.super(), t.identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = t.assignmentExpression(\"=\", fnBody, t.identifier(valueIdent.name));\n    }\n\n    return t.arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      let curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}"]},"metadata":{},"sourceType":"script"}