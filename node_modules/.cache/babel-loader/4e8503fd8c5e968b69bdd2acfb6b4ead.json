{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar t = require(\"@babel/types\");\n\nvar ImportBuilder = /*#__PURE__*/function () {\n  function ImportBuilder(importedSource, scope, hub) {\n    _classCallCheck(this, ImportBuilder);\n\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  _createClass(ImportBuilder, [{\n    key: \"done\",\n    value: function done() {\n      return {\n        statements: this._statements,\n        resultName: this._resultName\n      };\n    }\n  }, {\n    key: \"import\",\n    value: function _import() {\n      this._statements.push(t.importDeclaration([], t.stringLiteral(this._importedSource)));\n\n      return this;\n    }\n  }, {\n    key: \"require\",\n    value: function require() {\n      this._statements.push(t.expressionStatement(t.callExpression(t.identifier(\"require\"), [t.stringLiteral(this._importedSource)])));\n\n      return this;\n    }\n  }, {\n    key: \"namespace\",\n    value: function namespace() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"namespace\";\n\n      var local = this._scope.generateUidIdentifier(name);\n\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [t.importNamespaceSpecifier(local)];\n      this._resultName = t.cloneNode(local);\n      return this;\n    }\n  }, {\n    key: \"default\",\n    value: function _default(name) {\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [t.importDefaultSpecifier(name)];\n      this._resultName = t.cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"named\",\n    value: function named(name, importName) {\n      if (importName === \"default\") return this.default(name);\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      _assert(statement.type === \"ImportDeclaration\");\n\n      _assert(statement.specifiers.length === 0);\n\n      statement.specifiers = [t.importSpecifier(name, t.identifier(importName))];\n      this._resultName = t.cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"var\",\n    value: function _var(name) {\n      name = this._scope.generateUidIdentifier(name);\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type !== \"ExpressionStatement\") {\n        _assert(this._resultName);\n\n        statement = t.expressionStatement(this._resultName);\n\n        this._statements.push(statement);\n      }\n\n      this._statements[this._statements.length - 1] = t.variableDeclaration(\"var\", [t.variableDeclarator(name, statement.expression)]);\n      this._resultName = t.cloneNode(name);\n      return this;\n    }\n  }, {\n    key: \"defaultInterop\",\n    value: function defaultInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n    }\n  }, {\n    key: \"wildcardInterop\",\n    value: function wildcardInterop() {\n      return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n    }\n  }, {\n    key: \"_interop\",\n    value: function _interop(callee) {\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = t.callExpression(callee, [statement.expression]);\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n\n        statement.declarations[0].init = t.callExpression(callee, [statement.declarations[0].init]);\n      } else {\n        _assert.fail(\"Unexpected type.\");\n      }\n\n      return this;\n    }\n  }, {\n    key: \"prop\",\n    value: function prop(name) {\n      var statement = this._statements[this._statements.length - 1];\n\n      if (statement.type === \"ExpressionStatement\") {\n        statement.expression = t.memberExpression(statement.expression, t.identifier(name));\n      } else if (statement.type === \"VariableDeclaration\") {\n        _assert(statement.declarations.length === 1);\n\n        statement.declarations[0].init = t.memberExpression(statement.declarations[0].init, t.identifier(name));\n      } else {\n        _assert.fail(\"Unexpected type:\" + statement.type);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"read\",\n    value: function read(name) {\n      this._resultName = t.memberExpression(this._resultName, t.identifier(name));\n    }\n  }]);\n\n  return ImportBuilder;\n}();\n\nexports.default = ImportBuilder;","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/helper-module-imports/lib/import-builder.js"],"names":["Object","defineProperty","exports","value","default","_assert","require","t","ImportBuilder","importedSource","scope","hub","_statements","_resultName","_scope","_hub","_importedSource","statements","resultName","push","importDeclaration","stringLiteral","expressionStatement","callExpression","identifier","name","local","generateUidIdentifier","statement","length","type","specifiers","importNamespaceSpecifier","cloneNode","importDefaultSpecifier","importName","importSpecifier","variableDeclaration","variableDeclarator","expression","_interop","addHelper","callee","declarations","init","fail","memberExpression"],"mappings":"AAAA;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,IAAIC,CAAC,GAAGD,OAAO,CAAC,cAAD,CAAf;;IAEME,a;AACJ,yBAAYC,cAAZ,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;AAAA;;AACtC,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,eAAL,GAAuB,KAAK,CAA5B;AACA,SAAKF,MAAL,GAAcJ,KAAd;AACA,SAAKK,IAAL,GAAYJ,GAAZ;AACA,SAAKK,eAAL,GAAuBP,cAAvB;AACD;;;;WAED,gBAAO;AACL,aAAO;AACLQ,QAAAA,UAAU,EAAE,KAAKL,WADZ;AAELM,QAAAA,UAAU,EAAE,KAAKL;AAFZ,OAAP;AAID;;;WAED,mBAAS;AACP,WAAKD,WAAL,CAAiBO,IAAjB,CAAsBZ,CAAC,CAACa,iBAAF,CAAoB,EAApB,EAAwBb,CAAC,CAACc,aAAF,CAAgB,KAAKL,eAArB,CAAxB,CAAtB;;AAEA,aAAO,IAAP;AACD;;;WAED,mBAAU;AACR,WAAKJ,WAAL,CAAiBO,IAAjB,CAAsBZ,CAAC,CAACe,mBAAF,CAAsBf,CAAC,CAACgB,cAAF,CAAiBhB,CAAC,CAACiB,UAAF,CAAa,SAAb,CAAjB,EAA0C,CAACjB,CAAC,CAACc,aAAF,CAAgB,KAAKL,eAArB,CAAD,CAA1C,CAAtB,CAAtB;;AAEA,aAAO,IAAP;AACD;;;WAED,qBAA8B;AAAA,UAApBS,IAAoB,uEAAb,WAAa;;AAC5B,UAAMC,KAAK,GAAG,KAAKZ,MAAL,CAAYa,qBAAZ,CAAkCF,IAAlC,CAAd;;AAEA,UAAMG,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAlB;;AAEAxB,MAAAA,OAAO,CAACuB,SAAS,CAACE,IAAV,KAAmB,mBAApB,CAAP;;AAEAzB,MAAAA,OAAO,CAACuB,SAAS,CAACG,UAAV,CAAqBF,MAArB,KAAgC,CAAjC,CAAP;;AAEAD,MAAAA,SAAS,CAACG,UAAV,GAAuB,CAACxB,CAAC,CAACyB,wBAAF,CAA2BN,KAA3B,CAAD,CAAvB;AACA,WAAKb,WAAL,GAAmBN,CAAC,CAAC0B,SAAF,CAAYP,KAAZ,CAAnB;AACA,aAAO,IAAP;AACD;;;WAED,kBAAQD,IAAR,EAAc;AACZA,MAAAA,IAAI,GAAG,KAAKX,MAAL,CAAYa,qBAAZ,CAAkCF,IAAlC,CAAP;AACA,UAAMG,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAlB;;AAEAxB,MAAAA,OAAO,CAACuB,SAAS,CAACE,IAAV,KAAmB,mBAApB,CAAP;;AAEAzB,MAAAA,OAAO,CAACuB,SAAS,CAACG,UAAV,CAAqBF,MAArB,KAAgC,CAAjC,CAAP;;AAEAD,MAAAA,SAAS,CAACG,UAAV,GAAuB,CAACxB,CAAC,CAAC2B,sBAAF,CAAyBT,IAAzB,CAAD,CAAvB;AACA,WAAKZ,WAAL,GAAmBN,CAAC,CAAC0B,SAAF,CAAYR,IAAZ,CAAnB;AACA,aAAO,IAAP;AACD;;;WAED,eAAMA,IAAN,EAAYU,UAAZ,EAAwB;AACtB,UAAIA,UAAU,KAAK,SAAnB,EAA8B,OAAO,KAAK/B,OAAL,CAAaqB,IAAb,CAAP;AAC9BA,MAAAA,IAAI,GAAG,KAAKX,MAAL,CAAYa,qBAAZ,CAAkCF,IAAlC,CAAP;AACA,UAAMG,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAlB;;AAEAxB,MAAAA,OAAO,CAACuB,SAAS,CAACE,IAAV,KAAmB,mBAApB,CAAP;;AAEAzB,MAAAA,OAAO,CAACuB,SAAS,CAACG,UAAV,CAAqBF,MAArB,KAAgC,CAAjC,CAAP;;AAEAD,MAAAA,SAAS,CAACG,UAAV,GAAuB,CAACxB,CAAC,CAAC6B,eAAF,CAAkBX,IAAlB,EAAwBlB,CAAC,CAACiB,UAAF,CAAaW,UAAb,CAAxB,CAAD,CAAvB;AACA,WAAKtB,WAAL,GAAmBN,CAAC,CAAC0B,SAAF,CAAYR,IAAZ,CAAnB;AACA,aAAO,IAAP;AACD;;;WAED,cAAIA,IAAJ,EAAU;AACRA,MAAAA,IAAI,GAAG,KAAKX,MAAL,CAAYa,qBAAZ,CAAkCF,IAAlC,CAAP;AACA,UAAIG,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAhB;;AAEA,UAAID,SAAS,CAACE,IAAV,KAAmB,qBAAvB,EAA8C;AAC5CzB,QAAAA,OAAO,CAAC,KAAKQ,WAAN,CAAP;;AAEAe,QAAAA,SAAS,GAAGrB,CAAC,CAACe,mBAAF,CAAsB,KAAKT,WAA3B,CAAZ;;AAEA,aAAKD,WAAL,CAAiBO,IAAjB,CAAsBS,SAAtB;AACD;;AAED,WAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,IAAgDtB,CAAC,CAAC8B,mBAAF,CAAsB,KAAtB,EAA6B,CAAC9B,CAAC,CAAC+B,kBAAF,CAAqBb,IAArB,EAA2BG,SAAS,CAACW,UAArC,CAAD,CAA7B,CAAhD;AACA,WAAK1B,WAAL,GAAmBN,CAAC,CAAC0B,SAAF,CAAYR,IAAZ,CAAnB;AACA,aAAO,IAAP;AACD;;;WAED,0BAAiB;AACf,aAAO,KAAKe,QAAL,CAAc,KAAKzB,IAAL,CAAU0B,SAAV,CAAoB,uBAApB,CAAd,CAAP;AACD;;;WAED,2BAAkB;AAChB,aAAO,KAAKD,QAAL,CAAc,KAAKzB,IAAL,CAAU0B,SAAV,CAAoB,wBAApB,CAAd,CAAP;AACD;;;WAED,kBAASC,MAAT,EAAiB;AACf,UAAMd,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAlB;;AAEA,UAAID,SAAS,CAACE,IAAV,KAAmB,qBAAvB,EAA8C;AAC5CF,QAAAA,SAAS,CAACW,UAAV,GAAuBhC,CAAC,CAACgB,cAAF,CAAiBmB,MAAjB,EAAyB,CAACd,SAAS,CAACW,UAAX,CAAzB,CAAvB;AACD,OAFD,MAEO,IAAIX,SAAS,CAACE,IAAV,KAAmB,qBAAvB,EAA8C;AACnDzB,QAAAA,OAAO,CAACuB,SAAS,CAACe,YAAV,CAAuBd,MAAvB,KAAkC,CAAnC,CAAP;;AAEAD,QAAAA,SAAS,CAACe,YAAV,CAAuB,CAAvB,EAA0BC,IAA1B,GAAiCrC,CAAC,CAACgB,cAAF,CAAiBmB,MAAjB,EAAyB,CAACd,SAAS,CAACe,YAAV,CAAuB,CAAvB,EAA0BC,IAA3B,CAAzB,CAAjC;AACD,OAJM,MAIA;AACLvC,QAAAA,OAAO,CAACwC,IAAR,CAAa,kBAAb;AACD;;AAED,aAAO,IAAP;AACD;;;WAED,cAAKpB,IAAL,EAAW;AACT,UAAMG,SAAS,GAAG,KAAKhB,WAAL,CAAiB,KAAKA,WAAL,CAAiBiB,MAAjB,GAA0B,CAA3C,CAAlB;;AAEA,UAAID,SAAS,CAACE,IAAV,KAAmB,qBAAvB,EAA8C;AAC5CF,QAAAA,SAAS,CAACW,UAAV,GAAuBhC,CAAC,CAACuC,gBAAF,CAAmBlB,SAAS,CAACW,UAA7B,EAAyChC,CAAC,CAACiB,UAAF,CAAaC,IAAb,CAAzC,CAAvB;AACD,OAFD,MAEO,IAAIG,SAAS,CAACE,IAAV,KAAmB,qBAAvB,EAA8C;AACnDzB,QAAAA,OAAO,CAACuB,SAAS,CAACe,YAAV,CAAuBd,MAAvB,KAAkC,CAAnC,CAAP;;AAEAD,QAAAA,SAAS,CAACe,YAAV,CAAuB,CAAvB,EAA0BC,IAA1B,GAAiCrC,CAAC,CAACuC,gBAAF,CAAmBlB,SAAS,CAACe,YAAV,CAAuB,CAAvB,EAA0BC,IAA7C,EAAmDrC,CAAC,CAACiB,UAAF,CAAaC,IAAb,CAAnD,CAAjC;AACD,OAJM,MAIA;AACLpB,QAAAA,OAAO,CAACwC,IAAR,CAAa,qBAAqBjB,SAAS,CAACE,IAA5C;AACD;;AAED,aAAO,IAAP;AACD;;;WAED,cAAKL,IAAL,EAAW;AACT,WAAKZ,WAAL,GAAmBN,CAAC,CAACuC,gBAAF,CAAmB,KAAKjC,WAAxB,EAAqCN,CAAC,CAACiB,UAAF,CAAaC,IAAb,CAArC,CAAnB;AACD;;;;;;AAIHvB,OAAO,CAACE,OAAR,GAAkBI,aAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar t = require(\"@babel/types\");\n\nclass ImportBuilder {\n  constructor(importedSource, scope, hub) {\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName\n    };\n  }\n\n  import() {\n    this._statements.push(t.importDeclaration([], t.stringLiteral(this._importedSource)));\n\n    return this;\n  }\n\n  require() {\n    this._statements.push(t.expressionStatement(t.callExpression(t.identifier(\"require\"), [t.stringLiteral(this._importedSource)])));\n\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [t.importNamespaceSpecifier(local)];\n    this._resultName = t.cloneNode(local);\n    return this;\n  }\n\n  default(name) {\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [t.importDefaultSpecifier(name)];\n    this._resultName = t.cloneNode(name);\n    return this;\n  }\n\n  named(name, importName) {\n    if (importName === \"default\") return this.default(name);\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [t.importSpecifier(name, t.identifier(importName))];\n    this._resultName = t.cloneNode(name);\n    return this;\n  }\n\n  var(name) {\n    name = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n\n    if (statement.type !== \"ExpressionStatement\") {\n      _assert(this._resultName);\n\n      statement = t.expressionStatement(this._resultName);\n\n      this._statements.push(statement);\n    }\n\n    this._statements[this._statements.length - 1] = t.variableDeclaration(\"var\", [t.variableDeclarator(name, statement.expression)]);\n    this._resultName = t.cloneNode(name);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = t.callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = t.callExpression(callee, [statement.declarations[0].init]);\n    } else {\n      _assert.fail(\"Unexpected type.\");\n    }\n\n    return this;\n  }\n\n  prop(name) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = t.memberExpression(statement.expression, t.identifier(name));\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = t.memberExpression(statement.declarations[0].init, t.identifier(name));\n    } else {\n      _assert.fail(\"Unexpected type:\" + statement.type);\n    }\n\n    return this;\n  }\n\n  read(name) {\n    this._resultName = t.memberExpression(this._resultName, t.identifier(name));\n  }\n\n}\n\nexports.default = ImportBuilder;"]},"metadata":{},"sourceType":"script"}