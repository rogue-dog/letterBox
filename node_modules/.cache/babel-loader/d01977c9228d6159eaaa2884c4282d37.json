{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\letterBox\\\\src\\\\pages\\\\ChatPage.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport { AppContext } from \"../initialState\";\nimport { useState } from \"react\";\nimport \"./LoginPage.css\";\nimport { IonContent, IonFooter, IonGrid, IonHeader, IonPage, IonRow, IonToolbar, IonCol, IonInput, IonButton, useIonViewDidEnter, useIonViewWillEnter } from \"@ionic/react\";\nimport db from \"../Firestore\";\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatPage = () => {\n  _s();\n\n  let {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  let [message, setMessage] = useState(\"\");\n  let [allmsgs, msgsRecieved] = useState(false);\n  let messages = [];\n  let channel = state.user['phone'] + \"/\" + state.chattingWith.phone;\n\n  const sendMessage = async () => {\n    let message_body = {\n      content: message,\n      channel: channel,\n      dateTime: +Date.now(),\n      sentBy: state.user['phone']\n    };\n\n    if (message) {\n      let k = await db.collection(\"messages\").add(message_body).then(() => {\n        alert(state.chattingWith.phone);\n      }).catch(error => {\n        alert(error);\n      });\n    } else {\n      alert(\"Cannot Send Empty messages!\");\n    }\n\n    setMessage(\"\");\n  };\n\n  const Chat = () => {\n    return /*#__PURE__*/_jsxDEV(IonPage, {\n      children: [/*#__PURE__*/_jsxDEV(IonHeader, {\n        children: state.chattingWith.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonContent, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: state.chattingWith.phone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: messages.map(body => {\n            return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"body.content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(IonFooter, {\n        children: /*#__PURE__*/_jsxDEV(IonToolbar, {\n          children: /*#__PURE__*/_jsxDEV(IonGrid, {\n            children: /*#__PURE__*/_jsxDEV(IonRow, {\n              children: [/*#__PURE__*/_jsxDEV(IonCol, {\n                size: \"11\",\n                children: /*#__PURE__*/_jsxDEV(IonInput, {\n                  id: \"Messagebox\",\n                  value: message,\n                  placeholder: \"Pour Your Heart Out..\",\n                  onIonChange: e => {\n                    setMessage(e.target.value);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(IonCol, {\n                children: /*#__PURE__*/_jsxDEV(IonButton, {\n                  size: \"2\",\n                  onClick: e => {\n                    sendMessage();\n                  },\n                  children: \"Send\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  };\n\n  const fetch_message = async () => {\n    let v = await db.collection(\"messages\").where(\"channel\", \"in\", [channel, channel.split(\"\").reverse().join(\"\")]).orderBy(\"dateTime\").limit(100).onSnapshot(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        messages.push(doc.data());\n      });\n    });\n    msgsRecieved(true);\n  };\n\n  useIonViewWillEnter(() => {\n    fetch_message();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: allmsgs ? /*#__PURE__*/_jsxDEV(Chat, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading Chat Messages...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 31\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ChatPage, \"oxP0RUFuKwvmVSAWB7CDYnUxwlU=\", false, function () {\n  return [useIonViewWillEnter];\n});\n\n_c = ChatPage;\nexport default ChatPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatPage\");","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/src/pages/ChatPage.jsx"],"names":["React","useContext","AppContext","useState","IonContent","IonFooter","IonGrid","IonHeader","IonPage","IonRow","IonToolbar","IonCol","IonInput","IonButton","useIonViewDidEnter","useIonViewWillEnter","db","ChatPage","state","dispatch","message","setMessage","allmsgs","msgsRecieved","messages","channel","user","chattingWith","phone","sendMessage","message_body","content","dateTime","Date","now","sentBy","k","collection","add","then","alert","catch","error","Chat","name","map","body","e","target","value","fetch_message","v","where","split","reverse","join","orderBy","limit","onSnapshot","querySnapshot","forEach","doc","push","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAO,iBAAP;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,OAAhC,EAAyCC,SAAzC,EAAoDC,OAApD,EAA6DC,MAA7D,EAAqEC,UAArE,EAAiFC,MAAjF,EAAyFC,QAAzF,EAAmGC,SAAnG,EAA8GC,kBAA9G,EAAkIC,mBAAlI,QAA6J,cAA7J;AACA,OAAOC,EAAP,MAAe,cAAf;AACA,OAAO,cAAP;;;AAOA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,MAAI;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBlB,UAAU,CAACC,UAAD,CAApC;AACA,MAAI,CAACkB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACmB,OAAD,EAAUC,YAAV,IAA0BpB,QAAQ,CAAC,KAAD,CAAtC;AACA,MAAIqB,QAAQ,GAAG,EAAf;AAEA,MAAIC,OAAO,GAAGP,KAAK,CAACQ,IAAN,CAAW,OAAX,IAAsB,GAAtB,GAA4BR,KAAK,CAACS,YAAN,CAAmBC,KAA7D;;AACA,QAAMC,WAAW,GAAG,YAAY;AAE5B,QAAIC,YAAY,GAAG;AACfC,MAAAA,OAAO,EAAEX,OADM;AAEfK,MAAAA,OAAO,EAAEA,OAFM;AAGfO,MAAAA,QAAQ,EAAE,CAACC,IAAI,CAACC,GAAL,EAHI;AAIfC,MAAAA,MAAM,EAAEjB,KAAK,CAACQ,IAAN,CAAW,OAAX;AAJO,KAAnB;;AAMA,QAAIN,OAAJ,EAAa;AACT,UAAIgB,CAAC,GAAG,MAAMpB,EAAE,CAACqB,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BR,YAA9B,EAA4CS,IAA5C,CAAiD,MAAM;AACjEC,QAAAA,KAAK,CAACtB,KAAK,CAACS,YAAN,CAAmBC,KAApB,CAAL;AACH,OAFa,EAEXa,KAFW,CAEJC,KAAD,IAAW;AAChBF,QAAAA,KAAK,CAACE,KAAD,CAAL;AACH,OAJa,CAAd;AAKH,KAND,MAOK;AACDF,MAAAA,KAAK,CAAC,6BAAD,CAAL;AACH;;AACDnB,IAAAA,UAAU,CAAC,EAAD,CAAV;AAEH,GApBD;;AAqBA,QAAMsB,IAAI,GAAG,MAAM;AACf,wBAEI,QAAC,OAAD;AAAA,8BACI,QAAC,SAAD;AAAA,kBAAYzB,KAAK,CAACS,YAAN,CAAmBiB;AAA/B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAA,gCACI;AAAA,oBAAI1B,KAAK,CAACS,YAAN,CAAmBC;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAA,oBAAMJ,QAAQ,CAACqB,GAAT,CAAcC,IAAD,IAAU;AACzB,gCAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAR;AACH,WAFK;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAUI,QAAC,SAAD;AAAA,+BACI,QAAC,UAAD;AAAA,iCACI,QAAC,OAAD;AAAA,mCACI,QAAC,MAAD;AAAA,sCACI,QAAC,MAAD;AAAQ,gBAAA,IAAI,EAAC,IAAb;AAAA,uCAEI,QAAC,QAAD;AAAU,kBAAA,EAAE,EAAC,YAAb;AAA0B,kBAAA,KAAK,EAAE1B,OAAjC;AAA0C,kBAAA,WAAW,EAAC,uBAAtD;AAA8E,kBAAA,WAAW,EAAG2B,CAAD,IAAO;AAAE1B,oBAAAA,UAAU,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AAA4B;AAAhI;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,sBADJ,eAKI,QAAC,MAAD;AAAA,uCAEI,QAAC,SAAD;AAAW,kBAAA,IAAI,EAAC,GAAhB;AAAoB,kBAAA,OAAO,EAAGF,CAAD,IAAO;AAAElB,oBAAAA,WAAW;AAAI,mBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,sBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAiCH,GAlCD;;AAoCA,QAAMqB,aAAa,GAAG,YAAY;AAE9B,QAAIC,CAAC,GAAG,MAAMnC,EAAE,CAACqB,UAAH,CAAc,UAAd,EAA0Be,KAA1B,CAAgC,SAAhC,EAA2C,IAA3C,EAAiD,CAAC3B,OAAD,EAAUA,OAAO,CAAC4B,KAAR,CAAc,EAAd,EAAkBC,OAAlB,GAA4BC,IAA5B,CAAiC,EAAjC,CAAV,CAAjD,EACTC,OADS,CACD,UADC,EACWC,KADX,CACiB,GADjB,EACsBC,UADtB,CACkCC,aAAD,IAAmB;AAC1DA,MAAAA,aAAa,CAACC,OAAd,CAAuBC,GAAD,IAAS;AAC3BrC,QAAAA,QAAQ,CAACsC,IAAT,CAAcD,GAAG,CAACE,IAAJ,EAAd;AACH,OAFD;AAGH,KALS,CAAd;AAMAxC,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEH,GAVD;;AAWAR,EAAAA,mBAAmB,CAAC,MAAM;AAAEmC,IAAAA,aAAa;AAAI,GAA1B,CAAnB;AAKA,sBAAQ;AAAA,cACH5B,OAAO,gBAAG,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADlB;AAAA;AAAA;AAAA;AAAA,UAAR;AAIH,CApFD;;GAAML,Q;UA2EFF,mB;;;KA3EEE,Q;AAsFN,eAAeA,QAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../initialState\";\r\nimport { useState } from \"react\";\r\nimport \"./LoginPage.css\";\r\nimport { IonContent, IonFooter, IonGrid, IonHeader, IonPage, IonRow, IonToolbar, IonCol, IonInput, IonButton, useIonViewDidEnter, useIonViewWillEnter } from \"@ionic/react\";\r\nimport db from \"../Firestore\";\r\nimport './styles.css';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ChatPage = () => {\r\n    let { state, dispatch } = useContext(AppContext);\r\n    let [message, setMessage] = useState(\"\");\r\n    let [allmsgs, msgsRecieved] = useState(false);\r\n    let messages = [];\r\n\r\n    let channel = state.user['phone'] + \"/\" + state.chattingWith.phone;\r\n    const sendMessage = async () => {\r\n\r\n        let message_body = {\r\n            content: message,\r\n            channel: channel,\r\n            dateTime: +Date.now(),\r\n            sentBy: state.user['phone']\r\n        };\r\n        if (message) {\r\n            let k = await db.collection(\"messages\").add(message_body).then(() => {\r\n                alert(state.chattingWith.phone);\r\n            }).catch((error) => {\r\n                alert(error);\r\n            });\r\n        }\r\n        else {\r\n            alert(\"Cannot Send Empty messages!\");\r\n        }\r\n        setMessage(\"\");\r\n\r\n    }\r\n    const Chat = () => {\r\n        return (\r\n\r\n            <IonPage>\r\n                <IonHeader>{state.chattingWith.name}</IonHeader>\r\n                <IonContent>\r\n                    <p>{state.chattingWith.phone}</p>\r\n\r\n                    <div>{messages.map((body) => {\r\n                        return (<p>body.content</p>)\r\n                    })}</div>\r\n                </IonContent>\r\n\r\n                <IonFooter>\r\n                    <IonToolbar>\r\n                        <IonGrid>\r\n                            <IonRow>\r\n                                <IonCol size=\"11\" >\r\n\r\n                                    <IonInput id=\"Messagebox\" value={message} placeholder=\"Pour Your Heart Out..\" onIonChange={(e) => { setMessage(e.target.value) }}></IonInput>\r\n                                </IonCol>\r\n                                <IonCol >\r\n\r\n                                    <IonButton size=\"2\" onClick={(e) => { sendMessage() }}>Send</IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        </IonGrid>\r\n                    </IonToolbar>\r\n\r\n                </IonFooter>\r\n\r\n            </IonPage>\r\n\r\n        )\r\n    }\r\n\r\n    const fetch_message = async () => {\r\n\r\n        let v = await db.collection(\"messages\").where(\"channel\", \"in\", [channel, channel.split(\"\").reverse().join(\"\")])\r\n            .orderBy(\"dateTime\").limit(100).onSnapshot((querySnapshot) => {\r\n                querySnapshot.forEach((doc) => {\r\n                    messages.push(doc.data());\r\n                });\r\n            });\r\n        msgsRecieved(true);\r\n\r\n    }\r\n    useIonViewWillEnter(() => { fetch_message() })\r\n\r\n\r\n\r\n\r\n    return (<div>\r\n        {allmsgs ? <Chat /> : <p>Loading Chat Messages...</p>}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default ChatPage;"]},"metadata":{},"sourceType":"module"}