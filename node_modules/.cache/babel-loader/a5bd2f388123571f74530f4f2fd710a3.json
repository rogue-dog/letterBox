{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldHighlight = shouldHighlight;\nexports.getChalk = getChalk;\nexports.default = highlight;\n\nvar _jsTokens = require(\"js-tokens\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _chalk = require(\"chalk\");\n\nvar sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\nfunction getDefs(chalk) {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold\n  };\n}\n\nvar NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nvar BRACKET = /^[()[\\]{}]$/;\nvar tokenize;\n{\n  var JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  var getTokenType = function getTokenType(token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = /*#__PURE__*/_regeneratorRuntime.mark(function tokenize(text) {\n    var match, token;\n    return _regeneratorRuntime.wrap(function tokenize$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(match = _jsTokens.default.exec(text))) {\n              _context.next = 6;\n              break;\n            }\n\n            token = _jsTokens.matchToToken(match);\n            _context.next = 4;\n            return {\n              type: getTokenType(token, match.index, text),\n              value: token.value\n            };\n\n          case 4:\n            _context.next = 0;\n            break;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, tokenize);\n  });\n}\n\nfunction highlightTokens(defs, text) {\n  var highlighted = \"\";\n\n  var _iterator = _createForOfIteratorHelper(tokenize(text)),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var _step$value = _step.value,\n          type = _step$value.type,\n          value = _step$value.value;\n      var colorize = defs[type];\n\n      if (colorize) {\n        highlighted += value.split(NEWLINE).map(function (str) {\n          return colorize(str);\n        }).join(\"\\n\");\n      } else {\n        highlighted += value;\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return highlighted;\n}\n\nfunction shouldHighlight(options) {\n  return !!_chalk.supportsColor || options.forceColor;\n}\n\nfunction getChalk(options) {\n  return options.forceColor ? new _chalk.constructor({\n    enabled: true,\n    level: 1\n  }) : _chalk;\n}\n\nfunction highlight(code) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (shouldHighlight(options)) {\n    var chalk = getChalk(options);\n    var defs = getDefs(chalk);\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/highlight/lib/index.js"],"names":["Object","defineProperty","exports","value","shouldHighlight","getChalk","default","highlight","_jsTokens","require","_helperValidatorIdentifier","_chalk","sometimesKeywords","Set","getDefs","chalk","keyword","cyan","capitalized","yellow","jsxIdentifier","punctuator","number","magenta","string","green","regex","comment","grey","invalid","white","bgRed","bold","NEWLINE","BRACKET","tokenize","JSX_TAG","getTokenType","token","offset","text","type","isKeyword","isStrictReservedWord","has","test","substr","toLowerCase","match","exec","matchToToken","index","highlightTokens","defs","highlighted","colorize","split","map","str","join","options","supportsColor","forceColor","constructor","enabled","level","code"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldHighlight = shouldHighlight;\nexports.getChalk = getChalk;\nexports.default = highlight;\n\nvar _jsTokens = require(\"js-tokens\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _chalk = require(\"chalk\");\n\nconst sometimesKeywords = new Set([\"as\", \"async\", \"from\", \"get\", \"of\", \"set\"]);\n\nfunction getDefs(chalk) {\n  return {\n    keyword: chalk.cyan,\n    capitalized: chalk.yellow,\n    jsxIdentifier: chalk.yellow,\n    punctuator: chalk.yellow,\n    number: chalk.magenta,\n    string: chalk.green,\n    regex: chalk.magenta,\n    comment: chalk.grey,\n    invalid: chalk.white.bgRed.bold\n  };\n}\n\nconst NEWLINE = /\\r\\n|[\\n\\r\\u2028\\u2029]/;\nconst BRACKET = /^[()[\\]{}]$/;\nlet tokenize;\n{\n  const JSX_TAG = /^[a-z][\\w-]*$/i;\n\n  const getTokenType = function (token, offset, text) {\n    if (token.type === \"name\") {\n      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isStrictReservedWord)(token.value, true) || sometimesKeywords.has(token.value)) {\n        return \"keyword\";\n      }\n\n      if (JSX_TAG.test(token.value) && (text[offset - 1] === \"<\" || text.substr(offset - 2, 2) == \"</\")) {\n        return \"jsxIdentifier\";\n      }\n\n      if (token.value[0] !== token.value[0].toLowerCase()) {\n        return \"capitalized\";\n      }\n    }\n\n    if (token.type === \"punctuator\" && BRACKET.test(token.value)) {\n      return \"bracket\";\n    }\n\n    if (token.type === \"invalid\" && (token.value === \"@\" || token.value === \"#\")) {\n      return \"punctuator\";\n    }\n\n    return token.type;\n  };\n\n  tokenize = function* (text) {\n    let match;\n\n    while (match = _jsTokens.default.exec(text)) {\n      const token = _jsTokens.matchToToken(match);\n\n      yield {\n        type: getTokenType(token, match.index, text),\n        value: token.value\n      };\n    }\n  };\n}\n\nfunction highlightTokens(defs, text) {\n  let highlighted = \"\";\n\n  for (const {\n    type,\n    value\n  } of tokenize(text)) {\n    const colorize = defs[type];\n\n    if (colorize) {\n      highlighted += value.split(NEWLINE).map(str => colorize(str)).join(\"\\n\");\n    } else {\n      highlighted += value;\n    }\n  }\n\n  return highlighted;\n}\n\nfunction shouldHighlight(options) {\n  return !!_chalk.supportsColor || options.forceColor;\n}\n\nfunction getChalk(options) {\n  return options.forceColor ? new _chalk.constructor({\n    enabled: true,\n    level: 1\n  }) : _chalk;\n}\n\nfunction highlight(code, options = {}) {\n  if (shouldHighlight(options)) {\n    const chalk = getChalk(options);\n    const defs = getDefs(chalk);\n    return highlightTokens(defs, code);\n  } else {\n    return code;\n  }\n}"]},"metadata":{},"sourceType":"script"}