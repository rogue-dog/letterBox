{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(parser);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  var data = require(\"@babel/parser\");\n\n  _parser = function _parser() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  var data = require(\"@babel/code-frame\");\n\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = _interopRequireDefault(require(\"./util/missing-plugin-helper\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction parser(pluginPasses, _ref, code) {\n  var parserOpts, _ref$highlightCode, highlightCode, _ref$filename, filename, results, _iterator, _step, plugins, _iterator2, _step2, plugin, parserOverride, ast, loc, missingPlugin, codeFrame;\n\n  return _regeneratorRuntime.wrap(function parser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parserOpts = _ref.parserOpts, _ref$highlightCode = _ref.highlightCode, highlightCode = _ref$highlightCode === void 0 ? true : _ref$highlightCode, _ref$filename = _ref.filename, filename = _ref$filename === void 0 ? \"unknown\" : _ref$filename;\n          _context.prev = 1;\n          results = [];\n          _iterator = _createForOfIteratorHelper(pluginPasses);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              plugins = _step.value;\n              _iterator2 = _createForOfIteratorHelper(plugins);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  plugin = _step2.value;\n                  parserOverride = plugin.parserOverride;\n\n                  if (parserOverride) {\n                    ast = parserOverride(code, parserOpts, _parser().parse);\n                    if (ast !== undefined) results.push(ast);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (!(results.length === 0)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"return\", (0, _parser().parse)(code, parserOpts));\n\n        case 9:\n          if (!(results.length === 1)) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.delegateYield([], \"t0\", 11);\n\n        case 11:\n          if (!(typeof results[0].then === \"function\")) {\n            _context.next = 13;\n            break;\n          }\n\n          throw new Error(\"You appear to be using an async parser plugin, \" + \"which your current version of Babel does not support. \" + \"If you're using a published plugin, you may need to upgrade \" + \"your @babel/core version.\");\n\n        case 13:\n          return _context.abrupt(\"return\", results[0]);\n\n        case 14:\n          throw new Error(\"More than one plugin attempted to override parsing.\");\n\n        case 17:\n          _context.prev = 17;\n          _context.t1 = _context[\"catch\"](1);\n\n          if (_context.t1.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n            _context.t1.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n          }\n\n          loc = _context.t1.loc, missingPlugin = _context.t1.missingPlugin;\n\n          if (loc) {\n            codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n              start: {\n                line: loc.line,\n                column: loc.column + 1\n              }\n            }, {\n              highlightCode: highlightCode\n            });\n\n            if (missingPlugin) {\n              _context.t1.message = \"\".concat(filename, \": \") + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n            } else {\n              _context.t1.message = \"\".concat(filename, \": \").concat(_context.t1.message, \"\\n\\n\") + codeFrame;\n            }\n\n            _context.t1.code = \"BABEL_PARSE_ERROR\";\n          }\n\n          throw _context.t1;\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 17]]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/core/lib/parser/index.js"],"names":["parser","Object","defineProperty","exports","value","default","_parser","data","require","_codeFrame","_missingPluginHelper","_interopRequireDefault","obj","__esModule","pluginPasses","code","parserOpts","highlightCode","filename","results","plugins","plugin","parserOverride","ast","parse","undefined","push","length","then","Error","message","loc","missingPlugin","codeFrame","codeFrameColumns","start","line","column"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = _interopRequireDefault(require(\"./util/missing-plugin-helper\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction* parser(pluginPasses, {\n  parserOpts,\n  highlightCode = true,\n  filename = \"unknown\"\n}, code) {\n  try {\n    const results = [];\n\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const {\n          parserOverride\n        } = plugin;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, _parser().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _parser().parse)(code, parserOpts);\n    } else if (results.length === 1) {\n      yield* [];\n\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const {\n      loc,\n      missingPlugin\n    } = err;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      }, {\n        highlightCode\n      });\n\n      if (missingPlugin) {\n        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}"]},"metadata":{},"sourceType":"script"}