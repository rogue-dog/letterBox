{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _buffer = require(\"./buffer\");\n\nvar n = require(\"./node\");\n\nvar t = require(\"@babel/types\");\n\nvar generatorFunctions = require(\"./generators\");\n\nvar SCIENTIFIC_NOTATION = /e/i;\nvar ZERO_DECIMAL_INTEGER = /\\.0+$/;\nvar NON_DECIMAL_LITERAL = /^0[box]/;\nvar PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nvar isProgram = t.isProgram,\n    isFile = t.isFile,\n    isEmptyStatement = t.isEmptyStatement;\nvar needsParens = n.needsParens,\n    needsWhitespaceAfter = n.needsWhitespaceAfter,\n    needsWhitespaceBefore = n.needsWhitespaceBefore;\n\nvar Printer = /*#__PURE__*/function () {\n  function Printer(format, map) {\n    _classCallCheck(this, Printer);\n\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._insideAux = false;\n    this._parenPushNewlineState = null;\n    this._noLineTerminator = false;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new WeakSet();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format;\n    this._buf = new _buffer.default(map);\n  }\n\n  _createClass(Printer, [{\n    key: \"generate\",\n    value: function generate(ast) {\n      this.print(ast);\n\n      this._maybeAddAuxComment();\n\n      return this._buf.get();\n    }\n  }, {\n    key: \"indent\",\n    value: function indent() {\n      if (this.format.compact || this.format.concise) return;\n      this._indent++;\n    }\n  }, {\n    key: \"dedent\",\n    value: function dedent() {\n      if (this.format.compact || this.format.concise) return;\n      this._indent--;\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      this._maybeAddAuxComment();\n\n      this._append(\";\", !force);\n    }\n  }, {\n    key: \"rightBrace\",\n    value: function rightBrace() {\n      if (this.format.minified) {\n        this._buf.removeLastSemicolon();\n      }\n\n      this.token(\"}\");\n    }\n  }, {\n    key: \"space\",\n    value: function space() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.format.compact) return;\n\n      if (force) {\n        this._space();\n      } else if (this._buf.hasContent()) {\n        var lastCp = this.getLastChar();\n\n        if (lastCp !== 32 && lastCp !== 10) {\n          this._space();\n        }\n      }\n    }\n  }, {\n    key: \"word\",\n    value: function word(str) {\n      if (this._endsWithWord || this.endsWith(47) && str.charCodeAt(0) === 47) {\n        this._space();\n      }\n\n      this._maybeAddAuxComment();\n\n      this._append(str);\n\n      this._endsWithWord = true;\n    }\n  }, {\n    key: \"number\",\n    value: function number(str) {\n      this.word(str);\n      this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n    }\n  }, {\n    key: \"token\",\n    value: function token(str) {\n      var lastChar = this.getLastChar();\n      var strFirst = str.charCodeAt(0);\n\n      if (str === \"--\" && lastChar === 33 || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n        this._space();\n      }\n\n      this._maybeAddAuxComment();\n\n      this._append(str);\n    }\n  }, {\n    key: \"newline\",\n    value: function newline() {\n      var i = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      if (this.format.retainLines || this.format.compact) return;\n\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n\n      var charBeforeNewline = this.endsWithCharAndNewline();\n      if (charBeforeNewline === 10) return;\n\n      if (charBeforeNewline === 123 || charBeforeNewline === 58) {\n        i--;\n      }\n\n      if (i <= 0) return;\n\n      for (var j = 0; j < i; j++) {\n        this._newline();\n      }\n    }\n  }, {\n    key: \"endsWith\",\n    value: function endsWith(char) {\n      return this.getLastChar() === char;\n    }\n  }, {\n    key: \"getLastChar\",\n    value: function getLastChar() {\n      return this._buf.getLastChar();\n    }\n  }, {\n    key: \"endsWithCharAndNewline\",\n    value: function endsWithCharAndNewline() {\n      return this._buf.endsWithCharAndNewline();\n    }\n  }, {\n    key: \"removeTrailingNewline\",\n    value: function removeTrailingNewline() {\n      this._buf.removeTrailingNewline();\n    }\n  }, {\n    key: \"exactSource\",\n    value: function exactSource(loc, cb) {\n      this._catchUp(\"start\", loc);\n\n      this._buf.exactSource(loc, cb);\n    }\n  }, {\n    key: \"source\",\n    value: function source(prop, loc) {\n      this._catchUp(prop, loc);\n\n      this._buf.source(prop, loc);\n    }\n  }, {\n    key: \"withSource\",\n    value: function withSource(prop, loc, cb) {\n      this._catchUp(prop, loc);\n\n      this._buf.withSource(prop, loc, cb);\n    }\n  }, {\n    key: \"_space\",\n    value: function _space() {\n      this._append(\" \", true);\n    }\n  }, {\n    key: \"_newline\",\n    value: function _newline() {\n      this._append(\"\\n\", true);\n    }\n  }, {\n    key: \"_append\",\n    value: function _append(str) {\n      var queue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this._maybeAddParen(str);\n\n      this._maybeIndent(str);\n\n      if (queue) this._buf.queue(str);else this._buf.append(str);\n      this._endsWithWord = false;\n      this._endsWithInteger = false;\n    }\n  }, {\n    key: \"_maybeIndent\",\n    value: function _maybeIndent(str) {\n      if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {\n        this._buf.queue(this._getIndent());\n      }\n    }\n  }, {\n    key: \"_maybeAddParen\",\n    value: function _maybeAddParen(str) {\n      var parenPushNewlineState = this._parenPushNewlineState;\n      if (!parenPushNewlineState) return;\n      var i;\n\n      for (i = 0; i < str.length && str[i] === \" \"; i++) {\n        continue;\n      }\n\n      if (i === str.length) {\n        return;\n      }\n\n      var cha = str[i];\n\n      if (cha !== \"\\n\") {\n        if (cha !== \"/\" || i + 1 === str.length) {\n          this._parenPushNewlineState = null;\n          return;\n        }\n\n        var chaPost = str[i + 1];\n\n        if (chaPost === \"*\") {\n          if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {\n            return;\n          }\n        } else if (chaPost !== \"/\") {\n          this._parenPushNewlineState = null;\n          return;\n        }\n      }\n\n      this.token(\"(\");\n      this.indent();\n      parenPushNewlineState.printed = true;\n    }\n  }, {\n    key: \"_catchUp\",\n    value: function _catchUp(prop, loc) {\n      if (!this.format.retainLines) return;\n      var pos = loc ? loc[prop] : null;\n\n      if ((pos == null ? void 0 : pos.line) != null) {\n        var count = pos.line - this._buf.getCurrentLine();\n\n        for (var i = 0; i < count; i++) {\n          this._newline();\n        }\n      }\n    }\n  }, {\n    key: \"_getIndent\",\n    value: function _getIndent() {\n      return this.format.indent.style.repeat(this._indent);\n    }\n  }, {\n    key: \"startTerminatorless\",\n    value: function startTerminatorless() {\n      var isLabel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (isLabel) {\n        this._noLineTerminator = true;\n        return null;\n      } else {\n        return this._parenPushNewlineState = {\n          printed: false\n        };\n      }\n    }\n  }, {\n    key: \"endTerminatorless\",\n    value: function endTerminatorless(state) {\n      this._noLineTerminator = false;\n\n      if (state != null && state.printed) {\n        this.dedent();\n        this.newline();\n        this.token(\")\");\n      }\n    }\n  }, {\n    key: \"print\",\n    value: function print(node, parent) {\n      var _this = this;\n\n      if (!node) return;\n      var oldConcise = this.format.concise;\n\n      if (node._compact) {\n        this.format.concise = true;\n      }\n\n      var printMethod = this[node.type];\n\n      if (!printMethod) {\n        throw new ReferenceError(\"unknown node of type \".concat(JSON.stringify(node.type), \" with constructor \").concat(JSON.stringify(node == null ? void 0 : node.constructor.name)));\n      }\n\n      this._printStack.push(node);\n\n      var oldInAux = this._insideAux;\n      this._insideAux = !node.loc;\n\n      this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n      var shouldPrintParens = needsParens(node, parent, this._printStack);\n\n      if (this.format.retainFunctionParens && node.type === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n        shouldPrintParens = true;\n      }\n\n      if (shouldPrintParens) this.token(\"(\");\n\n      this._printLeadingComments(node);\n\n      var loc = isProgram(node) || isFile(node) ? null : node.loc;\n      this.withSource(\"start\", loc, function () {\n        printMethod.call(_this, node, parent);\n      });\n\n      this._printTrailingComments(node);\n\n      if (shouldPrintParens) this.token(\")\");\n\n      this._printStack.pop();\n\n      this.format.concise = oldConcise;\n      this._insideAux = oldInAux;\n    }\n  }, {\n    key: \"_maybeAddAuxComment\",\n    value: function _maybeAddAuxComment(enteredPositionlessNode) {\n      if (enteredPositionlessNode) this._printAuxBeforeComment();\n      if (!this._insideAux) this._printAuxAfterComment();\n    }\n  }, {\n    key: \"_printAuxBeforeComment\",\n    value: function _printAuxBeforeComment() {\n      if (this._printAuxAfterOnNextUserNode) return;\n      this._printAuxAfterOnNextUserNode = true;\n      var comment = this.format.auxiliaryCommentBefore;\n\n      if (comment) {\n        this._printComment({\n          type: \"CommentBlock\",\n          value: comment\n        });\n      }\n    }\n  }, {\n    key: \"_printAuxAfterComment\",\n    value: function _printAuxAfterComment() {\n      if (!this._printAuxAfterOnNextUserNode) return;\n      this._printAuxAfterOnNextUserNode = false;\n      var comment = this.format.auxiliaryCommentAfter;\n\n      if (comment) {\n        this._printComment({\n          type: \"CommentBlock\",\n          value: comment\n        });\n      }\n    }\n  }, {\n    key: \"getPossibleRaw\",\n    value: function getPossibleRaw(node) {\n      var extra = node.extra;\n\n      if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n        return extra.raw;\n      }\n    }\n  }, {\n    key: \"printJoin\",\n    value: function printJoin(nodes, parent) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (!(nodes != null && nodes.length)) return;\n      if (opts.indent) this.indent();\n      var newlineOpts = {\n        addNewlines: opts.addNewlines\n      };\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        if (!node) continue;\n        if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n        this.print(node, parent);\n\n        if (opts.iterator) {\n          opts.iterator(node, i);\n        }\n\n        if (opts.separator && i < nodes.length - 1) {\n          opts.separator.call(this);\n        }\n\n        if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n      }\n\n      if (opts.indent) this.dedent();\n    }\n  }, {\n    key: \"printAndIndentOnComments\",\n    value: function printAndIndentOnComments(node, parent) {\n      var indent = node.leadingComments && node.leadingComments.length > 0;\n      if (indent) this.indent();\n      this.print(node, parent);\n      if (indent) this.dedent();\n    }\n  }, {\n    key: \"printBlock\",\n    value: function printBlock(parent) {\n      var node = parent.body;\n\n      if (!isEmptyStatement(node)) {\n        this.space();\n      }\n\n      this.print(node, parent);\n    }\n  }, {\n    key: \"_printTrailingComments\",\n    value: function _printTrailingComments(node) {\n      this._printComments(this._getComments(false, node));\n    }\n  }, {\n    key: \"_printLeadingComments\",\n    value: function _printLeadingComments(node) {\n      this._printComments(this._getComments(true, node), true);\n    }\n  }, {\n    key: \"printInnerComments\",\n    value: function printInnerComments(node) {\n      var indent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      var _node$innerComments;\n\n      if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;\n      if (indent) this.indent();\n\n      this._printComments(node.innerComments);\n\n      if (indent) this.dedent();\n    }\n  }, {\n    key: \"printSequence\",\n    value: function printSequence(nodes, parent) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts.statement = true;\n      return this.printJoin(nodes, parent, opts);\n    }\n  }, {\n    key: \"printList\",\n    value: function printList(items, parent) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (opts.separator == null) {\n        opts.separator = commaSeparator;\n      }\n\n      return this.printJoin(items, parent, opts);\n    }\n  }, {\n    key: \"_printNewline\",\n    value: function _printNewline(leading, node, parent, opts) {\n      if (this.format.retainLines || this.format.compact) return;\n\n      if (this.format.concise) {\n        this.space();\n        return;\n      }\n\n      var lines = 0;\n\n      if (this._buf.hasContent()) {\n        if (!leading) lines++;\n        if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n        var needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n        if (needs(node, parent)) lines++;\n      }\n\n      this.newline(Math.min(2, lines));\n    }\n  }, {\n    key: \"_getComments\",\n    value: function _getComments(leading, node) {\n      return node && (leading ? node.leadingComments : node.trailingComments) || [];\n    }\n  }, {\n    key: \"_printComment\",\n    value: function _printComment(comment, skipNewLines) {\n      var _this2 = this;\n\n      if (!this.format.shouldPrintComment(comment.value)) return;\n      if (comment.ignore) return;\n      if (this._printedComments.has(comment)) return;\n\n      this._printedComments.add(comment);\n\n      var isBlockComment = comment.type === \"CommentBlock\";\n      var printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;\n      if (printNewLines && this._buf.hasContent()) this.newline(1);\n      var lastCharCode = this.getLastChar();\n\n      if (lastCharCode !== 91 && lastCharCode !== 123) {\n        this.space();\n      }\n\n      var val = !isBlockComment && !this._noLineTerminator ? \"//\".concat(comment.value, \"\\n\") : \"/*\".concat(comment.value, \"*/\");\n\n      if (isBlockComment && this.format.indent.adjustMultilineComment) {\n        var _comment$loc;\n\n        var offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n\n        if (offset) {\n          var newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n\n        var indentSize = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());\n        val = val.replace(/\\n(?!$)/g, \"\\n\".concat(\" \".repeat(indentSize)));\n      }\n\n      if (this.endsWith(47)) this._space();\n      this.withSource(\"start\", comment.loc, function () {\n        _this2._append(val);\n      });\n      if (printNewLines) this.newline(1);\n    }\n  }, {\n    key: \"_printComments\",\n    value: function _printComments(comments, inlinePureAnnotation) {\n      if (!(comments != null && comments.length)) return;\n\n      if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {\n        this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));\n      } else {\n        var _iterator = _createForOfIteratorHelper(comments),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var comment = _step.value;\n\n            this._printComment(comment);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"printAssertions\",\n    value: function printAssertions(node) {\n      var _node$assertions;\n\n      if ((_node$assertions = node.assertions) != null && _node$assertions.length) {\n        this.space();\n        this.word(\"assert\");\n        this.space();\n        this.token(\"{\");\n        this.space();\n        this.printList(node.assertions, node);\n        this.space();\n        this.token(\"}\");\n      }\n    }\n  }]);\n\n  return Printer;\n}();\n\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = Printer;\nexports.default = _default;\n\nfunction commaSeparator() {\n  this.token(\",\");\n  this.space();\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/generator/lib/printer.js"],"names":["Object","defineProperty","exports","value","default","_buffer","require","n","t","generatorFunctions","SCIENTIFIC_NOTATION","ZERO_DECIMAL_INTEGER","NON_DECIMAL_LITERAL","PURE_ANNOTATION_RE","isProgram","isFile","isEmptyStatement","needsParens","needsWhitespaceAfter","needsWhitespaceBefore","Printer","format","map","inForStatementInitCounter","_printStack","_indent","_insideAux","_parenPushNewlineState","_noLineTerminator","_printAuxAfterOnNextUserNode","_printedComments","WeakSet","_endsWithInteger","_endsWithWord","_buf","ast","print","_maybeAddAuxComment","get","compact","concise","force","_append","minified","removeLastSemicolon","token","_space","hasContent","lastCp","getLastChar","str","endsWith","charCodeAt","word","Number","isInteger","test","length","lastChar","strFirst","i","retainLines","space","charBeforeNewline","endsWithCharAndNewline","j","_newline","char","removeTrailingNewline","loc","cb","_catchUp","exactSource","prop","source","withSource","queue","_maybeAddParen","_maybeIndent","append","_getIndent","parenPushNewlineState","cha","chaPost","slice","indent","printed","pos","line","count","getCurrentLine","style","repeat","isLabel","state","dedent","newline","node","parent","oldConcise","_compact","printMethod","type","ReferenceError","JSON","stringify","constructor","name","push","oldInAux","shouldPrintParens","retainFunctionParens","extra","parenthesized","_printLeadingComments","call","_printTrailingComments","pop","enteredPositionlessNode","_printAuxBeforeComment","_printAuxAfterComment","comment","auxiliaryCommentBefore","_printComment","auxiliaryCommentAfter","raw","rawValue","nodes","opts","newlineOpts","addNewlines","statement","_printNewline","iterator","separator","leadingComments","body","_printComments","_getComments","_node$innerComments","innerComments","printJoin","items","commaSeparator","leading","lines","needs","Math","min","trailingComments","skipNewLines","shouldPrintComment","ignore","has","add","isBlockComment","printNewLines","lastCharCode","val","adjustMultilineComment","_comment$loc","offset","start","column","newlineRegex","RegExp","replace","indentSize","max","getCurrentColumn","comments","inlinePureAnnotation","_node$assertions","assertions","printList","assign","prototype","Noop","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _buffer = require(\"./buffer\");\n\nvar n = require(\"./node\");\n\nvar t = require(\"@babel/types\");\n\nvar generatorFunctions = require(\"./generators\");\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nconst {\n  isProgram,\n  isFile,\n  isEmptyStatement\n} = t;\nconst {\n  needsParens,\n  needsWhitespaceAfter,\n  needsWhitespaceBefore\n} = n;\n\nclass Printer {\n  constructor(format, map) {\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._insideAux = false;\n    this._parenPushNewlineState = null;\n    this._noLineTerminator = false;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new WeakSet();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format;\n    this._buf = new _buffer.default(map);\n  }\n\n  generate(ast) {\n    this.print(ast);\n\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  indent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent++;\n  }\n\n  dedent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent--;\n  }\n\n  semicolon(force = false) {\n    this._maybeAddAuxComment();\n\n    this._append(\";\", !force);\n  }\n\n  rightBrace() {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n\n    this.token(\"}\");\n  }\n\n  space(force = false) {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n\n      if (lastCp !== 32 && lastCp !== 10) {\n        this._space();\n      }\n    }\n  }\n\n  word(str) {\n    if (this._endsWithWord || this.endsWith(47) && str.charCodeAt(0) === 47) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str);\n\n    this._endsWithWord = true;\n  }\n\n  number(str) {\n    this.word(str);\n    this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n  }\n\n  token(str) {\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n\n    if (str === \"--\" && lastChar === 33 || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str);\n  }\n\n  newline(i = 1) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    const charBeforeNewline = this.endsWithCharAndNewline();\n    if (charBeforeNewline === 10) return;\n\n    if (charBeforeNewline === 123 || charBeforeNewline === 58) {\n      i--;\n    }\n\n    if (i <= 0) return;\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n  }\n\n  endsWith(char) {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar() {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline() {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc, cb) {\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop, loc) {\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  withSource(prop, loc, cb) {\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space() {\n    this._append(\" \", true);\n  }\n\n  _newline() {\n    this._append(\"\\n\", true);\n  }\n\n  _append(str, queue = false) {\n    this._maybeAddParen(str);\n\n    this._maybeIndent(str);\n\n    if (queue) this._buf.queue(str);else this._buf.append(str);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(str) {\n    if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {\n      this._buf.queue(this._getIndent());\n    }\n  }\n\n  _maybeAddParen(str) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n    let i;\n\n    for (i = 0; i < str.length && str[i] === \" \"; i++) continue;\n\n    if (i === str.length) {\n      return;\n    }\n\n    const cha = str[i];\n\n    if (cha !== \"\\n\") {\n      if (cha !== \"/\" || i + 1 === str.length) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str[i + 1];\n\n      if (chaPost === \"*\") {\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {\n          return;\n        }\n      } else if (chaPost !== \"/\") {\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _catchUp(prop, loc) {\n    if (!this.format.retainLines) return;\n    const pos = loc ? loc[prop] : null;\n\n    if ((pos == null ? void 0 : pos.line) != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  _getIndent() {\n    return this.format.indent.style.repeat(this._indent);\n  }\n\n  startTerminatorless(isLabel = false) {\n    if (isLabel) {\n      this._noLineTerminator = true;\n      return null;\n    } else {\n      return this._parenPushNewlineState = {\n        printed: false\n      };\n    }\n  }\n\n  endTerminatorless(state) {\n    this._noLineTerminator = false;\n\n    if (state != null && state.printed) {\n      this.dedent();\n      this.newline();\n      this.token(\")\");\n    }\n  }\n\n  print(node, parent) {\n    if (!node) return;\n    const oldConcise = this.format.concise;\n\n    if (node._compact) {\n      this.format.concise = true;\n    }\n\n    const printMethod = this[node.type];\n\n    if (!printMethod) {\n      throw new ReferenceError(`unknown node of type ${JSON.stringify(node.type)} with constructor ${JSON.stringify(node == null ? void 0 : node.constructor.name)}`);\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = !node.loc;\n\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens = needsParens(node, parent, this._printStack);\n\n    if (this.format.retainFunctionParens && node.type === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n      shouldPrintParens = true;\n    }\n\n    if (shouldPrintParens) this.token(\"(\");\n\n    this._printLeadingComments(node);\n\n    const loc = isProgram(node) || isFile(node) ? null : node.loc;\n    this.withSource(\"start\", loc, () => {\n      printMethod.call(this, node, parent);\n    });\n\n    this._printTrailingComments(node);\n\n    if (shouldPrintParens) this.token(\")\");\n\n    this._printStack.pop();\n\n    this.format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    const comment = this.format.auxiliaryCommentBefore;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    const comment = this.format.auxiliaryCommentAfter;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  getPossibleRaw(node) {\n    const extra = node.extra;\n\n    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  }\n\n  printJoin(nodes, parent, opts = {}) {\n    if (!(nodes != null && nodes.length)) return;\n    if (opts.indent) this.indent();\n    const newlineOpts = {\n      addNewlines: opts.addNewlines\n    };\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n      this.print(node, parent);\n\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n\n      if (opts.separator && i < nodes.length - 1) {\n        opts.separator.call(this);\n      }\n\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node, parent) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent) {\n    const node = parent.body;\n\n    if (!isEmptyStatement(node)) {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node) {\n    this._printComments(this._getComments(false, node));\n  }\n\n  _printLeadingComments(node) {\n    this._printComments(this._getComments(true, node), true);\n  }\n\n  printInnerComments(node, indent = true) {\n    var _node$innerComments;\n\n    if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;\n    if (indent) this.indent();\n\n    this._printComments(node.innerComments);\n\n    if (indent) this.dedent();\n  }\n\n  printSequence(nodes, parent, opts = {}) {\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items, parent, opts = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(leading, node, parent, opts) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    let lines = 0;\n\n    if (this._buf.hasContent()) {\n      if (!leading) lines++;\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      if (needs(node, parent)) lines++;\n    }\n\n    this.newline(Math.min(2, lines));\n  }\n\n  _getComments(leading, node) {\n    return node && (leading ? node.leadingComments : node.trailingComments) || [];\n  }\n\n  _printComment(comment, skipNewLines) {\n    if (!this.format.shouldPrintComment(comment.value)) return;\n    if (comment.ignore) return;\n    if (this._printedComments.has(comment)) return;\n\n    this._printedComments.add(comment);\n\n    const isBlockComment = comment.type === \"CommentBlock\";\n    const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;\n    if (printNewLines && this._buf.hasContent()) this.newline(1);\n    const lastCharCode = this.getLastChar();\n\n    if (lastCharCode !== 91 && lastCharCode !== 123) {\n      this.space();\n    }\n\n    let val = !isBlockComment && !this._noLineTerminator ? `//${comment.value}\\n` : `/*${comment.value}*/`;\n\n    if (isBlockComment && this.format.indent.adjustMultilineComment) {\n      var _comment$loc;\n\n      const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n\n      if (offset) {\n        const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n        val = val.replace(newlineRegex, \"\\n\");\n      }\n\n      const indentSize = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());\n      val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n    }\n\n    if (this.endsWith(47)) this._space();\n    this.withSource(\"start\", comment.loc, () => {\n      this._append(val);\n    });\n    if (printNewLines) this.newline(1);\n  }\n\n  _printComments(comments, inlinePureAnnotation) {\n    if (!(comments != null && comments.length)) return;\n\n    if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {\n      this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));\n    } else {\n      for (const comment of comments) {\n        this._printComment(comment);\n      }\n    }\n  }\n\n  printAssertions(node) {\n    var _node$assertions;\n\n    if ((_node$assertions = node.assertions) != null && _node$assertions.length) {\n      this.space();\n      this.word(\"assert\");\n      this.space();\n      this.token(\"{\");\n      this.space();\n      this.printList(node.assertions, node);\n      this.space();\n      this.token(\"}\");\n    }\n  }\n\n}\n\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = Printer;\nexports.default = _default;\n\nfunction commaSeparator() {\n  this.token(\",\");\n  this.space();\n}"]},"metadata":{},"sourceType":"script"}