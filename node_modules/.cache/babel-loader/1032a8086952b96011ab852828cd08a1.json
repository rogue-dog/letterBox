{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _get = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createClass = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar beforeExpr = true;\nvar startsExpr = true;\nvar isLoop = true;\nvar isAssign = true;\nvar prefix = true;\nvar postfix = true;\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, TokenType);\n\n  this.label = void 0;\n  this.keyword = void 0;\n  this.beforeExpr = void 0;\n  this.startsExpr = void 0;\n  this.rightAssociative = void 0;\n  this.isLoop = void 0;\n  this.isAssign = void 0;\n  this.prefix = void 0;\n  this.postfix = void 0;\n  this.binop = void 0;\n  this.updateContext = void 0;\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.rightAssociative = !!conf.rightAssociative;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop != null ? conf.binop : null;\n  this.updateContext = null;\n};\n\nvar keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  var token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr: beforeExpr,\n    binop: binop\n  });\n}\n\nvar types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr: startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr: startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr: startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr: startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr: startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr: startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr: startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr: beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr: beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr: beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr: beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr: beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr: beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr: beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr: beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr: startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr: startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  moduloAssign: new TokenType(\"_=\", {\n    beforeExpr: beforeExpr,\n    isAssign: isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix: prefix,\n    postfix: postfix,\n    startsExpr: startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr: beforeExpr,\n    binop: 9,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    binop: 10,\n    startsExpr: startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr: beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr: beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr: beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop: isLoop,\n    beforeExpr: beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr: beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop: isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr: startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr: beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop: isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr: beforeExpr,\n    startsExpr: startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr: startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr: startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr: startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr: beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr: startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr: startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr: startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr: startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr: beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr: beforeExpr,\n    prefix: prefix,\n    startsExpr: startsExpr\n  })\n};\nvar lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nvar skipWhiteSpaceInLine = new RegExp(\"(?:[^\\\\S\\\\n\\\\r\\\\u2028\\\\u2029]|\\\\/\\\\/.*|\\\\/\\\\*.*?\\\\*\\\\/)*\", \"y\");\nvar skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nvar Position = function Position(line, col) {\n  _classCallCheck(this, Position);\n\n  this.line = void 0;\n  this.column = void 0;\n  this.line = line;\n  this.column = col;\n};\n\nvar SourceLocation = function SourceLocation(start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = void 0;\n  this.end = void 0;\n  this.filename = void 0;\n  this.identifierName = void 0;\n  this.start = start;\n  this.end = end;\n};\n\nfunction getLineInfo(input, offset) {\n  var line = 1;\n  var lineStart = 0;\n  var match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nvar BaseParser = /*#__PURE__*/function () {\n  function BaseParser() {\n    _classCallCheck(this, BaseParser);\n\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  _createClass(BaseParser, [{\n    key: \"hasPlugin\",\n    value: function hasPlugin(name) {\n      return this.plugins.has(name);\n    }\n  }, {\n    key: \"getPluginOption\",\n    value: function getPluginOption(plugin, name) {\n      if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n    }\n  }]);\n\n  return BaseParser;\n}();\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    var _node$trailingComment;\n\n    (_node$trailingComment = node.trailingComments).unshift.apply(_node$trailingComment, _toConsumableArray(comments));\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    var _node$innerComments;\n\n    (_node$innerComments = node.innerComments).unshift.apply(_node$innerComments, _toConsumableArray(comments));\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  var lastElement = null;\n  var i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nvar CommentsParser = /*#__PURE__*/function (_BaseParser) {\n  _inherits(CommentsParser, _BaseParser);\n\n  var _super = _createSuper(CommentsParser);\n\n  function CommentsParser() {\n    _classCallCheck(this, CommentsParser);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CommentsParser, [{\n    key: \"addComment\",\n    value: function addComment(comment) {\n      if (this.filename) comment.loc.filename = this.filename;\n      this.state.comments.push(comment);\n    }\n  }, {\n    key: \"processComment\",\n    value: function processComment(node) {\n      var commentStack = this.state.commentStack;\n      var commentStackLength = commentStack.length;\n      if (commentStackLength === 0) return;\n      var i = commentStackLength - 1;\n      var lastCommentWS = commentStack[i];\n\n      if (lastCommentWS.start === node.end) {\n        lastCommentWS.leadingNode = node;\n        i--;\n      }\n\n      var nodeStart = node.start;\n\n      for (; i >= 0; i--) {\n        var commentWS = commentStack[i];\n        var commentEnd = commentWS.end;\n\n        if (commentEnd > nodeStart) {\n          commentWS.containingNode = node;\n          this.finalizeComment(commentWS);\n          commentStack.splice(i, 1);\n        } else {\n          if (commentEnd === nodeStart) {\n            commentWS.trailingNode = node;\n          }\n\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"finalizeComment\",\n    value: function finalizeComment(commentWS) {\n      var comments = commentWS.comments;\n\n      if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n        if (commentWS.leadingNode !== null) {\n          setTrailingComments(commentWS.leadingNode, comments);\n        }\n\n        if (commentWS.trailingNode !== null) {\n          commentWS.trailingNode.leadingComments = comments;\n        }\n      } else {\n        var node = commentWS.containingNode,\n            commentStart = commentWS.start;\n\n        if (this.input.charCodeAt(commentStart - 1) === 44) {\n          switch (node.type) {\n            case \"ObjectExpression\":\n            case \"ObjectPattern\":\n            case \"RecordExpression\":\n              adjustInnerComments(node, node.properties, commentWS);\n              break;\n\n            case \"CallExpression\":\n            case \"OptionalCallExpression\":\n              adjustInnerComments(node, node.arguments, commentWS);\n              break;\n\n            case \"FunctionDeclaration\":\n            case \"FunctionExpression\":\n            case \"ArrowFunctionExpression\":\n            case \"ObjectMethod\":\n            case \"ClassMethod\":\n            case \"ClassPrivateMethod\":\n              adjustInnerComments(node, node.params, commentWS);\n              break;\n\n            case \"ArrayExpression\":\n            case \"ArrayPattern\":\n            case \"TupleExpression\":\n              adjustInnerComments(node, node.elements, commentWS);\n              break;\n\n            case \"ExportNamedDeclaration\":\n            case \"ImportDeclaration\":\n              adjustInnerComments(node, node.specifiers, commentWS);\n              break;\n\n            default:\n              {\n                setInnerComments(node, comments);\n              }\n          }\n        } else {\n          setInnerComments(node, comments);\n        }\n      }\n    }\n  }, {\n    key: \"finalizeRemainingComments\",\n    value: function finalizeRemainingComments() {\n      var commentStack = this.state.commentStack;\n\n      for (var i = commentStack.length - 1; i >= 0; i--) {\n        this.finalizeComment(commentStack[i]);\n      }\n\n      this.state.commentStack = [];\n    }\n  }, {\n    key: \"resetPreviousNodeTrailingComments\",\n    value: function resetPreviousNodeTrailingComments(node) {\n      var commentStack = this.state.commentStack;\n      var length = commentStack.length;\n      if (length === 0) return;\n      var commentWS = commentStack[length - 1];\n\n      if (commentWS.leadingNode === node) {\n        commentWS.leadingNode = null;\n      }\n    }\n  }]);\n\n  return CommentsParser;\n}(BaseParser);\n\nvar ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nvar ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nvar SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: \"import.meta may appear only with 'sourceType: \\\"module\\\"'\",\n  ImportOutsideModule: \"'import' and 'export' may appear only with 'sourceType: \\\"module\\\"'\"\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  var templates = {};\n  Object.keys(messages).forEach(function (reasonCode) {\n    templates[reasonCode] = Object.freeze({\n      code: code,\n      reasonCode: reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nvar ParserError = /*#__PURE__*/function (_CommentsParser) {\n  _inherits(ParserError, _CommentsParser);\n\n  var _super2 = _createSuper(ParserError);\n\n  function ParserError() {\n    _classCallCheck(this, ParserError);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ParserError, [{\n    key: \"getLocationForPosition\",\n    value: function getLocationForPosition(pos) {\n      var loc;\n      if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n      return loc;\n    }\n  }, {\n    key: \"raise\",\n    value: function raise(pos, _ref) {\n      var code = _ref.code,\n          reasonCode = _ref.reasonCode,\n          template = _ref.template;\n\n      for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n        params[_key - 2] = arguments[_key];\n      }\n\n      return this.raiseWithData.apply(this, [pos, {\n        code: code,\n        reasonCode: reasonCode\n      }, template].concat(params));\n    }\n  }, {\n    key: \"raiseOverwrite\",\n    value: function raiseOverwrite(pos, _ref2) {\n      var code = _ref2.code,\n          template = _ref2.template;\n\n      for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        params[_key2 - 2] = arguments[_key2];\n      }\n\n      var loc = this.getLocationForPosition(pos);\n      var message = template.replace(/%(\\d+)/g, function (_, i) {\n        return params[i];\n      }) + \" (\".concat(loc.line, \":\").concat(loc.column, \")\");\n\n      if (this.options.errorRecovery) {\n        var errors = this.state.errors;\n\n        for (var i = errors.length - 1; i >= 0; i--) {\n          var error = errors[i];\n\n          if (error.pos === pos) {\n            return Object.assign(error, {\n              message: message\n            });\n          } else if (error.pos < pos) {\n            break;\n          }\n        }\n      }\n\n      return this._raise({\n        code: code,\n        loc: loc,\n        pos: pos\n      }, message);\n    }\n  }, {\n    key: \"raiseWithData\",\n    value: function raiseWithData(pos, data, errorTemplate) {\n      for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n        params[_key3 - 3] = arguments[_key3];\n      }\n\n      var loc = this.getLocationForPosition(pos);\n      var message = errorTemplate.replace(/%(\\d+)/g, function (_, i) {\n        return params[i];\n      }) + \" (\".concat(loc.line, \":\").concat(loc.column, \")\");\n      return this._raise(Object.assign({\n        loc: loc,\n        pos: pos\n      }, data), message);\n    }\n  }, {\n    key: \"_raise\",\n    value: function _raise(errorContext, message) {\n      var err = new SyntaxError(message);\n      Object.assign(err, errorContext);\n\n      if (this.options.errorRecovery) {\n        if (!this.isLookahead) this.state.errors.push(err);\n        return err;\n      } else {\n        throw err;\n      }\n    }\n  }]);\n\n  return ParserError;\n}(CommentsParser);\n\nvar estree = function estree(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n\n    var _super3 = _createSuper(_class);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _super3.apply(this, arguments);\n    }\n\n    _createClass(_class, [{\n      key: \"parseRegExpLiteral\",\n      value: function parseRegExpLiteral(_ref3) {\n        var pattern = _ref3.pattern,\n            flags = _ref3.flags;\n        var regex = null;\n\n        try {\n          regex = new RegExp(pattern, flags);\n        } catch (e) {}\n\n        var node = this.estreeParseLiteral(regex);\n        node.regex = {\n          pattern: pattern,\n          flags: flags\n        };\n        return node;\n      }\n    }, {\n      key: \"parseBigIntLiteral\",\n      value: function parseBigIntLiteral(value) {\n        var bigInt;\n\n        try {\n          bigInt = BigInt(value);\n        } catch (_unused) {\n          bigInt = null;\n        }\n\n        var node = this.estreeParseLiteral(bigInt);\n        node.bigint = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"parseDecimalLiteral\",\n      value: function parseDecimalLiteral(value) {\n        var decimal = null;\n        var node = this.estreeParseLiteral(decimal);\n        node.decimal = String(node.value || value);\n        return node;\n      }\n    }, {\n      key: \"estreeParseLiteral\",\n      value: function estreeParseLiteral(value) {\n        return this.parseLiteral(value, \"Literal\");\n      }\n    }, {\n      key: \"parseStringLiteral\",\n      value: function parseStringLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNumericLiteral\",\n      value: function parseNumericLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"parseNullLiteral\",\n      value: function parseNullLiteral() {\n        return this.estreeParseLiteral(null);\n      }\n    }, {\n      key: \"parseBooleanLiteral\",\n      value: function parseBooleanLiteral(value) {\n        return this.estreeParseLiteral(value);\n      }\n    }, {\n      key: \"directiveToStmt\",\n      value: function directiveToStmt(directive) {\n        var directiveLiteral = directive.value;\n        var stmt = this.startNodeAt(directive.start, directive.loc.start);\n        var expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n        expression.value = directiveLiteral.extra.expressionValue;\n        expression.raw = directiveLiteral.extra.raw;\n        stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n        stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n        return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n      }\n    }, {\n      key: \"initFunction\",\n      value: function initFunction(node, isAsync) {\n        _get(_getPrototypeOf(_class.prototype), \"initFunction\", this).call(this, node, isAsync);\n\n        node.expression = false;\n      }\n    }, {\n      key: \"checkDeclaration\",\n      value: function checkDeclaration(node) {\n        if (node != null && this.isObjectProperty(node)) {\n          this.checkDeclaration(node.value);\n        } else {\n          _get(_getPrototypeOf(_class.prototype), \"checkDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"getObjectOrClassMethodParams\",\n      value: function getObjectOrClassMethodParams(method) {\n        return method.value.params;\n      }\n    }, {\n      key: \"isValidDirective\",\n      value: function isValidDirective(stmt) {\n        var _stmt$expression$extr;\n\n        return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n      }\n    }, {\n      key: \"stmtToDirective\",\n      value: function stmtToDirective(stmt) {\n        var value = stmt.expression.value;\n\n        var directive = _get(_getPrototypeOf(_class.prototype), \"stmtToDirective\", this).call(this, stmt);\n\n        this.addExtra(directive.value, \"expressionValue\", value);\n        return directive;\n      }\n    }, {\n      key: \"parseBlockBody\",\n      value: function parseBlockBody(node) {\n        var _get2,\n            _this2 = this;\n\n        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          args[_key4 - 1] = arguments[_key4];\n        }\n\n        (_get2 = _get(_getPrototypeOf(_class.prototype), \"parseBlockBody\", this)).call.apply(_get2, [this, node].concat(args));\n\n        var directiveStatements = node.directives.map(function (d) {\n          return _this2.directiveToStmt(d);\n        });\n        node.body = directiveStatements.concat(node.body);\n        delete node.directives;\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n        if (method.typeParameters) {\n          method.value.typeParameters = method.typeParameters;\n          delete method.typeParameters;\n        }\n\n        classBody.body.push(method);\n      }\n    }, {\n      key: \"parseMaybePrivateName\",\n      value: function parseMaybePrivateName() {\n        var _get3;\n\n        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n          args[_key5] = arguments[_key5];\n        }\n\n        var node = (_get3 = _get(_getPrototypeOf(_class.prototype), \"parseMaybePrivateName\", this)).call.apply(_get3, [this].concat(args));\n\n        if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return this.convertPrivateNameToPrivateIdentifier(node);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"convertPrivateNameToPrivateIdentifier\",\n      value: function convertPrivateNameToPrivateIdentifier(node) {\n        var name = _get(_getPrototypeOf(_class.prototype), \"getPrivateNameSV\", this).call(this, node);\n\n        node = node;\n        delete node.id;\n        node.name = name;\n        node.type = \"PrivateIdentifier\";\n        return node;\n      }\n    }, {\n      key: \"isPrivateName\",\n      value: function isPrivateName(node) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return _get(_getPrototypeOf(_class.prototype), \"isPrivateName\", this).call(this, node);\n        }\n\n        return node.type === \"PrivateIdentifier\";\n      }\n    }, {\n      key: \"getPrivateNameSV\",\n      value: function getPrivateNameSV(node) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return _get(_getPrototypeOf(_class.prototype), \"getPrivateNameSV\", this).call(this, node);\n        }\n\n        return node.name;\n      }\n    }, {\n      key: \"parseLiteral\",\n      value: function parseLiteral(value, type) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseLiteral\", this).call(this, value, type);\n\n        node.raw = node.extra.raw;\n        delete node.extra;\n        return node;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpression) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        _get(_getPrototypeOf(_class.prototype), \"parseFunctionBody\", this).call(this, node, allowExpression, isMethod);\n\n        node.expression = node.body.type !== \"BlockStatement\";\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n        var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n        var funcNode = this.startNode();\n        funcNode.kind = node.kind;\n        funcNode = _get(_getPrototypeOf(_class.prototype), \"parseMethod\", this).call(this, funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n        funcNode.type = \"FunctionExpression\";\n        delete funcNode.kind;\n        node.value = funcNode;\n\n        if (type === \"ClassPrivateMethod\") {\n          node.computed = false;\n        }\n\n        type = \"MethodDefinition\";\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty() {\n        var _get4;\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        var propertyNode = (_get4 = _get(_getPrototypeOf(_class.prototype), \"parseClassProperty\", this)).call.apply(_get4, [this].concat(args));\n\n        if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n          propertyNode.type = \"PropertyDefinition\";\n        }\n\n        return propertyNode;\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty() {\n        var _get5;\n\n        for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n          args[_key7] = arguments[_key7];\n        }\n\n        var propertyNode = (_get5 = _get(_getPrototypeOf(_class.prototype), \"parseClassPrivateProperty\", this)).call.apply(_get5, [this].concat(args));\n\n        if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n          propertyNode.type = \"PropertyDefinition\";\n          propertyNode.computed = false;\n        }\n\n        return propertyNode;\n      }\n    }, {\n      key: \"parseObjectMethod\",\n      value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectMethod\", this).call(this, prop, isGenerator, isAsync, isPattern, isAccessor);\n\n        if (node) {\n          node.type = \"Property\";\n          if (node.kind === \"method\") node.kind = \"init\";\n          node.shorthand = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseObjectProperty\",\n      value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseObjectProperty\", this).call(this, prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n        if (node) {\n          node.kind = \"init\";\n          node.type = \"Property\";\n        }\n\n        return node;\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node != null && this.isObjectProperty(node)) {\n          return this.isAssignable(node.value, isBinding);\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"isAssignable\", this).call(this, node, isBinding);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (node != null && this.isObjectProperty(node)) {\n          this.toAssignable(node.value, isLHS);\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"toAssignable\", this).call(this, node, isLHS);\n      }\n    }, {\n      key: \"toAssignableObjectExpressionProp\",\n      value: function toAssignableObjectExpressionProp(prop) {\n        if (prop.kind === \"get\" || prop.kind === \"set\") {\n          this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n        } else if (prop.method) {\n          this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n        } else {\n          var _get6;\n\n          for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n            args[_key8 - 1] = arguments[_key8];\n          }\n\n          (_get6 = _get(_getPrototypeOf(_class.prototype), \"toAssignableObjectExpressionProp\", this)).call.apply(_get6, [this, prop].concat(args));\n        }\n      }\n    }, {\n      key: \"finishCallExpression\",\n      value: function finishCallExpression(node, optional) {\n        _get(_getPrototypeOf(_class.prototype), \"finishCallExpression\", this).call(this, node, optional);\n\n        if (node.callee.type === \"Import\") {\n          node.type = \"ImportExpression\";\n          node.source = node.arguments[0];\n\n          if (this.hasPlugin(\"importAssertions\")) {\n            var _node$arguments$;\n\n            node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n          }\n\n          delete node.arguments;\n          delete node.callee;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"toReferencedArguments\",\n      value: function toReferencedArguments(node) {\n        if (node.type === \"ImportExpression\") {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class.prototype), \"toReferencedArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        _get(_getPrototypeOf(_class.prototype), \"parseExport\", this).call(this, node);\n\n        switch (node.type) {\n          case \"ExportAllDeclaration\":\n            node.exported = null;\n            break;\n\n          case \"ExportNamedDeclaration\":\n            if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n              node.type = \"ExportAllDeclaration\";\n              node.exported = node.specifiers[0].exported;\n              delete node.specifiers;\n            }\n\n            break;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var node = _get(_getPrototypeOf(_class.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n\n        if (state.optionalChainMember) {\n          if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n            node.type = node.type.substring(8);\n          }\n\n          if (state.stop) {\n            var chain = this.startNodeAtNode(node);\n            chain.expression = node;\n            return this.finishNode(chain, \"ChainExpression\");\n          }\n        } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n          node.optional = false;\n        }\n\n        return node;\n      }\n    }, {\n      key: \"hasPropertyAsPrivateName\",\n      value: function hasPropertyAsPrivateName(node) {\n        if (node.type === \"ChainExpression\") {\n          node = node.expression;\n        }\n\n        return _get(_getPrototypeOf(_class.prototype), \"hasPropertyAsPrivateName\", this).call(this, node);\n      }\n    }, {\n      key: \"isOptionalChain\",\n      value: function isOptionalChain(node) {\n        return node.type === \"ChainExpression\";\n      }\n    }, {\n      key: \"isObjectProperty\",\n      value: function isObjectProperty(node) {\n        return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n      }\n    }, {\n      key: \"isObjectMethod\",\n      value: function isObjectMethod(node) {\n        return node.method || node.kind === \"get\" || node.kind === \"set\";\n      }\n    }]);\n\n    return _class;\n  }(superClass);\n};\n\nvar TokContext = function TokContext(token, preserveSpace) {\n  _classCallCheck(this, TokContext);\n\n  this.token = void 0;\n  this.preserveSpace = void 0;\n  this.token = token;\n  this.preserveSpace = !!preserveSpace;\n};\n\nvar types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = function (context) {\n  context.pop();\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = types$1.dollarBraceL.updateContext = function (context) {\n  context.push(types.brace);\n};\n\ntypes$1.backQuote.updateContext = function (context) {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nvar nonASCIIidentifierStartChars = \"\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08C7\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3400-\\u4DBF\\u4E00-\\u9FFC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7BF\\uA7C2-\\uA7CA\\uA7F5-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\";\nvar nonASCIIidentifierChars = \"\\u200C\\u200D\\xB7\\u0300-\\u036F\\u0387\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u0669\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07C0-\\u07C9\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096F\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09E6-\\u09EF\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A66-\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AE6-\\u0AEF\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B66-\\u0B6F\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CE6-\\u0CEF\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D66-\\u0D6F\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0E50-\\u0E59\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1040-\\u1049\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F-\\u109D\\u135D-\\u135F\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u194F\\u19D0-\\u19DA\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AB0-\\u1ABD\\u1ABF\\u1AC0\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BB0-\\u1BB9\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1C40-\\u1C49\\u1C50-\\u1C59\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u203F\\u2040\\u2054\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA620-\\uA629\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F1\\uA8FF-\\uA909\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9D0-\\uA9D9\\uA9E5\\uA9F0-\\uA9F9\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA50-\\uAA59\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF10-\\uFF19\\uFF3F\";\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n\n  for (var i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nvar reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nvar keywords = new Set(reservedWords.keyword);\nvar reservedWordsStrictSet = new Set(reservedWords.strict);\nvar reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nvar reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nvar SCOPE_OTHER = 0,\n    SCOPE_PROGRAM = 1,\n    SCOPE_FUNCTION = 2,\n    SCOPE_ARROW = 4,\n    SCOPE_SIMPLE_CATCH = 8,\n    SCOPE_SUPER = 16,\n    SCOPE_DIRECT_SUPER = 32,\n    SCOPE_CLASS = 64,\n    SCOPE_STATIC_BLOCK = 128,\n    SCOPE_TS_MODULE = 256,\n    SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nvar BIND_KIND_VALUE = 1,\n    BIND_KIND_TYPE = 2,\n    BIND_SCOPE_VAR = 4,\n    BIND_SCOPE_LEXICAL = 8,\n    BIND_SCOPE_FUNCTION = 16,\n    BIND_FLAGS_NONE = 64,\n    BIND_FLAGS_CLASS = 128,\n    BIND_FLAGS_TS_ENUM = 256,\n    BIND_FLAGS_TS_CONST_ENUM = 512,\n    BIND_FLAGS_TS_EXPORT_ONLY = 1024,\n    BIND_FLAGS_FLOW_DECLARE_FN = 2048;\nvar BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n    BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n    BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n    BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n    BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n    BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n    BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n    BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n    BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n    BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n    BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nvar CLASS_ELEMENT_FLAG_STATIC = 4,\n    CLASS_ELEMENT_KIND_GETTER = 2,\n    CLASS_ELEMENT_KIND_SETTER = 1,\n    CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nvar CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n    CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n    CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n    CLASS_ELEMENT_OTHER = 0;\n\nvar Scope = function Scope(flags) {\n  _classCallCheck(this, Scope);\n\n  this.var = new Set();\n  this.lexical = new Set();\n  this.functions = new Set();\n  this.flags = flags;\n};\n\nvar ScopeHandler = /*#__PURE__*/function () {\n  function ScopeHandler(raise, inModule) {\n    _classCallCheck(this, ScopeHandler);\n\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  _createClass(ScopeHandler, [{\n    key: \"inFunction\",\n    get: function get() {\n      return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"allowSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n    }\n  }, {\n    key: \"allowDirectSuper\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n    }\n  }, {\n    key: \"inClass\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n    }\n  }, {\n    key: \"inClassAndNotInNonArrowFunction\",\n    get: function get() {\n      var flags = this.currentThisScopeFlags();\n      return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n    }\n  }, {\n    key: \"inStaticBlock\",\n    get: function get() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & SCOPE_STATIC_BLOCK) {\n          return true;\n        }\n\n        if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n          return false;\n        }\n      }\n    }\n  }, {\n    key: \"inNonArrowFunction\",\n    get: function get() {\n      return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n    }\n  }, {\n    key: \"treatFunctionsAsVar\",\n    get: function get() {\n      return this.treatFunctionsAsVarInScope(this.currentScope());\n    }\n  }, {\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new Scope(flags);\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(flags) {\n      this.scopeStack.push(this.createScope(flags));\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.scopeStack.pop();\n    }\n  }, {\n    key: \"treatFunctionsAsVarInScope\",\n    value: function treatFunctionsAsVarInScope(scope) {\n      return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n        if (bindingType & BIND_SCOPE_FUNCTION) {\n          scope.functions.add(name);\n        } else {\n          scope.lexical.add(name);\n        }\n\n        if (bindingType & BIND_SCOPE_LEXICAL) {\n          this.maybeExportDefined(scope, name);\n        }\n      } else if (bindingType & BIND_SCOPE_VAR) {\n        for (var i = this.scopeStack.length - 1; i >= 0; --i) {\n          scope = this.scopeStack[i];\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          scope.var.add(name);\n          this.maybeExportDefined(scope, name);\n          if (scope.flags & SCOPE_VAR) break;\n        }\n      }\n\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"maybeExportDefined\",\n    value: function maybeExportDefined(scope, name) {\n      if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n        this.undefinedExports.delete(name);\n      }\n    }\n  }, {\n    key: \"checkRedeclarationInScope\",\n    value: function checkRedeclarationInScope(scope, name, bindingType, pos) {\n      if (this.isRedeclaredInScope(scope, name, bindingType)) {\n        this.raise(pos, ErrorMessages.VarRedeclaration, name);\n      }\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n      }\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n      }\n\n      return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var name = id.name;\n      var topLevelScope = this.scopeStack[0];\n\n      if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n        this.undefinedExports.set(name, id.start);\n      }\n    }\n  }, {\n    key: \"currentScope\",\n    value: function currentScope() {\n      return this.scopeStack[this.scopeStack.length - 1];\n    }\n  }, {\n    key: \"currentVarScopeFlags\",\n    value: function currentVarScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & SCOPE_VAR) {\n          return flags;\n        }\n      }\n    }\n  }, {\n    key: \"currentThisScopeFlags\",\n    value: function currentThisScopeFlags() {\n      for (var i = this.scopeStack.length - 1;; i--) {\n        var flags = this.scopeStack[i].flags;\n\n        if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n          return flags;\n        }\n      }\n    }\n  }]);\n\n  return ScopeHandler;\n}();\n\nvar FlowScope = /*#__PURE__*/function (_Scope) {\n  _inherits(FlowScope, _Scope);\n\n  var _super4 = _createSuper(FlowScope);\n\n  function FlowScope() {\n    var _this3;\n\n    _classCallCheck(this, FlowScope);\n\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n\n    _this3 = _super4.call.apply(_super4, [this].concat(args));\n    _this3.declareFunctions = new Set();\n    return _this3;\n  }\n\n  return FlowScope;\n}(Scope);\n\nvar FlowScopeHandler = /*#__PURE__*/function (_ScopeHandler) {\n  _inherits(FlowScopeHandler, _ScopeHandler);\n\n  var _super5 = _createSuper(FlowScopeHandler);\n\n  function FlowScopeHandler() {\n    _classCallCheck(this, FlowScopeHandler);\n\n    return _super5.apply(this, arguments);\n  }\n\n  _createClass(FlowScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new FlowScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n        scope.declareFunctions.add(name);\n        return;\n      }\n\n      _get(_getPrototypeOf(FlowScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (_get(_getPrototypeOf(FlowScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments)) return true;\n\n      if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n        return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n      }\n\n      return false;\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n        _get(_getPrototypeOf(FlowScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n\n  return FlowScopeHandler;\n}(ScopeHandler);\n\nvar State = /*#__PURE__*/function () {\n  function State() {\n    _classCallCheck(this, State);\n\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  _createClass(State, [{\n    key: \"init\",\n    value: function init(options) {\n      this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n      this.curLine = options.startLine;\n      this.startLoc = this.endLoc = this.curPosition();\n    }\n  }, {\n    key: \"curPosition\",\n    value: function curPosition() {\n      return new Position(this.curLine, this.pos - this.lineStart);\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(skipArrays) {\n      var state = new State();\n      var keys = Object.keys(this);\n\n      for (var i = 0, length = keys.length; i < length; i++) {\n        var key = keys[i];\n        var val = this[key];\n\n        if (!skipArrays && Array.isArray(val)) {\n          val = val.slice();\n        }\n\n        state[key] = val;\n      }\n\n      return state;\n    }\n  }]);\n\n  return State;\n}();\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nvar VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nvar forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nvar allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.bin), [50, 51, 52, 53, 54, 55]);\nallowedNumericSeparatorSiblings.dec = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.oct), [56, 57]);\nallowedNumericSeparatorSiblings.hex = [].concat(_toConsumableArray(allowedNumericSeparatorSiblings.dec), [65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102]);\n\nvar Token = function Token(state) {\n  _classCallCheck(this, Token);\n\n  this.type = state.type;\n  this.value = state.value;\n  this.start = state.start;\n  this.end = state.end;\n  this.loc = new SourceLocation(state.startLoc, state.endLoc);\n};\n\nvar Tokenizer = /*#__PURE__*/function (_ParserError) {\n  _inherits(Tokenizer, _ParserError);\n\n  var _super6 = _createSuper(Tokenizer);\n\n  function Tokenizer(options, input) {\n    var _this4;\n\n    _classCallCheck(this, Tokenizer);\n\n    _this4 = _super6.call(this);\n    _this4.isLookahead = void 0;\n    _this4.tokens = [];\n    _this4.state = new State();\n\n    _this4.state.init(options);\n\n    _this4.input = input;\n    _this4.length = input.length;\n    _this4.isLookahead = false;\n    return _this4;\n  }\n\n  _createClass(Tokenizer, [{\n    key: \"pushToken\",\n    value: function pushToken(token) {\n      this.tokens.length = this.state.tokensLength;\n      this.tokens.push(token);\n      ++this.state.tokensLength;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.pushToken(new Token(this.state));\n      }\n\n      this.state.lastTokEnd = this.state.end;\n      this.state.lastTokStart = this.state.start;\n      this.state.lastTokEndLoc = this.state.endLoc;\n      this.state.lastTokStartLoc = this.state.startLoc;\n      this.nextToken();\n    }\n  }, {\n    key: \"eat\",\n    value: function eat(type) {\n      if (this.match(type)) {\n        this.next();\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"match\",\n    value: function match(type) {\n      return this.state.type === type;\n    }\n  }, {\n    key: \"createLookaheadState\",\n    value: function createLookaheadState(state) {\n      return {\n        pos: state.pos,\n        value: null,\n        type: state.type,\n        start: state.start,\n        end: state.end,\n        lastTokEnd: state.end,\n        context: [this.curContext()],\n        inType: state.inType\n      };\n    }\n  }, {\n    key: \"lookahead\",\n    value: function lookahead() {\n      var old = this.state;\n      this.state = this.createLookaheadState(old);\n      this.isLookahead = true;\n      this.nextToken();\n      this.isLookahead = false;\n      var curr = this.state;\n      this.state = old;\n      return curr;\n    }\n  }, {\n    key: \"nextTokenStart\",\n    value: function nextTokenStart() {\n      return this.nextTokenStartSince(this.state.pos);\n    }\n  }, {\n    key: \"nextTokenStartSince\",\n    value: function nextTokenStartSince(pos) {\n      skipWhiteSpace.lastIndex = pos;\n      return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n    }\n  }, {\n    key: \"lookaheadCharCode\",\n    value: function lookaheadCharCode() {\n      return this.input.charCodeAt(this.nextTokenStart());\n    }\n  }, {\n    key: \"codePointAtPos\",\n    value: function codePointAtPos(pos) {\n      var cp = this.input.charCodeAt(pos);\n\n      if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n        var trail = this.input.charCodeAt(pos);\n\n        if ((trail & 0xfc00) === 0xdc00) {\n          cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n        }\n      }\n\n      return cp;\n    }\n  }, {\n    key: \"setStrict\",\n    value: function setStrict(strict) {\n      var _this5 = this;\n\n      this.state.strict = strict;\n\n      if (strict) {\n        this.state.strictErrors.forEach(function (message, pos) {\n          return _this5.raise(pos, message);\n        });\n        this.state.strictErrors.clear();\n      }\n    }\n  }, {\n    key: \"curContext\",\n    value: function curContext() {\n      return this.state.context[this.state.context.length - 1];\n    }\n  }, {\n    key: \"nextToken\",\n    value: function nextToken() {\n      var curContext = this.curContext();\n      if (!curContext.preserveSpace) this.skipSpace();\n      this.state.start = this.state.pos;\n      if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n      if (this.state.pos >= this.length) {\n        this.finishToken(types$1.eof);\n        return;\n      }\n\n      if (curContext === types.template) {\n        this.readTmplToken();\n      } else {\n        this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n      }\n    }\n  }, {\n    key: \"skipBlockComment\",\n    value: function skipBlockComment() {\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var start = this.state.pos;\n      var end = this.input.indexOf(\"*/\", start + 2);\n      if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n      this.state.pos = end + 2;\n      lineBreakG.lastIndex = start + 2;\n\n      while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n        ++this.state.curLine;\n        this.state.lineStart = lineBreakG.lastIndex;\n      }\n\n      if (this.isLookahead) return;\n      var comment = {\n        type: \"CommentBlock\",\n        value: this.input.slice(start + 2, end),\n        start: start,\n        end: end + 2,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipLineComment\",\n    value: function skipLineComment(startSkip) {\n      var start = this.state.pos;\n      var startLoc;\n      if (!this.isLookahead) startLoc = this.state.curPosition();\n      var ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n      if (this.state.pos < this.length) {\n        while (!isNewLine(ch) && ++this.state.pos < this.length) {\n          ch = this.input.charCodeAt(this.state.pos);\n        }\n      }\n\n      if (this.isLookahead) return;\n      var end = this.state.pos;\n      var value = this.input.slice(start + startSkip, end);\n      var comment = {\n        type: \"CommentLine\",\n        value: value,\n        start: start,\n        end: end,\n        loc: new SourceLocation(startLoc, this.state.curPosition())\n      };\n      if (this.options.tokens) this.pushToken(comment);\n      return comment;\n    }\n  }, {\n    key: \"skipSpace\",\n    value: function skipSpace() {\n      var spaceStart = this.state.pos;\n      var comments = [];\n\n      loop: while (this.state.pos < this.length) {\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case 32:\n          case 160:\n          case 9:\n            ++this.state.pos;\n            break;\n\n          case 13:\n            if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n          case 8232:\n          case 8233:\n            ++this.state.pos;\n            ++this.state.curLine;\n            this.state.lineStart = this.state.pos;\n            break;\n\n          case 47:\n            switch (this.input.charCodeAt(this.state.pos + 1)) {\n              case 42:\n                {\n                  var comment = this.skipBlockComment();\n\n                  if (comment !== undefined) {\n                    this.addComment(comment);\n                    if (this.options.attachComment) comments.push(comment);\n                  }\n\n                  break;\n                }\n\n              case 47:\n                {\n                  var _comment = this.skipLineComment(2);\n\n                  if (_comment !== undefined) {\n                    this.addComment(_comment);\n                    if (this.options.attachComment) comments.push(_comment);\n                  }\n\n                  break;\n                }\n\n              default:\n                break loop;\n            }\n\n            break;\n\n          default:\n            if (isWhitespace(ch)) {\n              ++this.state.pos;\n            } else if (ch === 45 && !this.inModule) {\n              var pos = this.state.pos;\n\n              if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n                var _comment2 = this.skipLineComment(3);\n\n                if (_comment2 !== undefined) {\n                  this.addComment(_comment2);\n                  if (this.options.attachComment) comments.push(_comment2);\n                }\n              } else {\n                break loop;\n              }\n            } else if (ch === 60 && !this.inModule) {\n              var _pos = this.state.pos;\n\n              if (this.input.charCodeAt(_pos + 1) === 33 && this.input.charCodeAt(_pos + 2) === 45 && this.input.charCodeAt(_pos + 3) === 45) {\n                var _comment3 = this.skipLineComment(4);\n\n                if (_comment3 !== undefined) {\n                  this.addComment(_comment3);\n                  if (this.options.attachComment) comments.push(_comment3);\n                }\n              } else {\n                break loop;\n              }\n            } else {\n              break loop;\n            }\n\n        }\n      }\n\n      if (comments.length > 0) {\n        var end = this.state.pos;\n        var CommentWhitespace = {\n          start: spaceStart,\n          end: end,\n          comments: comments,\n          leadingNode: null,\n          trailingNode: null,\n          containingNode: null\n        };\n        this.state.commentStack.push(CommentWhitespace);\n      }\n    }\n  }, {\n    key: \"finishToken\",\n    value: function finishToken(type, val) {\n      this.state.end = this.state.pos;\n      var prevType = this.state.type;\n      this.state.type = type;\n      this.state.value = val;\n\n      if (!this.isLookahead) {\n        this.state.endLoc = this.state.curPosition();\n        this.updateContext(prevType);\n      }\n    }\n  }, {\n    key: \"readToken_numberSign\",\n    value: function readToken_numberSign() {\n      if (this.state.pos === 0 && this.readToken_interpreter()) {\n        return;\n      }\n\n      var nextPos = this.state.pos + 1;\n      var next = this.codePointAtPos(nextPos);\n\n      if (next >= 48 && next <= 57) {\n        throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n      }\n\n      if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n        this.expectPlugin(\"recordAndTuple\");\n\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n          throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n        }\n\n        this.state.pos += 2;\n\n        if (next === 123) {\n          this.finishToken(types$1.braceHashL);\n        } else {\n          this.finishToken(types$1.bracketHashL);\n        }\n      } else if (isIdentifierStart(next)) {\n        ++this.state.pos;\n        this.finishToken(types$1.privateName, this.readWord1(next));\n      } else if (next === 92) {\n        ++this.state.pos;\n        this.finishToken(types$1.privateName, this.readWord1());\n      } else {\n        this.finishOp(types$1.hash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_dot\",\n    value: function readToken_dot() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next >= 48 && next <= 57) {\n        this.readNumber(true);\n        return;\n      }\n\n      if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n        this.state.pos += 3;\n        this.finishToken(types$1.ellipsis);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types$1.dot);\n      }\n    }\n  }, {\n    key: \"readToken_slash\",\n    value: function readToken_slash() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types$1.slashAssign, 2);\n      } else {\n        this.finishOp(types$1.slash, 1);\n      }\n    }\n  }, {\n    key: \"readToken_interpreter\",\n    value: function readToken_interpreter() {\n      if (this.state.pos !== 0 || this.length < 2) return false;\n      var ch = this.input.charCodeAt(this.state.pos + 1);\n      if (ch !== 33) return false;\n      var start = this.state.pos;\n      this.state.pos += 1;\n\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n\n      var value = this.input.slice(start + 2, this.state.pos);\n      this.finishToken(types$1.interpreterDirective, value);\n      return true;\n    }\n  }, {\n    key: \"readToken_mult_modulo\",\n    value: function readToken_mult_modulo(code) {\n      var type = code === 42 ? types$1.star : types$1.modulo;\n      var width = 1;\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (code === 42 && next === 42) {\n        width++;\n        next = this.input.charCodeAt(this.state.pos + 2);\n        type = types$1.exponent;\n      }\n\n      if (next === 61 && !this.state.inType) {\n        width++;\n        type = code === 37 ? types$1.moduloAssign : types$1.assign;\n      }\n\n      this.finishOp(type, width);\n    }\n  }, {\n    key: \"readToken_pipe_amp\",\n    value: function readToken_pipe_amp(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n          this.finishOp(types$1.assign, 3);\n        } else {\n          this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n        }\n\n        return;\n      }\n\n      if (code === 124) {\n        if (next === 62) {\n          this.finishOp(types$1.pipeline, 2);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarR);\n          return;\n        }\n\n        if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarR);\n          return;\n        }\n      }\n\n      if (next === 61) {\n        this.finishOp(types$1.assign, 2);\n        return;\n      }\n\n      this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n    }\n  }, {\n    key: \"readToken_caret\",\n    value: function readToken_caret() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types$1.assign, 2);\n      } else {\n        this.finishOp(types$1.bitwiseXOR, 1);\n      }\n    }\n  }, {\n    key: \"readToken_plus_min\",\n    value: function readToken_plus_min(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === code) {\n        this.finishOp(types$1.incDec, 2);\n        return;\n      }\n\n      if (next === 61) {\n        this.finishOp(types$1.assign, 2);\n      } else {\n        this.finishOp(types$1.plusMin, 1);\n      }\n    }\n  }, {\n    key: \"readToken_lt_gt\",\n    value: function readToken_lt_gt(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var size = 1;\n\n      if (next === code) {\n        size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n        if (this.input.charCodeAt(this.state.pos + size) === 61) {\n          this.finishOp(types$1.assign, size + 1);\n          return;\n        }\n\n        this.finishOp(types$1.bitShift, size);\n        return;\n      }\n\n      if (next === 61) {\n        size = 2;\n      }\n\n      this.finishOp(types$1.relational, size);\n    }\n  }, {\n    key: \"readToken_eq_excl\",\n    value: function readToken_eq_excl(code) {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n\n      if (next === 61) {\n        this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n        return;\n      }\n\n      if (code === 61 && next === 62) {\n        this.state.pos += 2;\n        this.finishToken(types$1.arrow);\n        return;\n      }\n\n      this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n    }\n  }, {\n    key: \"readToken_question\",\n    value: function readToken_question() {\n      var next = this.input.charCodeAt(this.state.pos + 1);\n      var next2 = this.input.charCodeAt(this.state.pos + 2);\n\n      if (next === 63) {\n        if (next2 === 61) {\n          this.finishOp(types$1.assign, 3);\n        } else {\n          this.finishOp(types$1.nullishCoalescing, 2);\n        }\n      } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n        this.state.pos += 2;\n        this.finishToken(types$1.questionDot);\n      } else {\n        ++this.state.pos;\n        this.finishToken(types$1.question);\n      }\n    }\n  }, {\n    key: \"getTokenFromCode\",\n    value: function getTokenFromCode(code) {\n      switch (code) {\n        case 46:\n          this.readToken_dot();\n          return;\n\n        case 40:\n          ++this.state.pos;\n          this.finishToken(types$1.parenL);\n          return;\n\n        case 41:\n          ++this.state.pos;\n          this.finishToken(types$1.parenR);\n          return;\n\n        case 59:\n          ++this.state.pos;\n          this.finishToken(types$1.semi);\n          return;\n\n        case 44:\n          ++this.state.pos;\n          this.finishToken(types$1.comma);\n          return;\n\n        case 91:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.state.pos += 2;\n            this.finishToken(types$1.bracketBarL);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.bracketL);\n          }\n\n          return;\n\n        case 93:\n          ++this.state.pos;\n          this.finishToken(types$1.bracketR);\n          return;\n\n        case 123:\n          if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n            if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n              throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n            }\n\n            this.state.pos += 2;\n            this.finishToken(types$1.braceBarL);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.braceL);\n          }\n\n          return;\n\n        case 125:\n          ++this.state.pos;\n          this.finishToken(types$1.braceR);\n          return;\n\n        case 58:\n          if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n            this.finishOp(types$1.doubleColon, 2);\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.colon);\n          }\n\n          return;\n\n        case 63:\n          this.readToken_question();\n          return;\n\n        case 96:\n          ++this.state.pos;\n          this.finishToken(types$1.backQuote);\n          return;\n\n        case 48:\n          {\n            var next = this.input.charCodeAt(this.state.pos + 1);\n\n            if (next === 120 || next === 88) {\n              this.readRadixNumber(16);\n              return;\n            }\n\n            if (next === 111 || next === 79) {\n              this.readRadixNumber(8);\n              return;\n            }\n\n            if (next === 98 || next === 66) {\n              this.readRadixNumber(2);\n              return;\n            }\n          }\n\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          this.readNumber(false);\n          return;\n\n        case 34:\n        case 39:\n          this.readString(code);\n          return;\n\n        case 47:\n          this.readToken_slash();\n          return;\n\n        case 37:\n        case 42:\n          this.readToken_mult_modulo(code);\n          return;\n\n        case 124:\n        case 38:\n          this.readToken_pipe_amp(code);\n          return;\n\n        case 94:\n          this.readToken_caret();\n          return;\n\n        case 43:\n        case 45:\n          this.readToken_plus_min(code);\n          return;\n\n        case 60:\n        case 62:\n          this.readToken_lt_gt(code);\n          return;\n\n        case 61:\n        case 33:\n          this.readToken_eq_excl(code);\n          return;\n\n        case 126:\n          this.finishOp(types$1.tilde, 1);\n          return;\n\n        case 64:\n          ++this.state.pos;\n          this.finishToken(types$1.at);\n          return;\n\n        case 35:\n          this.readToken_numberSign();\n          return;\n\n        case 92:\n          this.readWord();\n          return;\n\n        default:\n          if (isIdentifierStart(code)) {\n            this.readWord(code);\n            return;\n          }\n\n      }\n\n      throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n    }\n  }, {\n    key: \"finishOp\",\n    value: function finishOp(type, size) {\n      var str = this.input.slice(this.state.pos, this.state.pos + size);\n      this.state.pos += size;\n      this.finishToken(type, str);\n    }\n  }, {\n    key: \"readRegexp\",\n    value: function readRegexp() {\n      var start = this.state.start + 1;\n      var escaped, inClass;\n      var pos = this.state.pos;\n\n      for (;; ++pos) {\n        if (pos >= this.length) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        var ch = this.input.charCodeAt(pos);\n\n        if (isNewLine(ch)) {\n          throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n        }\n\n        if (escaped) {\n          escaped = false;\n        } else {\n          if (ch === 91) {\n            inClass = true;\n          } else if (ch === 93 && inClass) {\n            inClass = false;\n          } else if (ch === 47 && !inClass) {\n            break;\n          }\n\n          escaped = ch === 92;\n        }\n      }\n\n      var content = this.input.slice(start, pos);\n      ++pos;\n      var mods = \"\";\n\n      while (pos < this.length) {\n        var cp = this.codePointAtPos(pos);\n        var char = String.fromCharCode(cp);\n\n        if (VALID_REGEX_FLAGS.has(cp)) {\n          if (mods.includes(char)) {\n            this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n          }\n        } else if (isIdentifierChar(cp) || cp === 92) {\n          this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n        } else {\n          break;\n        }\n\n        ++pos;\n        mods += char;\n      }\n\n      this.state.pos = pos;\n      this.finishToken(types$1.regexp, {\n        pattern: content,\n        flags: mods\n      });\n    }\n  }, {\n    key: \"readInt\",\n    value: function readInt(radix, len, forceLen) {\n      var allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var start = this.state.pos;\n      var forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n      var allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n      var invalid = false;\n      var total = 0;\n\n      for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n        var code = this.input.charCodeAt(this.state.pos);\n        var val = void 0;\n\n        if (code === 95) {\n          var prev = this.input.charCodeAt(this.state.pos - 1);\n          var next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n\n        if (code >= 97) {\n          val = code - 97 + 10;\n        } else if (code >= 65) {\n          val = code - 65 + 10;\n        } else if (_isDigit(code)) {\n          val = code - 48;\n        } else {\n          val = Infinity;\n        }\n\n        if (val >= radix) {\n          if (this.options.errorRecovery && val <= 9) {\n            val = 0;\n            this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n          } else if (forceLen) {\n            val = 0;\n            invalid = true;\n          } else {\n            break;\n          }\n        }\n\n        ++this.state.pos;\n        total = total * radix + val;\n      }\n\n      if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n        return null;\n      }\n\n      return total;\n    }\n  }, {\n    key: \"readRadixNumber\",\n    value: function readRadixNumber(radix) {\n      var start = this.state.pos;\n      var isBigInt = false;\n      this.state.pos += 2;\n      var val = this.readInt(radix);\n\n      if (val == null) {\n        this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      } else if (next === 109) {\n        throw this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      if (isBigInt) {\n        var str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n        this.finishToken(types$1.bigint, str);\n        return;\n      }\n\n      this.finishToken(types$1.num, val);\n    }\n  }, {\n    key: \"readNumber\",\n    value: function readNumber(startsWithDot) {\n      var start = this.state.pos;\n      var isFloat = false;\n      var isBigInt = false;\n      var isDecimal = false;\n      var hasExponent = false;\n      var isOctal = false;\n\n      if (!startsWithDot && this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidNumber);\n      }\n\n      var hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n      if (hasLeadingZero) {\n        var integer = this.input.slice(start, this.state.pos);\n        this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n        if (!this.state.strict) {\n          var underscorePos = integer.indexOf(\"_\");\n\n          if (underscorePos > 0) {\n            this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n          }\n        }\n\n        isOctal = hasLeadingZero && !/[89]/.test(integer);\n      }\n\n      var next = this.input.charCodeAt(this.state.pos);\n\n      if (next === 46 && !isOctal) {\n        ++this.state.pos;\n        this.readInt(10);\n        isFloat = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if ((next === 69 || next === 101) && !isOctal) {\n        next = this.input.charCodeAt(++this.state.pos);\n\n        if (next === 43 || next === 45) {\n          ++this.state.pos;\n        }\n\n        if (this.readInt(10) === null) {\n          this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n        }\n\n        isFloat = true;\n        hasExponent = true;\n        next = this.input.charCodeAt(this.state.pos);\n      }\n\n      if (next === 110) {\n        if (isFloat || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n\n      if (next === 109) {\n        this.expectPlugin(\"decimal\", this.state.pos);\n\n        if (hasExponent || hasLeadingZero) {\n          this.raise(start, ErrorMessages.InvalidDecimal);\n        }\n\n        ++this.state.pos;\n        isDecimal = true;\n      }\n\n      if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n        throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n      }\n\n      var str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n      if (isBigInt) {\n        this.finishToken(types$1.bigint, str);\n        return;\n      }\n\n      if (isDecimal) {\n        this.finishToken(types$1.decimal, str);\n        return;\n      }\n\n      var val = isOctal ? parseInt(str, 8) : parseFloat(str);\n      this.finishToken(types$1.num, val);\n    }\n  }, {\n    key: \"readCodePoint\",\n    value: function readCodePoint(throwOnInvalid) {\n      var ch = this.input.charCodeAt(this.state.pos);\n      var code;\n\n      if (ch === 123) {\n        var codePos = ++this.state.pos;\n        code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n        ++this.state.pos;\n\n        if (code !== null && code > 0x10ffff) {\n          if (throwOnInvalid) {\n            this.raise(codePos, ErrorMessages.InvalidCodePoint);\n          } else {\n            return null;\n          }\n        }\n      } else {\n        code = this.readHexChar(4, false, throwOnInvalid);\n      }\n\n      return code;\n    }\n  }, {\n    key: \"readString\",\n    value: function readString(quote) {\n      var out = \"\",\n          chunkStart = ++this.state.pos;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.readEscapedChar(false);\n          chunkStart = this.state.pos;\n        } else if (ch === 8232 || ch === 8233) {\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n        } else {\n          ++this.state.pos;\n        }\n      }\n\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(types$1.string, out);\n    }\n  }, {\n    key: \"readTmplToken\",\n    value: function readTmplToken() {\n      var out = \"\",\n          chunkStart = this.state.pos,\n          containsInvalid = false;\n\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n        }\n\n        var ch = this.input.charCodeAt(this.state.pos);\n\n        if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n          if (this.state.pos === this.state.start && this.match(types$1.template)) {\n            if (ch === 36) {\n              this.state.pos += 2;\n              this.finishToken(types$1.dollarBraceL);\n              return;\n            } else {\n              ++this.state.pos;\n              this.finishToken(types$1.backQuote);\n              return;\n            }\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          this.finishToken(types$1.template, containsInvalid ? null : out);\n          return;\n        }\n\n        if (ch === 92) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          var escaped = this.readEscapedChar(true);\n\n          if (escaped === null) {\n            containsInvalid = true;\n          } else {\n            out += escaped;\n          }\n\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          ++this.state.pos;\n\n          switch (ch) {\n            case 13:\n              if (this.input.charCodeAt(this.state.pos) === 10) {\n                ++this.state.pos;\n              }\n\n            case 10:\n              out += \"\\n\";\n              break;\n\n            default:\n              out += String.fromCharCode(ch);\n              break;\n          }\n\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n    }\n  }, {\n    key: \"recordStrictModeErrors\",\n    value: function recordStrictModeErrors(pos, message) {\n      if (this.state.strict && !this.state.strictErrors.has(pos)) {\n        this.raise(pos, message);\n      } else {\n        this.state.strictErrors.set(pos, message);\n      }\n    }\n  }, {\n    key: \"readEscapedChar\",\n    value: function readEscapedChar(inTemplate) {\n      var throwOnInvalid = !inTemplate;\n      var ch = this.input.charCodeAt(++this.state.pos);\n      ++this.state.pos;\n\n      switch (ch) {\n        case 110:\n          return \"\\n\";\n\n        case 114:\n          return \"\\r\";\n\n        case 120:\n          {\n            var code = this.readHexChar(2, false, throwOnInvalid);\n            return code === null ? null : String.fromCharCode(code);\n          }\n\n        case 117:\n          {\n            var _code = this.readCodePoint(throwOnInvalid);\n\n            return _code === null ? null : String.fromCodePoint(_code);\n          }\n\n        case 116:\n          return \"\\t\";\n\n        case 98:\n          return \"\\b\";\n\n        case 118:\n          return \"\\x0B\";\n\n        case 102:\n          return \"\\f\";\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n          this.state.lineStart = this.state.pos;\n          ++this.state.curLine;\n\n        case 8232:\n        case 8233:\n          return \"\";\n\n        case 56:\n        case 57:\n          if (inTemplate) {\n            return null;\n          } else {\n            this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n          }\n\n        default:\n          if (ch >= 48 && ch <= 55) {\n            var codePos = this.state.pos - 1;\n            var match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n            var octalStr = match[0];\n            var octal = parseInt(octalStr, 8);\n\n            if (octal > 255) {\n              octalStr = octalStr.slice(0, -1);\n              octal = parseInt(octalStr, 8);\n            }\n\n            this.state.pos += octalStr.length - 1;\n            var next = this.input.charCodeAt(this.state.pos);\n\n            if (octalStr !== \"0\" || next === 56 || next === 57) {\n              if (inTemplate) {\n                return null;\n              } else {\n                this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n              }\n            }\n\n            return String.fromCharCode(octal);\n          }\n\n          return String.fromCharCode(ch);\n      }\n    }\n  }, {\n    key: \"readHexChar\",\n    value: function readHexChar(len, forceLen, throwOnInvalid) {\n      var codePos = this.state.pos;\n      var n = this.readInt(16, len, forceLen, false);\n\n      if (n === null) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n        } else {\n          this.state.pos = codePos - 1;\n        }\n      }\n\n      return n;\n    }\n  }, {\n    key: \"readWord1\",\n    value: function readWord1(firstCode) {\n      this.state.containsEsc = false;\n      var word = \"\";\n      var start = this.state.pos;\n      var chunkStart = this.state.pos;\n\n      if (firstCode !== undefined) {\n        this.state.pos += firstCode <= 0xffff ? 1 : 2;\n      }\n\n      while (this.state.pos < this.length) {\n        var ch = this.codePointAtPos(this.state.pos);\n\n        if (isIdentifierChar(ch)) {\n          this.state.pos += ch <= 0xffff ? 1 : 2;\n        } else if (ch === 92) {\n          this.state.containsEsc = true;\n          word += this.input.slice(chunkStart, this.state.pos);\n          var escStart = this.state.pos;\n          var identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n          if (this.input.charCodeAt(++this.state.pos) !== 117) {\n            this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n            chunkStart = this.state.pos - 1;\n            continue;\n          }\n\n          ++this.state.pos;\n          var esc = this.readCodePoint(true);\n\n          if (esc !== null) {\n            if (!identifierCheck(esc)) {\n              this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n            }\n\n            word += String.fromCodePoint(esc);\n          }\n\n          chunkStart = this.state.pos;\n        } else {\n          break;\n        }\n      }\n\n      return word + this.input.slice(chunkStart, this.state.pos);\n    }\n  }, {\n    key: \"readWord\",\n    value: function readWord(firstCode) {\n      var word = this.readWord1(firstCode);\n      var type = keywords$1.get(word) || types$1.name;\n      this.finishToken(type, word);\n    }\n  }, {\n    key: \"checkKeywordEscapes\",\n    value: function checkKeywordEscapes() {\n      var kw = this.state.type.keyword;\n\n      if (kw && this.state.containsEsc) {\n        this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n      }\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(prevType) {\n      var _this$state$type$upda, _this$state$type;\n\n      (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n    }\n  }]);\n\n  return Tokenizer;\n}(ParserError);\n\nvar ClassScope = function ClassScope() {\n  _classCallCheck(this, ClassScope);\n\n  this.privateNames = new Set();\n  this.loneAccessors = new Map();\n  this.undefinedPrivateNames = new Map();\n};\n\nvar ClassScopeHandler = /*#__PURE__*/function () {\n  function ClassScopeHandler(raise) {\n    _classCallCheck(this, ClassScopeHandler);\n\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  _createClass(ClassScopeHandler, [{\n    key: \"current\",\n    value: function current() {\n      return this.stack[this.stack.length - 1];\n    }\n  }, {\n    key: \"enter\",\n    value: function enter() {\n      this.stack.push(new ClassScope());\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      var oldClassScope = this.stack.pop();\n      var current = this.current();\n\n      for (var _i = 0, _Array$from = Array.from(oldClassScope.undefinedPrivateNames); _i < _Array$from.length; _i++) {\n        var _Array$from$_i = _slicedToArray(_Array$from[_i], 2),\n            name = _Array$from$_i[0],\n            pos = _Array$from$_i[1];\n\n        if (current) {\n          if (!current.undefinedPrivateNames.has(name)) {\n            current.undefinedPrivateNames.set(name, pos);\n          }\n        } else {\n          this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n        }\n      }\n    }\n  }, {\n    key: \"declarePrivateName\",\n    value: function declarePrivateName(name, elementType, pos) {\n      var classScope = this.current();\n      var redefined = classScope.privateNames.has(name);\n\n      if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n        var accessor = redefined && classScope.loneAccessors.get(name);\n\n        if (accessor) {\n          var oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n          var newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n          var oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n          var newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n          redefined = oldKind === newKind || oldStatic !== newStatic;\n          if (!redefined) classScope.loneAccessors.delete(name);\n        } else if (!redefined) {\n          classScope.loneAccessors.set(name, elementType);\n        }\n      }\n\n      if (redefined) {\n        this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n      }\n\n      classScope.privateNames.add(name);\n      classScope.undefinedPrivateNames.delete(name);\n    }\n  }, {\n    key: \"usePrivateName\",\n    value: function usePrivateName(name, pos) {\n      var classScope;\n\n      var _iterator = _createForOfIteratorHelper(this.stack),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          classScope = _step.value;\n          if (classScope.privateNames.has(name)) return;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (classScope) {\n        classScope.undefinedPrivateNames.set(name, pos);\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }]);\n\n  return ClassScopeHandler;\n}();\n\nvar kExpression = 0,\n    kMaybeArrowParameterDeclaration = 1,\n    kMaybeAsyncArrowParameterDeclaration = 2,\n    kParameterDeclaration = 3;\n\nvar ExpressionScope = /*#__PURE__*/function () {\n  function ExpressionScope() {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n\n    _classCallCheck(this, ExpressionScope);\n\n    this.type = void 0;\n    this.type = type;\n  }\n\n  _createClass(ExpressionScope, [{\n    key: \"canBeArrowParameterDeclaration\",\n    value: function canBeArrowParameterDeclaration() {\n      return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n    }\n  }, {\n    key: \"isCertainlyParameterDeclaration\",\n    value: function isCertainlyParameterDeclaration() {\n      return this.type === kParameterDeclaration;\n    }\n  }]);\n\n  return ExpressionScope;\n}();\n\nvar ArrowHeadParsingScope = /*#__PURE__*/function (_ExpressionScope) {\n  _inherits(ArrowHeadParsingScope, _ExpressionScope);\n\n  var _super7 = _createSuper(ArrowHeadParsingScope);\n\n  function ArrowHeadParsingScope(type) {\n    var _this6;\n\n    _classCallCheck(this, ArrowHeadParsingScope);\n\n    _this6 = _super7.call(this, type);\n    _this6.errors = new Map();\n    return _this6;\n  }\n\n  _createClass(ArrowHeadParsingScope, [{\n    key: \"recordDeclarationError\",\n    value: function recordDeclarationError(pos, template) {\n      this.errors.set(pos, template);\n    }\n  }, {\n    key: \"clearDeclarationError\",\n    value: function clearDeclarationError(pos) {\n      this.errors.delete(pos);\n    }\n  }, {\n    key: \"iterateErrors\",\n    value: function iterateErrors(iterator) {\n      this.errors.forEach(iterator);\n    }\n  }]);\n\n  return ArrowHeadParsingScope;\n}(ExpressionScope);\n\nvar ExpressionScopeHandler = /*#__PURE__*/function () {\n  function ExpressionScopeHandler(raise) {\n    _classCallCheck(this, ExpressionScopeHandler);\n\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  _createClass(ExpressionScopeHandler, [{\n    key: \"enter\",\n    value: function enter(scope) {\n      this.stack.push(scope);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stack.pop();\n    }\n  }, {\n    key: \"recordParameterInitializerError\",\n    value: function recordParameterInitializerError(pos, template) {\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (!scope.isCertainlyParameterDeclaration()) {\n        if (scope.canBeArrowParameterDeclaration()) {\n          scope.recordDeclarationError(pos, template);\n        } else {\n          return;\n        }\n\n        scope = stack[--i];\n      }\n\n      this.raise(pos, template);\n    }\n  }, {\n    key: \"recordParenthesizedIdentifierError\",\n    value: function recordParenthesizedIdentifierError(pos, template) {\n      var stack = this.stack;\n      var scope = stack[stack.length - 1];\n\n      if (scope.isCertainlyParameterDeclaration()) {\n        this.raise(pos, template);\n      } else if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n    }\n  }, {\n    key: \"recordAsyncArrowParametersError\",\n    value: function recordAsyncArrowParametersError(pos, template) {\n      var stack = this.stack;\n      var i = stack.length - 1;\n      var scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n          scope.recordDeclarationError(pos, template);\n        }\n\n        scope = stack[--i];\n      }\n    }\n  }, {\n    key: \"validateAsPattern\",\n    value: function validateAsPattern() {\n      var _this7 = this;\n\n      var stack = this.stack;\n      var currentScope = stack[stack.length - 1];\n      if (!currentScope.canBeArrowParameterDeclaration()) return;\n      currentScope.iterateErrors(function (template, pos) {\n        _this7.raise(pos, template);\n\n        var i = stack.length - 2;\n        var scope = stack[i];\n\n        while (scope.canBeArrowParameterDeclaration()) {\n          scope.clearDeclarationError(pos);\n          scope = stack[--i];\n        }\n      });\n    }\n  }]);\n\n  return ExpressionScopeHandler;\n}();\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nvar PARAM = 0,\n    PARAM_YIELD = 1,\n    PARAM_AWAIT = 2,\n    PARAM_RETURN = 4,\n    PARAM_IN = 8;\n\nvar ProductionParameterHandler = /*#__PURE__*/function () {\n  function ProductionParameterHandler() {\n    _classCallCheck(this, ProductionParameterHandler);\n\n    this.stacks = [];\n  }\n\n  _createClass(ProductionParameterHandler, [{\n    key: \"enter\",\n    value: function enter(flags) {\n      this.stacks.push(flags);\n    }\n  }, {\n    key: \"exit\",\n    value: function exit() {\n      this.stacks.pop();\n    }\n  }, {\n    key: \"currentFlags\",\n    value: function currentFlags() {\n      return this.stacks[this.stacks.length - 1];\n    }\n  }, {\n    key: \"hasAwait\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_AWAIT) > 0;\n    }\n  }, {\n    key: \"hasYield\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_YIELD) > 0;\n    }\n  }, {\n    key: \"hasReturn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_RETURN) > 0;\n    }\n  }, {\n    key: \"hasIn\",\n    get: function get() {\n      return (this.currentFlags() & PARAM_IN) > 0;\n    }\n  }]);\n\n  return ProductionParameterHandler;\n}();\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nvar UtilParser = /*#__PURE__*/function (_Tokenizer) {\n  _inherits(UtilParser, _Tokenizer);\n\n  var _super8 = _createSuper(UtilParser);\n\n  function UtilParser() {\n    _classCallCheck(this, UtilParser);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(UtilParser, [{\n    key: \"addExtra\",\n    value: function addExtra(node, key, val) {\n      if (!node) return;\n      var extra = node.extra = node.extra || {};\n      extra[key] = val;\n    }\n  }, {\n    key: \"isRelational\",\n    value: function isRelational(op) {\n      return this.match(types$1.relational) && this.state.value === op;\n    }\n  }, {\n    key: \"expectRelational\",\n    value: function expectRelational(op) {\n      if (this.isRelational(op)) {\n        this.next();\n      } else {\n        this.unexpected(null, types$1.relational);\n      }\n    }\n  }, {\n    key: \"isContextual\",\n    value: function isContextual(name) {\n      return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n    }\n  }, {\n    key: \"isUnparsedContextual\",\n    value: function isUnparsedContextual(nameStart, name) {\n      var nameEnd = nameStart + name.length;\n\n      if (this.input.slice(nameStart, nameEnd) === name) {\n        var nextCh = this.input.charCodeAt(nameEnd);\n        return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isLookaheadContextual\",\n    value: function isLookaheadContextual(name) {\n      var next = this.nextTokenStart();\n      return this.isUnparsedContextual(next, name);\n    }\n  }, {\n    key: \"eatContextual\",\n    value: function eatContextual(name) {\n      return this.isContextual(name) && this.eat(types$1.name);\n    }\n  }, {\n    key: \"expectContextual\",\n    value: function expectContextual(name, template) {\n      if (!this.eatContextual(name)) this.unexpected(null, template);\n    }\n  }, {\n    key: \"canInsertSemicolon\",\n    value: function canInsertSemicolon() {\n      return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n    }\n  }, {\n    key: \"hasPrecedingLineBreak\",\n    value: function hasPrecedingLineBreak() {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n  }, {\n    key: \"hasFollowingLineBreak\",\n    value: function hasFollowingLineBreak() {\n      skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n      return skipWhiteSpaceToLineBreak.test(this.input);\n    }\n  }, {\n    key: \"isLineTerminator\",\n    value: function isLineTerminator() {\n      return this.eat(types$1.semi) || this.canInsertSemicolon();\n    }\n  }, {\n    key: \"semicolon\",\n    value: function semicolon() {\n      var allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n      this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(type, pos) {\n      this.eat(type) || this.unexpected(pos, type);\n    }\n  }, {\n    key: \"assertNoSpace\",\n    value: function assertNoSpace() {\n      var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n      if (this.state.start > this.state.lastTokEnd) {\n        this.raise(this.state.lastTokEnd, {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedSpace\",\n          template: message\n        });\n      }\n    }\n  }, {\n    key: \"unexpected\",\n    value: function unexpected(pos) {\n      var messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: \"Unexpected token\"\n      };\n\n      if (messageOrType instanceof TokenType) {\n        messageOrType = {\n          code: ErrorCodes.SyntaxError,\n          reasonCode: \"UnexpectedToken\",\n          template: \"Unexpected token, expected \\\"\".concat(messageOrType.label, \"\\\"\")\n        };\n      }\n\n      throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    }\n  }, {\n    key: \"expectPlugin\",\n    value: function expectPlugin(name, pos) {\n      if (!this.hasPlugin(name)) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: [name]\n        }, \"This experimental syntax requires enabling the parser plugin: '\".concat(name, \"'\"));\n      }\n\n      return true;\n    }\n  }, {\n    key: \"expectOnePlugin\",\n    value: function expectOnePlugin(names, pos) {\n      var _this8 = this;\n\n      if (!names.some(function (n) {\n        return _this8.hasPlugin(n);\n      })) {\n        throw this.raiseWithData(pos != null ? pos : this.state.start, {\n          missingPlugin: names\n        }, \"This experimental syntax requires enabling one of the following parser plugin(s): '\".concat(names.join(\", \"), \"'\"));\n      }\n    }\n  }, {\n    key: \"tryParse\",\n    value: function tryParse(fn) {\n      var oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n      var abortSignal = {\n        node: null\n      };\n\n      try {\n        var node = fn(function () {\n          var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          abortSignal.node = node;\n          throw abortSignal;\n        });\n\n        if (this.state.errors.length > oldState.errors.length) {\n          var failState = this.state;\n          this.state = oldState;\n          this.state.tokensLength = failState.tokensLength;\n          return {\n            node: node,\n            error: failState.errors[oldState.errors.length],\n            thrown: false,\n            aborted: false,\n            failState: failState\n          };\n        }\n\n        return {\n          node: node,\n          error: null,\n          thrown: false,\n          aborted: false,\n          failState: null\n        };\n      } catch (error) {\n        var _failState = this.state;\n        this.state = oldState;\n\n        if (error instanceof SyntaxError) {\n          return {\n            node: null,\n            error: error,\n            thrown: true,\n            aborted: false,\n            failState: _failState\n          };\n        }\n\n        if (error === abortSignal) {\n          return {\n            node: abortSignal.node,\n            error: null,\n            thrown: false,\n            aborted: true,\n            failState: _failState\n          };\n        }\n\n        throw error;\n      }\n    }\n  }, {\n    key: \"checkExpressionErrors\",\n    value: function checkExpressionErrors(refExpressionErrors, andThrow) {\n      if (!refExpressionErrors) return false;\n      var shorthandAssign = refExpressionErrors.shorthandAssign,\n          doubleProto = refExpressionErrors.doubleProto,\n          optionalParameters = refExpressionErrors.optionalParameters;\n\n      if (!andThrow) {\n        return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n      }\n\n      if (shorthandAssign >= 0) {\n        this.unexpected(shorthandAssign);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }, {\n    key: \"isLiteralPropertyName\",\n    value: function isLiteralPropertyName() {\n      return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n    }\n  }, {\n    key: \"isPrivateName\",\n    value: function isPrivateName(node) {\n      return node.type === \"PrivateName\";\n    }\n  }, {\n    key: \"getPrivateNameSV\",\n    value: function getPrivateNameSV(node) {\n      return node.id.name;\n    }\n  }, {\n    key: \"hasPropertyAsPrivateName\",\n    value: function hasPropertyAsPrivateName(node) {\n      return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n    }\n  }, {\n    key: \"isOptionalChain\",\n    value: function isOptionalChain(node) {\n      return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n    }\n  }, {\n    key: \"isObjectProperty\",\n    value: function isObjectProperty(node) {\n      return node.type === \"ObjectProperty\";\n    }\n  }, {\n    key: \"isObjectMethod\",\n    value: function isObjectMethod(node) {\n      return node.type === \"ObjectMethod\";\n    }\n  }, {\n    key: \"initializeScopes\",\n    value: function initializeScopes() {\n      var _this9 = this;\n\n      var inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      var oldExportedIdentifiers = this.exportedIdentifiers;\n      this.exportedIdentifiers = new Set();\n      var oldInModule = this.inModule;\n      this.inModule = inModule;\n      var oldScope = this.scope;\n      var ScopeHandler = this.getScopeHandler();\n      this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n      var oldProdParam = this.prodParam;\n      this.prodParam = new ProductionParameterHandler();\n      var oldClassScope = this.classScope;\n      this.classScope = new ClassScopeHandler(this.raise.bind(this));\n      var oldExpressionScope = this.expressionScope;\n      this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n      return function () {\n        _this9.state.labels = oldLabels;\n        _this9.exportedIdentifiers = oldExportedIdentifiers;\n        _this9.inModule = oldInModule;\n        _this9.scope = oldScope;\n        _this9.prodParam = oldProdParam;\n        _this9.classScope = oldClassScope;\n        _this9.expressionScope = oldExpressionScope;\n      };\n    }\n  }, {\n    key: \"enterInitialScopes\",\n    value: function enterInitialScopes() {\n      var paramFlags = PARAM;\n\n      if (this.inModule) {\n        paramFlags |= PARAM_AWAIT;\n      }\n\n      this.scope.enter(SCOPE_PROGRAM);\n      this.prodParam.enter(paramFlags);\n    }\n  }]);\n\n  return UtilParser;\n}(Tokenizer);\n\nvar ExpressionErrors = function ExpressionErrors() {\n  _classCallCheck(this, ExpressionErrors);\n\n  this.shorthandAssign = -1;\n  this.doubleProto = -1;\n  this.optionalParameters = -1;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  this.loc = new SourceLocation(loc);\n  if (parser != null && parser.options.ranges) this.range = [pos, 0];\n  if (parser != null && parser.filename) this.loc.filename = parser.filename;\n};\n\nvar NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    var newNode = new Node();\n    var keys = Object.keys(this);\n\n    for (var i = 0, length = keys.length; i < length; i++) {\n      var key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  var type = node.type,\n      start = node.start,\n      end = node.end,\n      loc = node.loc,\n      range = node.range,\n      extra = node.extra,\n      name = node.name;\n  var cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  var type = node.type,\n      start = node.start,\n      end = node.end,\n      loc = node.loc,\n      range = node.range,\n      extra = node.extra;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  var cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\n\nvar NodeUtils = /*#__PURE__*/function (_UtilParser) {\n  _inherits(NodeUtils, _UtilParser);\n\n  var _super9 = _createSuper(NodeUtils);\n\n  function NodeUtils() {\n    _classCallCheck(this, NodeUtils);\n\n    return _super9.apply(this, arguments);\n  }\n\n  _createClass(NodeUtils, [{\n    key: \"startNode\",\n    value: function startNode() {\n      return new Node(this, this.state.start, this.state.startLoc);\n    }\n  }, {\n    key: \"startNodeAt\",\n    value: function startNodeAt(pos, loc) {\n      return new Node(this, pos, loc);\n    }\n  }, {\n    key: \"startNodeAtNode\",\n    value: function startNodeAtNode(type) {\n      return this.startNodeAt(type.start, type.loc.start);\n    }\n  }, {\n    key: \"finishNode\",\n    value: function finishNode(node, type) {\n      return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n    }\n  }, {\n    key: \"finishNodeAt\",\n    value: function finishNodeAt(node, type, pos, loc) {\n      node.type = type;\n      node.end = pos;\n      node.loc.end = loc;\n      if (this.options.ranges) node.range[1] = pos;\n      if (this.options.attachComment) this.processComment(node);\n      return node;\n    }\n  }, {\n    key: \"resetStartLocation\",\n    value: function resetStartLocation(node, start, startLoc) {\n      node.start = start;\n      node.loc.start = startLoc;\n      if (this.options.ranges) node.range[0] = start;\n    }\n  }, {\n    key: \"resetEndLocation\",\n    value: function resetEndLocation(node) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n      var endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n      node.end = end;\n      node.loc.end = endLoc;\n      if (this.options.ranges) node.range[1] = end;\n    }\n  }, {\n    key: \"resetStartLocationFromNode\",\n    value: function resetStartLocationFromNode(node, locationNode) {\n      this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n    }\n  }]);\n\n  return NodeUtils;\n}(UtilParser);\n\nvar reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nvar FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nvar exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  var list1 = [];\n  var list2 = [];\n\n  for (var i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nvar FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = function flow(superClass) {\n  return /*#__PURE__*/function (_superClass2) {\n    _inherits(_class2, _superClass2);\n\n    var _super10 = _createSuper(_class2);\n\n    function _class2() {\n      var _this10;\n\n      _classCallCheck(this, _class2);\n\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n\n      _this10 = _super10.call.apply(_super10, [this].concat(args));\n      _this10.flowPragma = undefined;\n      return _this10;\n    }\n\n    _createClass(_class2, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return FlowScopeHandler;\n      }\n    }, {\n      key: \"shouldParseTypes\",\n      value: function shouldParseTypes() {\n        return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n      }\n    }, {\n      key: \"shouldParseEnums\",\n      value: function shouldParseEnums() {\n        return !!this.getPluginOption(\"flow\", \"enums\");\n      }\n    }, {\n      key: \"finishToken\",\n      value: function finishToken(type, val) {\n        if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n          if (this.flowPragma === undefined) {\n            this.flowPragma = null;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"finishToken\", this).call(this, type, val);\n      }\n    }, {\n      key: \"addComment\",\n      value: function addComment(comment) {\n        if (this.flowPragma === undefined) {\n          var matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n          if (!matches) ;else if (matches[1] === \"flow\") {\n            this.flowPragma = \"flow\";\n          } else if (matches[1] === \"noflow\") {\n            this.flowPragma = \"noflow\";\n          } else {\n            throw new Error(\"Unexpected flow pragma\");\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"addComment\", this).call(this, comment);\n      }\n    }, {\n      key: \"flowParseTypeInitialiser\",\n      value: function flowParseTypeInitialiser(tok) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(tok || types$1.colon);\n        var type = this.flowParseType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParsePredicate\",\n      value: function flowParsePredicate() {\n        var node = this.startNode();\n        var moduloPos = this.state.start;\n        this.next();\n        this.expectContextual(\"checks\");\n\n        if (this.state.lastTokStart > moduloPos + 1) {\n          this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n        }\n\n        if (this.eat(types$1.parenL)) {\n          node.value = this.parseExpression();\n          this.expect(types$1.parenR);\n          return this.finishNode(node, \"DeclaredPredicate\");\n        } else {\n          return this.finishNode(node, \"InferredPredicate\");\n        }\n      }\n    }, {\n      key: \"flowParseTypeAndPredicateInitialiser\",\n      value: function flowParseTypeAndPredicateInitialiser() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        this.expect(types$1.colon);\n        var type = null;\n        var predicate = null;\n\n        if (this.match(types$1.modulo)) {\n          this.state.inType = oldInType;\n          predicate = this.flowParsePredicate();\n        } else {\n          type = this.flowParseType();\n          this.state.inType = oldInType;\n\n          if (this.match(types$1.modulo)) {\n            predicate = this.flowParsePredicate();\n          }\n        }\n\n        return [type, predicate];\n      }\n    }, {\n      key: \"flowParseDeclareClass\",\n      value: function flowParseDeclareClass(node) {\n        this.next();\n        this.flowParseInterfaceish(node, true);\n        return this.finishNode(node, \"DeclareClass\");\n      }\n    }, {\n      key: \"flowParseDeclareFunction\",\n      value: function flowParseDeclareFunction(node) {\n        this.next();\n        var id = node.id = this.parseIdentifier();\n        var typeNode = this.startNode();\n        var typeContainer = this.startNode();\n\n        if (this.isRelational(\"<\")) {\n          typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          typeNode.typeParameters = null;\n        }\n\n        this.expect(types$1.parenL);\n        var tmp = this.flowParseFunctionTypeParams();\n        typeNode.params = tmp.params;\n        typeNode.rest = tmp.rest;\n        typeNode.this = tmp._this;\n        this.expect(types$1.parenR);\n\n        var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n\n        typeNode.returnType = _this$flowParseTypeAn2[0];\n        node.predicate = _this$flowParseTypeAn2[1];\n        typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n        id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n        this.resetEndLocation(id);\n        this.semicolon();\n        this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n        return this.finishNode(node, \"DeclareFunction\");\n      }\n    }, {\n      key: \"flowParseDeclare\",\n      value: function flowParseDeclare(node, insideModule) {\n        if (this.match(types$1._class)) {\n          return this.flowParseDeclareClass(node);\n        } else if (this.match(types$1._function)) {\n          return this.flowParseDeclareFunction(node);\n        } else if (this.match(types$1._var)) {\n          return this.flowParseDeclareVariable(node);\n        } else if (this.eatContextual(\"module\")) {\n          if (this.match(types$1.dot)) {\n            return this.flowParseDeclareModuleExports(node);\n          } else {\n            if (insideModule) {\n              this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n            }\n\n            return this.flowParseDeclareModule(node);\n          }\n        } else if (this.isContextual(\"type\")) {\n          return this.flowParseDeclareTypeAlias(node);\n        } else if (this.isContextual(\"opaque\")) {\n          return this.flowParseDeclareOpaqueType(node);\n        } else if (this.isContextual(\"interface\")) {\n          return this.flowParseDeclareInterface(node);\n        } else if (this.match(types$1._export)) {\n          return this.flowParseDeclareExportDeclaration(node, insideModule);\n        } else {\n          throw this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseDeclareVariable\",\n      value: function flowParseDeclareVariable(node) {\n        this.next();\n        node.id = this.flowParseTypeAnnotatableIdentifier(true);\n        this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n        this.semicolon();\n        return this.finishNode(node, \"DeclareVariable\");\n      }\n    }, {\n      key: \"flowParseDeclareModule\",\n      value: function flowParseDeclareModule(node) {\n        var _this11 = this;\n\n        this.scope.enter(SCOPE_OTHER);\n\n        if (this.match(types$1.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          node.id = this.parseIdentifier();\n        }\n\n        var bodyNode = node.body = this.startNode();\n        var body = bodyNode.body = [];\n        this.expect(types$1.braceL);\n\n        while (!this.match(types$1.braceR)) {\n          var _bodyNode = this.startNode();\n\n          if (this.match(types$1._import)) {\n            this.next();\n\n            if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n              this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n            }\n\n            this.parseImport(_bodyNode);\n          } else {\n            this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n            _bodyNode = this.flowParseDeclare(_bodyNode, true);\n          }\n\n          body.push(_bodyNode);\n        }\n\n        this.scope.exit();\n        this.expect(types$1.braceR);\n        this.finishNode(bodyNode, \"BlockStatement\");\n        var kind = null;\n        var hasModuleExport = false;\n        body.forEach(function (bodyElement) {\n          if (isEsModuleType(bodyElement)) {\n            if (kind === \"CommonJS\") {\n              _this11.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"ES\";\n          } else if (bodyElement.type === \"DeclareModuleExports\") {\n            if (hasModuleExport) {\n              _this11.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n            }\n\n            if (kind === \"ES\") {\n              _this11.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n            }\n\n            kind = \"CommonJS\";\n            hasModuleExport = true;\n          }\n        });\n        node.kind = kind || \"CommonJS\";\n        return this.finishNode(node, \"DeclareModule\");\n      }\n    }, {\n      key: \"flowParseDeclareExportDeclaration\",\n      value: function flowParseDeclareExportDeclaration(node, insideModule) {\n        this.expect(types$1._export);\n\n        if (this.eat(types$1._default)) {\n          if (this.match(types$1._function) || this.match(types$1._class)) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n          } else {\n            node.declaration = this.flowParseType();\n            this.semicolon();\n          }\n\n          node.default = true;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else {\n          if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n            var label = this.state.value;\n            var suggestion = exportSuggestions[label];\n            throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n          }\n\n          if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n            node.declaration = this.flowParseDeclare(this.startNode());\n            node.default = false;\n            return this.finishNode(node, \"DeclareExportDeclaration\");\n          } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n            node = this.parseExport(node);\n\n            if (node.type === \"ExportNamedDeclaration\") {\n              node.type = \"ExportDeclaration\";\n              node.default = false;\n              delete node.exportKind;\n            }\n\n            node.type = \"Declare\" + node.type;\n            return node;\n          }\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParseDeclareModuleExports\",\n      value: function flowParseDeclareModuleExports(node) {\n        this.next();\n        this.expectContextual(\"exports\");\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n        this.semicolon();\n        return this.finishNode(node, \"DeclareModuleExports\");\n      }\n    }, {\n      key: \"flowParseDeclareTypeAlias\",\n      value: function flowParseDeclareTypeAlias(node) {\n        this.next();\n        this.flowParseTypeAlias(node);\n        node.type = \"DeclareTypeAlias\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareOpaqueType\",\n      value: function flowParseDeclareOpaqueType(node) {\n        this.next();\n        this.flowParseOpaqueType(node, true);\n        node.type = \"DeclareOpaqueType\";\n        return node;\n      }\n    }, {\n      key: \"flowParseDeclareInterface\",\n      value: function flowParseDeclareInterface(node) {\n        this.next();\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"DeclareInterface\");\n      }\n    }, {\n      key: \"flowParseInterfaceish\",\n      value: function flowParseInterfaceish(node) {\n        var isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n        this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.extends = [];\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eat(types$1._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (!isClass && this.eat(types$1.comma));\n        }\n\n        if (this.isContextual(\"mixins\")) {\n          this.next();\n\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types$1.comma));\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types$1.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: isClass,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: isClass,\n          allowInexact: false\n        });\n      }\n    }, {\n      key: \"flowParseInterfaceExtends\",\n      value: function flowParseInterfaceExtends() {\n        var node = this.startNode();\n        node.id = this.flowParseQualifiedTypeIdentifier();\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        return this.finishNode(node, \"InterfaceExtends\");\n      }\n    }, {\n      key: \"flowParseInterface\",\n      value: function flowParseInterface(node) {\n        this.flowParseInterfaceish(node);\n        return this.finishNode(node, \"InterfaceDeclaration\");\n      }\n    }, {\n      key: \"checkNotUnderscore\",\n      value: function checkNotUnderscore(word) {\n        if (word === \"_\") {\n          this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n        }\n      }\n    }, {\n      key: \"checkReservedType\",\n      value: function checkReservedType(word, startLoc, declaration) {\n        if (!reservedTypes.has(word)) return;\n        this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n      }\n    }, {\n      key: \"flowParseRestrictedIdentifier\",\n      value: function flowParseRestrictedIdentifier(liberal, declaration) {\n        this.checkReservedType(this.state.value, this.state.start, declaration);\n        return this.parseIdentifier(liberal);\n      }\n    }, {\n      key: \"flowParseTypeAlias\",\n      value: function flowParseTypeAlias(node) {\n        node.id = this.flowParseRestrictedIdentifier(false, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.right = this.flowParseTypeInitialiser(types$1.eq);\n        this.semicolon();\n        return this.finishNode(node, \"TypeAlias\");\n      }\n    }, {\n      key: \"flowParseOpaqueType\",\n      value: function flowParseOpaqueType(node, declare) {\n        this.expectContextual(\"type\");\n        node.id = this.flowParseRestrictedIdentifier(true, true);\n        this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        } else {\n          node.typeParameters = null;\n        }\n\n        node.supertype = null;\n\n        if (this.match(types$1.colon)) {\n          node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n        }\n\n        node.impltype = null;\n\n        if (!declare) {\n          node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n        }\n\n        this.semicolon();\n        return this.finishNode(node, \"OpaqueType\");\n      }\n    }, {\n      key: \"flowParseTypeParameter\",\n      value: function flowParseTypeParameter() {\n        var requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        var nodeStart = this.state.start;\n        var node = this.startNode();\n        var variance = this.flowParseVariance();\n        var ident = this.flowParseTypeAnnotatableIdentifier();\n        node.name = ident.name;\n        node.variance = variance;\n        node.bound = ident.typeAnnotation;\n\n        if (this.match(types$1.eq)) {\n          this.eat(types$1.eq);\n          node.default = this.flowParseType();\n        } else {\n          if (requireDefault) {\n            this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n          }\n        }\n\n        return this.finishNode(node, \"TypeParameter\");\n      }\n    }, {\n      key: \"flowParseTypeParameterDeclaration\",\n      value: function flowParseTypeParameterDeclaration() {\n        var oldInType = this.state.inType;\n        var node = this.startNode();\n        node.params = [];\n        this.state.inType = true;\n\n        if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        var defaultRequired = false;\n\n        do {\n          var typeParameter = this.flowParseTypeParameter(defaultRequired);\n          node.params.push(typeParameter);\n\n          if (typeParameter.default) {\n            defaultRequired = true;\n          }\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types$1.comma);\n          }\n        } while (!this.isRelational(\">\"));\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterDeclaration\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiation\",\n      value: function flowParseTypeParameterInstantiation() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = false;\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseType());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseTypeParameterInstantiationCallOrNew\",\n      value: function flowParseTypeParameterInstantiationCallOrNew() {\n        var node = this.startNode();\n        var oldInType = this.state.inType;\n        node.params = [];\n        this.state.inType = true;\n        this.expectRelational(\"<\");\n\n        while (!this.isRelational(\">\")) {\n          node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n          if (!this.isRelational(\">\")) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        this.expectRelational(\">\");\n        this.state.inType = oldInType;\n        return this.finishNode(node, \"TypeParameterInstantiation\");\n      }\n    }, {\n      key: \"flowParseInterfaceType\",\n      value: function flowParseInterfaceType() {\n        var node = this.startNode();\n        this.expectContextual(\"interface\");\n        node.extends = [];\n\n        if (this.eat(types$1._extends)) {\n          do {\n            node.extends.push(this.flowParseInterfaceExtends());\n          } while (this.eat(types$1.comma));\n        }\n\n        node.body = this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: false,\n          allowProto: false,\n          allowInexact: false\n        });\n        return this.finishNode(node, \"InterfaceTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectPropertyKey\",\n      value: function flowParseObjectPropertyKey() {\n        return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n      }\n    }, {\n      key: \"flowParseObjectTypeIndexer\",\n      value: function flowParseObjectTypeIndexer(node, isStatic, variance) {\n        node.static = isStatic;\n\n        if (this.lookahead().type === types$1.colon) {\n          node.id = this.flowParseObjectPropertyKey();\n          node.key = this.flowParseTypeInitialiser();\n        } else {\n          node.id = null;\n          node.key = this.flowParseType();\n        }\n\n        this.expect(types$1.bracketR);\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n        return this.finishNode(node, \"ObjectTypeIndexer\");\n      }\n    }, {\n      key: \"flowParseObjectTypeInternalSlot\",\n      value: function flowParseObjectTypeInternalSlot(node, isStatic) {\n        node.static = isStatic;\n        node.id = this.flowParseObjectPropertyKey();\n        this.expect(types$1.bracketR);\n        this.expect(types$1.bracketR);\n\n        if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n          node.method = true;\n          node.optional = false;\n          node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n        } else {\n          node.method = false;\n\n          if (this.eat(types$1.question)) {\n            node.optional = true;\n          }\n\n          node.value = this.flowParseTypeInitialiser();\n        }\n\n        return this.finishNode(node, \"ObjectTypeInternalSlot\");\n      }\n    }, {\n      key: \"flowParseObjectTypeMethodish\",\n      value: function flowParseObjectTypeMethodish(node) {\n        node.params = [];\n        node.rest = null;\n        node.typeParameters = null;\n        node.this = null;\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        this.expect(types$1.parenL);\n\n        if (this.match(types$1._this)) {\n          node.this = this.flowParseFunctionTypeParam(true);\n          node.this.name = null;\n\n          if (!this.match(types$1.parenR)) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          node.params.push(this.flowParseFunctionTypeParam(false));\n\n          if (!this.match(types$1.parenR)) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        if (this.eat(types$1.ellipsis)) {\n          node.rest = this.flowParseFunctionTypeParam(false);\n        }\n\n        this.expect(types$1.parenR);\n        node.returnType = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseObjectTypeCallProperty\",\n      value: function flowParseObjectTypeCallProperty(node, isStatic) {\n        var valueNode = this.startNode();\n        node.static = isStatic;\n        node.value = this.flowParseObjectTypeMethodish(valueNode);\n        return this.finishNode(node, \"ObjectTypeCallProperty\");\n      }\n    }, {\n      key: \"flowParseObjectType\",\n      value: function flowParseObjectType(_ref4) {\n        var allowStatic = _ref4.allowStatic,\n            allowExact = _ref4.allowExact,\n            allowSpread = _ref4.allowSpread,\n            allowProto = _ref4.allowProto,\n            allowInexact = _ref4.allowInexact;\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var nodeStart = this.startNode();\n        nodeStart.callProperties = [];\n        nodeStart.properties = [];\n        nodeStart.indexers = [];\n        nodeStart.internalSlots = [];\n        var endDelim;\n        var exact;\n        var inexact = false;\n\n        if (allowExact && this.match(types$1.braceBarL)) {\n          this.expect(types$1.braceBarL);\n          endDelim = types$1.braceBarR;\n          exact = true;\n        } else {\n          this.expect(types$1.braceL);\n          endDelim = types$1.braceR;\n          exact = false;\n        }\n\n        nodeStart.exact = exact;\n\n        while (!this.match(endDelim)) {\n          var isStatic = false;\n          var protoStart = null;\n          var inexactStart = null;\n          var node = this.startNode();\n\n          if (allowProto && this.isContextual(\"proto\")) {\n            var lookahead = this.lookahead();\n\n            if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n              this.next();\n              protoStart = this.state.start;\n              allowStatic = false;\n            }\n          }\n\n          if (allowStatic && this.isContextual(\"static\")) {\n            var _lookahead = this.lookahead();\n\n            if (_lookahead.type !== types$1.colon && _lookahead.type !== types$1.question) {\n              this.next();\n              isStatic = true;\n            }\n          }\n\n          var variance = this.flowParseVariance();\n\n          if (this.eat(types$1.bracketL)) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (this.eat(types$1.bracketL)) {\n              if (variance) {\n                this.unexpected(variance.start);\n              }\n\n              nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n            } else {\n              nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n            }\n          } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n          } else {\n            var kind = \"init\";\n\n            if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n              var _lookahead2 = this.lookahead();\n\n              if (_lookahead2.type === types$1.name || _lookahead2.type === types$1.string || _lookahead2.type === types$1.num) {\n                kind = this.state.value;\n                this.next();\n              }\n            }\n\n            var propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n            if (propOrInexact === null) {\n              inexact = true;\n              inexactStart = this.state.lastTokStart;\n            } else {\n              nodeStart.properties.push(propOrInexact);\n            }\n          }\n\n          this.flowObjectTypeSemicolon();\n\n          if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n            this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n          }\n        }\n\n        this.expect(endDelim);\n\n        if (allowSpread) {\n          nodeStart.inexact = inexact;\n        }\n\n        var out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n        this.state.inType = oldInType;\n        return out;\n      }\n    }, {\n      key: \"flowParseObjectTypeProperty\",\n      value: function flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n        if (this.eat(types$1.ellipsis)) {\n          var isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n          if (isInexactToken) {\n            if (!allowSpread) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n            } else if (!allowInexact) {\n              this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n            }\n\n            if (variance) {\n              this.raise(variance.start, FlowErrors.InexactVariance);\n            }\n\n            return null;\n          }\n\n          if (!allowSpread) {\n            this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n          }\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n\n          if (variance) {\n            this.raise(variance.start, FlowErrors.SpreadVariance);\n          }\n\n          node.argument = this.flowParseType();\n          return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n        } else {\n          node.key = this.flowParseObjectPropertyKey();\n          node.static = isStatic;\n          node.proto = protoStart != null;\n          node.kind = kind;\n          var optional = false;\n\n          if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n            node.method = true;\n\n            if (protoStart != null) {\n              this.unexpected(protoStart);\n            }\n\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n\n            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n            if (kind === \"get\" || kind === \"set\") {\n              this.flowCheckGetterSetterParams(node);\n            }\n\n            if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n              this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n            }\n          } else {\n            if (kind !== \"init\") this.unexpected();\n            node.method = false;\n\n            if (this.eat(types$1.question)) {\n              optional = true;\n            }\n\n            node.value = this.flowParseTypeInitialiser();\n            node.variance = variance;\n          }\n\n          node.optional = optional;\n          return this.finishNode(node, \"ObjectTypeProperty\");\n        }\n      }\n    }, {\n      key: \"flowCheckGetterSetterParams\",\n      value: function flowCheckGetterSetterParams(property) {\n        var paramCount = property.kind === \"get\" ? 0 : 1;\n        var start = property.start;\n        var length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n        if (property.value.this) {\n          this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n        }\n\n        if (length !== paramCount) {\n          if (property.kind === \"get\") {\n            this.raise(start, ErrorMessages.BadGetterArity);\n          } else {\n            this.raise(start, ErrorMessages.BadSetterArity);\n          }\n        }\n\n        if (property.kind === \"set\" && property.value.rest) {\n          this.raise(start, ErrorMessages.BadSetterRestParameter);\n        }\n      }\n    }, {\n      key: \"flowObjectTypeSemicolon\",\n      value: function flowObjectTypeSemicolon() {\n        if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n          this.unexpected();\n        }\n      }\n    }, {\n      key: \"flowParseQualifiedTypeIdentifier\",\n      value: function flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n        startPos = startPos || this.state.start;\n        startLoc = startLoc || this.state.startLoc;\n        var node = id || this.flowParseRestrictedIdentifier(true);\n\n        while (this.eat(types$1.dot)) {\n          var node2 = this.startNodeAt(startPos, startLoc);\n          node2.qualification = node;\n          node2.id = this.flowParseRestrictedIdentifier(true);\n          node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"flowParseGenericType\",\n      value: function flowParseGenericType(startPos, startLoc, id) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.typeParameters = null;\n        node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        return this.finishNode(node, \"GenericTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeofType\",\n      value: function flowParseTypeofType() {\n        var node = this.startNode();\n        this.expect(types$1._typeof);\n        node.argument = this.flowParsePrimaryType();\n        return this.finishNode(node, \"TypeofTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTupleType\",\n      value: function flowParseTupleType() {\n        var node = this.startNode();\n        node.types = [];\n        this.expect(types$1.bracketL);\n\n        while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n          node.types.push(this.flowParseType());\n          if (this.match(types$1.bracketR)) break;\n          this.expect(types$1.comma);\n        }\n\n        this.expect(types$1.bracketR);\n        return this.finishNode(node, \"TupleTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParam\",\n      value: function flowParseFunctionTypeParam(first) {\n        var name = null;\n        var optional = false;\n        var typeAnnotation = null;\n        var node = this.startNode();\n        var lh = this.lookahead();\n        var isThis = this.state.type === types$1._this;\n\n        if (lh.type === types$1.colon || lh.type === types$1.question) {\n          if (isThis && !first) {\n            this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n          }\n\n          name = this.parseIdentifier(isThis);\n\n          if (this.eat(types$1.question)) {\n            optional = true;\n\n            if (isThis) {\n              this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n            }\n          }\n\n          typeAnnotation = this.flowParseTypeInitialiser();\n        } else {\n          typeAnnotation = this.flowParseType();\n        }\n\n        node.name = name;\n        node.optional = optional;\n        node.typeAnnotation = typeAnnotation;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"reinterpretTypeAsFunctionTypeParam\",\n      value: function reinterpretTypeAsFunctionTypeParam(type) {\n        var node = this.startNodeAt(type.start, type.loc.start);\n        node.name = null;\n        node.optional = false;\n        node.typeAnnotation = type;\n        return this.finishNode(node, \"FunctionTypeParam\");\n      }\n    }, {\n      key: \"flowParseFunctionTypeParams\",\n      value: function flowParseFunctionTypeParams() {\n        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        var rest = null;\n        var _this = null;\n\n        if (this.match(types$1._this)) {\n          _this = this.flowParseFunctionTypeParam(true);\n          _this.name = null;\n\n          if (!this.match(types$1.parenR)) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          params.push(this.flowParseFunctionTypeParam(false));\n\n          if (!this.match(types$1.parenR)) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        if (this.eat(types$1.ellipsis)) {\n          rest = this.flowParseFunctionTypeParam(false);\n        }\n\n        return {\n          params: params,\n          rest: rest,\n          _this: _this\n        };\n      }\n    }, {\n      key: \"flowIdentToTypeAnnotation\",\n      value: function flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n        switch (id.name) {\n          case \"any\":\n            return this.finishNode(node, \"AnyTypeAnnotation\");\n\n          case \"bool\":\n          case \"boolean\":\n            return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n          case \"mixed\":\n            return this.finishNode(node, \"MixedTypeAnnotation\");\n\n          case \"empty\":\n            return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n          case \"number\":\n            return this.finishNode(node, \"NumberTypeAnnotation\");\n\n          case \"string\":\n            return this.finishNode(node, \"StringTypeAnnotation\");\n\n          case \"symbol\":\n            return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n          default:\n            this.checkNotUnderscore(id.name);\n            return this.flowParseGenericType(startPos, startLoc, id);\n        }\n      }\n    }, {\n      key: \"flowParsePrimaryType\",\n      value: function flowParsePrimaryType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.startNode();\n        var tmp;\n        var type;\n        var isGroupedType = false;\n        var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n        switch (this.state.type) {\n          case types$1.name:\n            if (this.isContextual(\"interface\")) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n          case types$1.braceL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: false,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: true\n            });\n\n          case types$1.braceBarL:\n            return this.flowParseObjectType({\n              allowStatic: false,\n              allowExact: true,\n              allowSpread: true,\n              allowProto: false,\n              allowInexact: false\n            });\n\n          case types$1.bracketL:\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseTupleType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n            return type;\n\n          case types$1.relational:\n            if (this.state.value === \"<\") {\n              node.typeParameters = this.flowParseTypeParameterDeclaration();\n              this.expect(types$1.parenL);\n              tmp = this.flowParseFunctionTypeParams();\n              node.params = tmp.params;\n              node.rest = tmp.rest;\n              node.this = tmp._this;\n              this.expect(types$1.parenR);\n              this.expect(types$1.arrow);\n              node.returnType = this.flowParseType();\n              return this.finishNode(node, \"FunctionTypeAnnotation\");\n            }\n\n            break;\n\n          case types$1.parenL:\n            this.next();\n\n            if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n              if (this.match(types$1.name) || this.match(types$1._this)) {\n                var token = this.lookahead().type;\n                isGroupedType = token !== types$1.question && token !== types$1.colon;\n              } else {\n                isGroupedType = true;\n              }\n            }\n\n            if (isGroupedType) {\n              this.state.noAnonFunctionType = false;\n              type = this.flowParseType();\n              this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n              if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n                this.expect(types$1.parenR);\n                return type;\n              } else {\n                this.eat(types$1.comma);\n              }\n            }\n\n            if (type) {\n              tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n            } else {\n              tmp = this.flowParseFunctionTypeParams();\n            }\n\n            node.params = tmp.params;\n            node.rest = tmp.rest;\n            node.this = tmp._this;\n            this.expect(types$1.parenR);\n            this.expect(types$1.arrow);\n            node.returnType = this.flowParseType();\n            node.typeParameters = null;\n            return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n          case types$1.string:\n            return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n          case types$1._true:\n          case types$1._false:\n            node.value = this.match(types$1._true);\n            this.next();\n            return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n          case types$1.plusMin:\n            if (this.state.value === \"-\") {\n              this.next();\n\n              if (this.match(types$1.num)) {\n                return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n              }\n\n              if (this.match(types$1.bigint)) {\n                return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n              }\n\n              throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n            }\n\n            throw this.unexpected();\n\n          case types$1.num:\n            return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n          case types$1.bigint:\n            return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n          case types$1._void:\n            this.next();\n            return this.finishNode(node, \"VoidTypeAnnotation\");\n\n          case types$1._null:\n            this.next();\n            return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n          case types$1._this:\n            this.next();\n            return this.finishNode(node, \"ThisTypeAnnotation\");\n\n          case types$1.star:\n            this.next();\n            return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n          default:\n            if (this.state.type.keyword === \"typeof\") {\n              return this.flowParseTypeofType();\n            } else if (this.state.type.keyword) {\n              var label = this.state.type.label;\n              this.next();\n              return _get(_getPrototypeOf(_class2.prototype), \"createIdentifier\", this).call(this, node, label);\n            }\n\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"flowParsePostfixType\",\n      value: function flowParsePostfixType() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var type = this.flowParsePrimaryType();\n        var seenOptionalIndexedAccess = false;\n\n        while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n          var node = this.startNodeAt(startPos, startLoc);\n          var optional = this.eat(types$1.questionDot);\n          seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n          this.expect(types$1.bracketL);\n\n          if (!optional && this.match(types$1.bracketR)) {\n            node.elementType = type;\n            this.next();\n            type = this.finishNode(node, \"ArrayTypeAnnotation\");\n          } else {\n            node.objectType = type;\n            node.indexType = this.flowParseType();\n            this.expect(types$1.bracketR);\n\n            if (seenOptionalIndexedAccess) {\n              node.optional = optional;\n              type = this.finishNode(node, \"OptionalIndexedAccessType\");\n            } else {\n              type = this.finishNode(node, \"IndexedAccessType\");\n            }\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"flowParsePrefixType\",\n      value: function flowParsePrefixType() {\n        var node = this.startNode();\n\n        if (this.eat(types$1.question)) {\n          node.typeAnnotation = this.flowParsePrefixType();\n          return this.finishNode(node, \"NullableTypeAnnotation\");\n        } else {\n          return this.flowParsePostfixType();\n        }\n      }\n    }, {\n      key: \"flowParseAnonFunctionWithoutParens\",\n      value: function flowParseAnonFunctionWithoutParens() {\n        var param = this.flowParsePrefixType();\n\n        if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n          var node = this.startNodeAt(param.start, param.loc.start);\n          node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n          node.rest = null;\n          node.this = null;\n          node.returnType = this.flowParseType();\n          node.typeParameters = null;\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        return param;\n      }\n    }, {\n      key: \"flowParseIntersectionType\",\n      value: function flowParseIntersectionType() {\n        var node = this.startNode();\n        this.eat(types$1.bitwiseAND);\n        var type = this.flowParseAnonFunctionWithoutParens();\n        node.types = [type];\n\n        while (this.eat(types$1.bitwiseAND)) {\n          node.types.push(this.flowParseAnonFunctionWithoutParens());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseUnionType\",\n      value: function flowParseUnionType() {\n        var node = this.startNode();\n        this.eat(types$1.bitwiseOR);\n        var type = this.flowParseIntersectionType();\n        node.types = [type];\n\n        while (this.eat(types$1.bitwiseOR)) {\n          node.types.push(this.flowParseIntersectionType());\n        }\n\n        return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseType\",\n      value: function flowParseType() {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n        var type = this.flowParseUnionType();\n        this.state.inType = oldInType;\n        return type;\n      }\n    }, {\n      key: \"flowParseTypeOrImplicitInstantiation\",\n      value: function flowParseTypeOrImplicitInstantiation() {\n        if (this.state.type === types$1.name && this.state.value === \"_\") {\n          var startPos = this.state.start;\n          var startLoc = this.state.startLoc;\n          var node = this.parseIdentifier();\n          return this.flowParseGenericType(startPos, startLoc, node);\n        } else {\n          return this.flowParseType();\n        }\n      }\n    }, {\n      key: \"flowParseTypeAnnotation\",\n      value: function flowParseTypeAnnotation() {\n        var node = this.startNode();\n        node.typeAnnotation = this.flowParseTypeInitialiser();\n        return this.finishNode(node, \"TypeAnnotation\");\n      }\n    }, {\n      key: \"flowParseTypeAnnotatableIdentifier\",\n      value: function flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n        var ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n        if (this.match(types$1.colon)) {\n          ident.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(ident);\n        }\n\n        return ident;\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"flowParseVariance\",\n      value: function flowParseVariance() {\n        var variance = null;\n\n        if (this.match(types$1.plusMin)) {\n          variance = this.startNode();\n\n          if (this.state.value === \"+\") {\n            variance.kind = \"plus\";\n          } else {\n            variance.kind = \"minus\";\n          }\n\n          this.next();\n          this.finishNode(variance, \"Variance\");\n        }\n\n        return variance;\n      }\n    }, {\n      key: \"parseFunctionBody\",\n      value: function parseFunctionBody(node, allowExpressionBody) {\n        var _this12 = this;\n\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (allowExpressionBody) {\n          return this.forwardNoArrowParamsConversionAt(node, function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", _this12).call(_this12, node, true, isMethod);\n          });\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBody\", this).call(this, node, false, isMethod);\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types$1.colon)) {\n          var typeNode = this.startNode();\n\n          var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n          var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n\n          typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n          node.predicate = _this$flowParseTypeAn4[1];\n          node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"parseStatement\",\n      value: function parseStatement(context, topLevel) {\n        if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n          var lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n            var node = this.startNode();\n            this.next();\n            return this.flowParseInterface(node);\n          }\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var _node = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_node);\n        }\n\n        var stmt = _get(_getPrototypeOf(_class2.prototype), \"parseStatement\", this).call(this, context, topLevel);\n\n        if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n          this.flowPragma = null;\n        }\n\n        return stmt;\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type === \"Identifier\") {\n          if (expr.name === \"declare\") {\n            if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n              return this.flowParseDeclare(node);\n            }\n          } else if (this.match(types$1.name)) {\n            if (expr.name === \"interface\") {\n              return this.flowParseInterface(node);\n            } else if (expr.name === \"type\") {\n              return this.flowParseTypeAlias(node);\n            } else if (expr.name === \"opaque\") {\n              return this.flowParseOpaqueType(node, false);\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || _get(_getPrototypeOf(_class2.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n          return false;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          var node = this.startNode();\n          this.next();\n          return this.flowParseEnumDeclaration(node);\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n        var _this13 = this;\n\n        if (!this.match(types$1.question)) return expr;\n\n        if (this.state.maybeInArrowParameters) {\n          var nextCh = this.lookaheadCharCode();\n\n          if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n            this.setOptionalParametersError(refExpressionErrors);\n            return expr;\n          }\n        }\n\n        this.expect(types$1.question);\n        var state = this.state.clone();\n        var originalNoArrowAt = this.state.noArrowAt;\n        var node = this.startNodeAt(startPos, startLoc);\n\n        var _this$tryParseConditi = this.tryParseConditionalConsequent(),\n            consequent = _this$tryParseConditi.consequent,\n            failed = _this$tryParseConditi.failed;\n\n        var _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n            _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n            valid = _this$getArrowLikeExp2[0],\n            invalid = _this$getArrowLikeExp2[1];\n\n        if (failed || invalid.length > 0) {\n          var noArrowAt = _toConsumableArray(originalNoArrowAt);\n\n          if (invalid.length > 0) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt;\n\n            for (var i = 0; i < invalid.length; i++) {\n              noArrowAt.push(invalid[i].start);\n            }\n\n            var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi2.consequent;\n            failed = _this$tryParseConditi2.failed;\n\n            var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n            var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n\n            valid = _this$getArrowLikeExp4[0];\n            invalid = _this$getArrowLikeExp4[1];\n          }\n\n          if (failed && valid.length > 1) {\n            this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n          }\n\n          if (failed && valid.length === 1) {\n            this.state = state;\n            this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n            var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n            consequent = _this$tryParseConditi3.consequent;\n            failed = _this$tryParseConditi3.failed;\n          }\n        }\n\n        this.getArrowLikeExpressions(consequent, true);\n        this.state.noArrowAt = originalNoArrowAt;\n        this.expect(types$1.colon);\n        node.test = expr;\n        node.consequent = consequent;\n        node.alternate = this.forwardNoArrowParamsConversionAt(node, function () {\n          return _this13.parseMaybeAssign(undefined, undefined);\n        });\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n    }, {\n      key: \"tryParseConditionalConsequent\",\n      value: function tryParseConditionalConsequent() {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        var consequent = this.parseMaybeAssignAllowIn();\n        var failed = !this.match(types$1.colon);\n        this.state.noArrowParamsConversionAt.pop();\n        return {\n          consequent: consequent,\n          failed: failed\n        };\n      }\n    }, {\n      key: \"getArrowLikeExpressions\",\n      value: function getArrowLikeExpressions(node, disallowInvalid) {\n        var _this14 = this;\n\n        var stack = [node];\n        var arrows = [];\n\n        while (stack.length !== 0) {\n          var _node2 = stack.pop();\n\n          if (_node2.type === \"ArrowFunctionExpression\") {\n            if (_node2.typeParameters || !_node2.returnType) {\n              this.finishArrowValidation(_node2);\n            } else {\n              arrows.push(_node2);\n            }\n\n            stack.push(_node2.body);\n          } else if (_node2.type === \"ConditionalExpression\") {\n            stack.push(_node2.consequent);\n            stack.push(_node2.alternate);\n          }\n        }\n\n        if (disallowInvalid) {\n          arrows.forEach(function (node) {\n            return _this14.finishArrowValidation(node);\n          });\n          return [arrows, []];\n        }\n\n        return partition(arrows, function (node) {\n          return node.params.every(function (param) {\n            return _this14.isAssignable(param, true);\n          });\n        });\n      }\n    }, {\n      key: \"finishArrowValidation\",\n      value: function finishArrowValidation(node) {\n        var _node$extra;\n\n        this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n        this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n\n        _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).call(this, node, false, true);\n\n        this.scope.exit();\n      }\n    }, {\n      key: \"forwardNoArrowParamsConversionAt\",\n      value: function forwardNoArrowParamsConversionAt(node, parse) {\n        var result;\n\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          this.state.noArrowParamsConversionAt.push(this.state.start);\n          result = parse();\n          this.state.noArrowParamsConversionAt.pop();\n        } else {\n          result = parse();\n        }\n\n        return result;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_class2.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types$1.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types$1.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"assertModuleNodeAllowed\",\n      value: function assertModuleNodeAllowed(node) {\n        if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"assertModuleNodeAllowed\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var decl = _get(_getPrototypeOf(_class2.prototype), \"parseExport\", this).call(this, node);\n\n        if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n          decl.exportKind = decl.exportKind || \"value\";\n        }\n\n        return decl;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        if (this.isContextual(\"type\")) {\n          node.exportKind = \"type\";\n          var declarationNode = this.startNode();\n          this.next();\n\n          if (this.match(types$1.braceL)) {\n            node.specifiers = this.parseExportSpecifiers();\n            this.parseExportFrom(node);\n            return null;\n          } else {\n            return this.flowParseTypeAlias(declarationNode);\n          }\n        } else if (this.isContextual(\"opaque\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode = this.startNode();\n\n          this.next();\n          return this.flowParseOpaqueType(_declarationNode, false);\n        } else if (this.isContextual(\"interface\")) {\n          node.exportKind = \"type\";\n\n          var _declarationNode2 = this.startNode();\n\n          this.next();\n          return this.flowParseInterface(_declarationNode2);\n        } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n          node.exportKind = \"value\";\n\n          var _declarationNode3 = this.startNode();\n\n          this.next();\n          return this.flowParseEnumDeclaration(_declarationNode3);\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"eatExportStar\",\n      value: function eatExportStar(node) {\n        if (_get(_getPrototypeOf(_class2.prototype), \"eatExportStar\", this).apply(this, arguments)) return true;\n\n        if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n          node.exportKind = \"type\";\n          this.next();\n          this.next();\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeParseExportNamespaceSpecifier\",\n      value: function maybeParseExportNamespaceSpecifier(node) {\n        var pos = this.state.start;\n\n        var hasNamespace = _get(_getPrototypeOf(_class2.prototype), \"maybeParseExportNamespaceSpecifier\", this).call(this, node);\n\n        if (hasNamespace && node.exportKind === \"type\") {\n          this.unexpected(pos);\n        }\n\n        return hasNamespace;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var pos = this.state.start;\n\n        if (this.isContextual(\"declare\")) {\n          if (this.parseClassMemberFromModifier(classBody, member)) {\n            return;\n          }\n\n          member.declare = true;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassMember\", this).call(this, classBody, member, state);\n\n        if (member.declare) {\n          if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n            this.raise(pos, FlowErrors.DeclareClassElement);\n          } else if (member.value) {\n            this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n          }\n        }\n      }\n    }, {\n      key: \"isIterator\",\n      value: function isIterator(word) {\n        return word === \"iterator\" || word === \"asyncIterator\";\n      }\n    }, {\n      key: \"readIterator\",\n      value: function readIterator() {\n        var word = _get(_getPrototypeOf(_class2.prototype), \"readWord1\", this).call(this);\n\n        var fullWord = \"@@\" + word;\n\n        if (!this.isIterator(word) || !this.state.inType) {\n          this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n        }\n\n        this.finishToken(types$1.name, fullWord);\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 123 && next === 124) {\n          return this.finishOp(types$1.braceBarL, 2);\n        } else if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types$1.relational, 1);\n        } else if (this.state.inType && code === 63) {\n          if (next === 46) {\n            return this.finishOp(types$1.questionDot, 2);\n          }\n\n          return this.finishOp(types$1.question, 1);\n        } else if (isIteratorStart(code, next)) {\n          this.state.pos += 2;\n          return this.readIterator();\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        if (node.type === \"TypeCastExpression\") {\n          return this.isAssignable(node.expression, isBinding);\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        if (node.type === \"TypeCastExpression\") {\n          return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isLHS);\n        } else {\n          return _get(_getPrototypeOf(_class2.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList, trailingCommaPos, isLHS) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n\n          if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n            exprList[i] = this.typeCastToParameter(expr);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"toAssignableList\", this).call(this, exprList, trailingCommaPos, isLHS);\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isParenthesizedExpr) {\n        for (var i = 0; i < exprList.length; i++) {\n          var _expr$extra;\n\n          var expr = exprList[i];\n\n          if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n            this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n          }\n        }\n\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n        var node = _get(_getPrototypeOf(_class2.prototype), \"parseArrayLike\", this).call(this, close, canBePattern, isTuple, refExpressionErrors);\n\n        if (canBePattern && !this.state.maybeInArrowParameters) {\n          this.toReferencedList(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"TypeCastExpression\") {\n          var _get7;\n\n          for (var _len11 = arguments.length, args = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n            args[_key11 - 1] = arguments[_key11];\n          }\n\n          return (_get7 = _get(_getPrototypeOf(_class2.prototype), \"checkLVal\", this)).call.apply(_get7, [this, expr].concat(args));\n        }\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        if (this.match(types$1.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (this.match(types$1.colon)) {\n          node.typeAnnotation = this.flowParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_class2.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types$1.colon) || _get(_getPrototypeOf(_class2.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"isNonstaticConstructor\",\n      value: function isNonstaticConstructor(method) {\n        return !this.match(types$1.colon) && _get(_getPrototypeOf(_class2.prototype), \"isNonstaticConstructor\", this).call(this, method);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n        if (method.params && isConstructor) {\n          var params = method.params;\n\n          if (params.length > 0 && this.isThisParam(params[0])) {\n            this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n          }\n        } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n          var _params2 = method.value.params;\n\n          if (_params2.length > 0 && this.isThisParam(_params2[0])) {\n            this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n          }\n        }\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        if (method.variance) {\n          this.unexpected(method.variance.start);\n        }\n\n        delete method.variance;\n\n        if (this.isRelational(\"<\")) {\n          method.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n        }\n\n        if (this.isContextual(\"implements\")) {\n          this.next();\n          var implemented = node.implements = [];\n\n          do {\n            var _node3 = this.startNode();\n\n            _node3.id = this.flowParseRestrictedIdentifier(true);\n\n            if (this.isRelational(\"<\")) {\n              _node3.typeParameters = this.flowParseTypeParameterInstantiation();\n            } else {\n              _node3.typeParameters = null;\n            }\n\n            implemented.push(this.finishNode(_node3, \"ClassImplements\"));\n          } while (this.eat(types$1.comma));\n        }\n      }\n    }, {\n      key: \"checkGetterSetterParams\",\n      value: function checkGetterSetterParams(method) {\n        _get(_getPrototypeOf(_class2.prototype), \"checkGetterSetterParams\", this).call(this, method);\n\n        var params = this.getObjectOrClassMethodParams(method);\n\n        if (params.length > 0) {\n          var param = params[0];\n\n          if (this.isThisParam(param) && method.kind === \"get\") {\n            this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n          } else if (this.isThisParam(param)) {\n            this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n          }\n        }\n      }\n    }, {\n      key: \"parsePropertyName\",\n      value: function parsePropertyName(node, isPrivateNameAllowed) {\n        var variance = this.flowParseVariance();\n\n        var key = _get(_getPrototypeOf(_class2.prototype), \"parsePropertyName\", this).call(this, node, isPrivateNameAllowed);\n\n        node.variance = variance;\n        return key;\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n        if (prop.variance) {\n          this.unexpected(prop.variance.start);\n        }\n\n        delete prop.variance;\n        var typeParameters;\n\n        if (this.isRelational(\"<\") && !isAccessor) {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n          if (!this.match(types$1.parenL)) this.unexpected();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseObjPropValue\", this).call(this, prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n        if (typeParameters) {\n          (prop.value || prop).typeParameters = typeParameters;\n        }\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types$1.question)) {\n          if (param.type !== \"Identifier\") {\n            this.raise(param.start, FlowErrors.OptionalBindingPattern);\n          }\n\n          if (this.isThisParam(param)) {\n            this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n\n          param.optional = true;\n        }\n\n        if (this.match(types$1.colon)) {\n          param.typeAnnotation = this.flowParseTypeAnnotation();\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n        }\n\n        if (this.match(types$1.eq) && this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamNoDefault);\n        }\n\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault(startPos, startLoc, left) {\n        var node = _get(_getPrototypeOf(_class2.prototype), \"parseMaybeDefault\", this).call(this, startPos, startLoc, left);\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"shouldParseDefaultImport\",\n      value: function shouldParseDefaultImport(node) {\n        if (!hasTypeImportKind(node)) {\n          return _get(_getPrototypeOf(_class2.prototype), \"shouldParseDefaultImport\", this).call(this, node);\n        }\n\n        return isMaybeDefaultImport(this.state);\n      }\n    }, {\n      key: \"parseImportSpecifierLocal\",\n      value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n        specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n        this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n        node.specifiers.push(this.finishNode(specifier, type));\n      }\n    }, {\n      key: \"maybeParseDefaultImportSpecifier\",\n      value: function maybeParseDefaultImportSpecifier(node) {\n        node.importKind = \"value\";\n        var kind = null;\n\n        if (this.match(types$1._typeof)) {\n          kind = \"typeof\";\n        } else if (this.isContextual(\"type\")) {\n          kind = \"type\";\n        }\n\n        if (kind) {\n          var lh = this.lookahead();\n\n          if (kind === \"type\" && lh.type === types$1.star) {\n            this.unexpected(lh.start);\n          }\n\n          if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n            this.next();\n            node.importKind = kind;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"maybeParseDefaultImportSpecifier\", this).call(this, node);\n      }\n    }, {\n      key: \"parseImportSpecifier\",\n      value: function parseImportSpecifier(node) {\n        var specifier = this.startNode();\n        var firstIdentIsString = this.match(types$1.string);\n        var firstIdent = this.parseModuleExportName();\n        var specifierTypeKind = null;\n\n        if (firstIdent.type === \"Identifier\") {\n          if (firstIdent.name === \"type\") {\n            specifierTypeKind = \"type\";\n          } else if (firstIdent.name === \"typeof\") {\n            specifierTypeKind = \"typeof\";\n          }\n        }\n\n        var isBinding = false;\n\n        if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n          var as_ident = this.parseIdentifier(true);\n\n          if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n            specifier.imported = as_ident;\n            specifier.importKind = specifierTypeKind;\n            specifier.local = cloneIdentifier(as_ident);\n          } else {\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n            specifier.local = this.parseIdentifier();\n          }\n        } else {\n          if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n            specifier.imported = this.parseIdentifier(true);\n            specifier.importKind = specifierTypeKind;\n          } else {\n            if (firstIdentIsString) {\n              throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n            }\n\n            specifier.imported = firstIdent;\n            specifier.importKind = null;\n          }\n\n          if (this.eatContextual(\"as\")) {\n            specifier.local = this.parseIdentifier();\n          } else {\n            isBinding = true;\n            specifier.local = cloneIdentifier(specifier.imported);\n          }\n        }\n\n        var nodeIsTypeImport = hasTypeImportKind(node);\n        var specifierIsTypeImport = hasTypeImportKind(specifier);\n\n        if (nodeIsTypeImport && specifierIsTypeImport) {\n          this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n        }\n\n        if (nodeIsTypeImport || specifierIsTypeImport) {\n          this.checkReservedType(specifier.local.name, specifier.local.start, true);\n        }\n\n        if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n          this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n        }\n\n        this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n        node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types$1._this:\n            return this.parseIdentifier(true);\n\n          default:\n            return _get(_getPrototypeOf(_class2.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var kind = node.kind;\n\n        if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_class2.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (this.match(types$1.colon)) {\n          decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types$1.colon)) {\n          var oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n          node.returnType = this.flowParseTypeAnnotation();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types$1.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n        var _this15 = this;\n\n        var _jsx;\n\n        var state = null;\n        var jsx;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this15).call(_this15, refExpressionErrors, afterLeftParse);\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n          var curContext = context[context.length - 1];\n\n          if (curContext === types.j_oTag) {\n            context.length -= 2;\n          } else if (curContext === types.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n          var _jsx2, _jsx3;\n\n          state = state || this.state.clone();\n          var typeParameters;\n          var arrow = this.tryParse(function (abort) {\n            var _arrowExpression$extr;\n\n            typeParameters = _this15.flowParseTypeParameterDeclaration();\n\n            var arrowExpression = _this15.forwardNoArrowParamsConversionAt(typeParameters, function () {\n              var result = _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", _this15).call(_this15, refExpressionErrors, afterLeftParse);\n\n              _this15.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            });\n\n            if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n\n            var expr = _this15.maybeUnwrapTypeCastExpression(arrowExpression);\n\n            if (expr.type !== \"ArrowFunctionExpression\") abort();\n            expr.typeParameters = typeParameters;\n\n            _this15.resetStartLocationFromNode(expr, typeParameters);\n\n            return arrowExpression;\n          }, state);\n          var arrowExpression = null;\n\n          if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n            if (!arrow.error && !arrow.aborted) {\n              if (arrow.node.async) {\n                this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n              }\n\n              return arrow.node;\n            }\n\n            arrowExpression = arrow.node;\n          }\n\n          if ((_jsx2 = jsx) != null && _jsx2.node) {\n            this.state = jsx.failState;\n            return jsx.node;\n          }\n\n          if (arrowExpression) {\n            this.state = arrow.failState;\n            return arrowExpression;\n          }\n\n          if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n          if (arrow.thrown) throw arrow.error;\n          throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseMaybeAssign\", this).call(this, refExpressionErrors, afterLeftParse);\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this16 = this;\n\n        if (this.match(types$1.colon)) {\n          var result = this.tryParse(function () {\n            var oldNoAnonFunctionType = _this16.state.noAnonFunctionType;\n            _this16.state.noAnonFunctionType = true;\n\n            var typeNode = _this16.startNode();\n\n            var _this16$flowParseType = _this16.flowParseTypeAndPredicateInitialiser();\n\n            var _this16$flowParseType2 = _slicedToArray(_this16$flowParseType, 2);\n\n            typeNode.typeAnnotation = _this16$flowParseType2[0];\n            node.predicate = _this16$flowParseType2[1];\n            _this16.state.noAnonFunctionType = oldNoAnonFunctionType;\n            if (_this16.canInsertSemicolon()) _this16.unexpected();\n            if (!_this16.match(types$1.arrow)) _this16.unexpected();\n            return typeNode;\n          });\n          if (result.thrown) return null;\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        return this.match(types$1.colon) || _get(_getPrototypeOf(_class2.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"setArrowFunctionParameters\",\n      value: function setArrowFunctionParameters(node, params) {\n        if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          node.params = params;\n        } else {\n          _get(_getPrototypeOf(_class2.prototype), \"setArrowFunctionParameters\", this).call(this, node, params);\n        }\n      }\n    }, {\n      key: \"checkParams\",\n      value: function checkParams(node, allowDuplicates, isArrowFunction) {\n        if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n          return;\n        }\n\n        for (var i = 0; i < node.params.length; i++) {\n          if (this.isThisParam(node.params[i]) && i > 0) {\n            this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"checkParams\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseParenAndDistinguishExpression\",\n      value: function parseParenAndDistinguishExpression(canBeArrow) {\n        return _get(_getPrototypeOf(_class2.prototype), \"parseParenAndDistinguishExpression\", this).call(this, canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n      }\n    }, {\n      key: \"parseSubscripts\",\n      value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n        var _this17 = this;\n\n        if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n          base = this.finishNode(node, \"CallExpression\");\n        } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n          var state = this.state.clone();\n          var arrow = this.tryParse(function (abort) {\n            return _this17.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort();\n          }, state);\n          if (!arrow.error && !arrow.aborted) return arrow.node;\n          var result = this.tryParse(function () {\n            return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", _this17).call(_this17, base, startPos, startLoc, noCalls);\n          }, state);\n          if (result.node && !result.error) return result.node;\n\n          if (arrow.node) {\n            this.state = arrow.failState;\n            return arrow.node;\n          }\n\n          if (result.node) {\n            this.state = result.failState;\n            return result.node;\n          }\n\n          throw arrow.error || result.error;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseSubscripts\", this).call(this, base, startPos, startLoc, noCalls);\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n        var _this18 = this;\n\n        if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n          subscriptState.optionalChainMember = true;\n\n          if (noCalls) {\n            subscriptState.stop = true;\n            return base;\n          }\n\n          this.next();\n          var node = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n          node.typeArguments = this.flowParseTypeParameterInstantiation();\n          this.expect(types$1.parenL);\n          node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n          node.optional = true;\n          return this.finishCallExpression(node, true);\n        } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n          var _node4 = this.startNodeAt(startPos, startLoc);\n\n          _node4.callee = base;\n          var result = this.tryParse(function () {\n            _node4.typeArguments = _this18.flowParseTypeParameterInstantiationCallOrNew();\n\n            _this18.expect(types$1.parenL);\n\n            _node4.arguments = _this18.parseCallExpressionArguments(types$1.parenR, false);\n            if (subscriptState.optionalChainMember) _node4.optional = false;\n            return _this18.finishCallExpression(_node4, subscriptState.optionalChainMember);\n          });\n\n          if (result.node) {\n            if (result.error) this.state = result.failState;\n            return result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, subscriptState);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this19 = this;\n\n        var targs = null;\n\n        if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n          targs = this.tryParse(function () {\n            return _this19.flowParseTypeParameterInstantiationCallOrNew();\n          }).node;\n        }\n\n        node.typeArguments = targs;\n\n        _get(_getPrototypeOf(_class2.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAsyncArrowWithTypeParameters\",\n      value: function parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        this.parseFunctionParams(node);\n        if (!this.parseArrow(node)) return;\n        return this.parseArrowExpression(node, undefined, true);\n      }\n    }, {\n      key: \"readToken_mult_modulo\",\n      value: function readToken_mult_modulo(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 42 && next === 47 && this.state.hasFlowComment) {\n          this.state.hasFlowComment = false;\n          this.state.pos += 2;\n          this.nextToken();\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"readToken_mult_modulo\", this).call(this, code);\n      }\n    }, {\n      key: \"readToken_pipe_amp\",\n      value: function readToken_pipe_amp(code) {\n        var next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (code === 124 && next === 125) {\n          this.finishOp(types$1.braceBarR, 2);\n          return;\n        }\n\n        _get(_getPrototypeOf(_class2.prototype), \"readToken_pipe_amp\", this).call(this, code);\n      }\n    }, {\n      key: \"parseTopLevel\",\n      value: function parseTopLevel(file, program) {\n        var fileNode = _get(_getPrototypeOf(_class2.prototype), \"parseTopLevel\", this).call(this, file, program);\n\n        if (this.state.hasFlowComment) {\n          this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n        }\n\n        return fileNode;\n      }\n    }, {\n      key: \"skipBlockComment\",\n      value: function skipBlockComment() {\n        if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n          if (this.state.hasFlowComment) {\n            this.unexpected(null, FlowErrors.NestedFlowComment);\n          }\n\n          this.hasFlowCommentCompletion();\n          this.state.pos += this.skipFlowComment();\n          this.state.hasFlowComment = true;\n          return;\n        }\n\n        if (this.state.hasFlowComment) {\n          var end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n          if (end === -1) {\n            throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n          }\n\n          this.state.pos = end + 3;\n          return;\n        }\n\n        return _get(_getPrototypeOf(_class2.prototype), \"skipBlockComment\", this).call(this);\n      }\n    }, {\n      key: \"skipFlowComment\",\n      value: function skipFlowComment() {\n        var pos = this.state.pos;\n        var shiftToFirstNonWhiteSpace = 2;\n\n        while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n          shiftToFirstNonWhiteSpace++;\n        }\n\n        var ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n        var ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n        if (ch2 === 58 && ch3 === 58) {\n          return shiftToFirstNonWhiteSpace + 2;\n        }\n\n        if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n          return shiftToFirstNonWhiteSpace + 12;\n        }\n\n        if (ch2 === 58 && ch3 !== 58) {\n          return shiftToFirstNonWhiteSpace;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"hasFlowCommentCompletion\",\n      value: function hasFlowCommentCompletion() {\n        var end = this.input.indexOf(\"*/\", this.state.pos);\n\n        if (end === -1) {\n          throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n        }\n      }\n    }, {\n      key: \"flowEnumErrorBooleanMemberNotInitialized\",\n      value: function flowEnumErrorBooleanMemberNotInitialized(pos, _ref5) {\n        var enumName = _ref5.enumName,\n            memberName = _ref5.memberName;\n        this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberName\",\n      value: function flowEnumErrorInvalidMemberName(pos, _ref6) {\n        var enumName = _ref6.enumName,\n            memberName = _ref6.memberName;\n        var suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n        this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorDuplicateMemberName\",\n      value: function flowEnumErrorDuplicateMemberName(pos, _ref7) {\n        var enumName = _ref7.enumName,\n            memberName = _ref7.memberName;\n        this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInconsistentMemberValues\",\n      value: function flowEnumErrorInconsistentMemberValues(pos, _ref8) {\n        var enumName = _ref8.enumName;\n        this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidExplicitType\",\n      value: function flowEnumErrorInvalidExplicitType(pos, _ref9) {\n        var enumName = _ref9.enumName,\n            suppliedType = _ref9.suppliedType;\n        return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n      }\n    }, {\n      key: \"flowEnumErrorInvalidMemberInitializer\",\n      value: function flowEnumErrorInvalidMemberInitializer(pos, _ref10) {\n        var enumName = _ref10.enumName,\n            explicitType = _ref10.explicitType,\n            memberName = _ref10.memberName;\n        var message = null;\n\n        switch (explicitType) {\n          case \"boolean\":\n          case \"number\":\n          case \"string\":\n            message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n            break;\n\n          case \"symbol\":\n            message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n            break;\n\n          default:\n            message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n        }\n\n        return this.raise(pos, message, enumName, memberName, explicitType);\n      }\n    }, {\n      key: \"flowEnumErrorNumberMemberNotInitialized\",\n      value: function flowEnumErrorNumberMemberNotInitialized(pos, _ref11) {\n        var enumName = _ref11.enumName,\n            memberName = _ref11.memberName;\n        this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n      }\n    }, {\n      key: \"flowEnumErrorStringMemberInconsistentlyInitailized\",\n      value: function flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref12) {\n        var enumName = _ref12.enumName;\n        this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n      }\n    }, {\n      key: \"flowEnumMemberInit\",\n      value: function flowEnumMemberInit() {\n        var _this20 = this;\n\n        var startPos = this.state.start;\n\n        var endOfInit = function endOfInit() {\n          return _this20.match(types$1.comma) || _this20.match(types$1.braceR);\n        };\n\n        switch (this.state.type) {\n          case types$1.num:\n            {\n              var literal = this.parseNumericLiteral(this.state.value);\n\n              if (endOfInit()) {\n                return {\n                  type: \"number\",\n                  pos: literal.start,\n                  value: literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types$1.string:\n            {\n              var _literal = this.parseStringLiteral(this.state.value);\n\n              if (endOfInit()) {\n                return {\n                  type: \"string\",\n                  pos: _literal.start,\n                  value: _literal\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          case types$1._true:\n          case types$1._false:\n            {\n              var _literal2 = this.parseBooleanLiteral(this.match(types$1._true));\n\n              if (endOfInit()) {\n                return {\n                  type: \"boolean\",\n                  pos: _literal2.start,\n                  value: _literal2\n                };\n              }\n\n              return {\n                type: \"invalid\",\n                pos: startPos\n              };\n            }\n\n          default:\n            return {\n              type: \"invalid\",\n              pos: startPos\n            };\n        }\n      }\n    }, {\n      key: \"flowEnumMemberRaw\",\n      value: function flowEnumMemberRaw() {\n        var pos = this.state.start;\n        var id = this.parseIdentifier(true);\n        var init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n          type: \"none\",\n          pos: pos\n        };\n        return {\n          id: id,\n          init: init\n        };\n      }\n    }, {\n      key: \"flowEnumCheckExplicitTypeMismatch\",\n      value: function flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n        var explicitType = context.explicitType;\n\n        if (explicitType === null) {\n          return;\n        }\n\n        if (explicitType !== expectedType) {\n          this.flowEnumErrorInvalidMemberInitializer(pos, context);\n        }\n      }\n    }, {\n      key: \"flowEnumMembers\",\n      value: function flowEnumMembers(_ref13) {\n        var enumName = _ref13.enumName,\n            explicitType = _ref13.explicitType;\n        var seenNames = new Set();\n        var members = {\n          booleanMembers: [],\n          numberMembers: [],\n          stringMembers: [],\n          defaultedMembers: []\n        };\n        var hasUnknownMembers = false;\n\n        while (!this.match(types$1.braceR)) {\n          if (this.eat(types$1.ellipsis)) {\n            hasUnknownMembers = true;\n            break;\n          }\n\n          var memberNode = this.startNode();\n\n          var _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n              id = _this$flowEnumMemberR.id,\n              init = _this$flowEnumMemberR.init;\n\n          var memberName = id.name;\n\n          if (memberName === \"\") {\n            continue;\n          }\n\n          if (/^[a-z]/.test(memberName)) {\n            this.flowEnumErrorInvalidMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          if (seenNames.has(memberName)) {\n            this.flowEnumErrorDuplicateMemberName(id.start, {\n              enumName: enumName,\n              memberName: memberName\n            });\n          }\n\n          seenNames.add(memberName);\n          var context = {\n            enumName: enumName,\n            explicitType: explicitType,\n            memberName: memberName\n          };\n          memberNode.id = id;\n\n          switch (init.type) {\n            case \"boolean\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n                memberNode.init = init.value;\n                members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n                break;\n              }\n\n            case \"number\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n                memberNode.init = init.value;\n                members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n                break;\n              }\n\n            case \"string\":\n              {\n                this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n                memberNode.init = init.value;\n                members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n                break;\n              }\n\n            case \"invalid\":\n              {\n                throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n              }\n\n            case \"none\":\n              {\n                switch (explicitType) {\n                  case \"boolean\":\n                    this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                    break;\n\n                  case \"number\":\n                    this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                    break;\n\n                  default:\n                    members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n                }\n              }\n          }\n\n          if (!this.match(types$1.braceR)) {\n            this.expect(types$1.comma);\n          }\n        }\n\n        return {\n          members: members,\n          hasUnknownMembers: hasUnknownMembers\n        };\n      }\n    }, {\n      key: \"flowEnumStringMembers\",\n      value: function flowEnumStringMembers(initializedMembers, defaultedMembers, _ref14) {\n        var enumName = _ref14.enumName;\n\n        if (initializedMembers.length === 0) {\n          return defaultedMembers;\n        } else if (defaultedMembers.length === 0) {\n          return initializedMembers;\n        } else if (defaultedMembers.length > initializedMembers.length) {\n          var _iterator2 = _createForOfIteratorHelper(initializedMembers),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var member = _step2.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return defaultedMembers;\n        } else {\n          var _iterator3 = _createForOfIteratorHelper(defaultedMembers),\n              _step3;\n\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var _member = _step3.value;\n              this.flowEnumErrorStringMemberInconsistentlyInitailized(_member.start, {\n                enumName: enumName\n              });\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n\n          return initializedMembers;\n        }\n      }\n    }, {\n      key: \"flowEnumParseExplicitType\",\n      value: function flowEnumParseExplicitType(_ref15) {\n        var enumName = _ref15.enumName;\n\n        if (this.eatContextual(\"of\")) {\n          if (!this.match(types$1.name)) {\n            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: null\n            });\n          }\n\n          var value = this.state.value;\n          this.next();\n\n          if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n            this.flowEnumErrorInvalidExplicitType(this.state.start, {\n              enumName: enumName,\n              suppliedType: value\n            });\n          }\n\n          return value;\n        }\n\n        return null;\n      }\n    }, {\n      key: \"flowEnumBody\",\n      value: function flowEnumBody(node, _ref16) {\n        var _this21 = this;\n\n        var enumName = _ref16.enumName,\n            nameLoc = _ref16.nameLoc;\n        var explicitType = this.flowEnumParseExplicitType({\n          enumName: enumName\n        });\n        this.expect(types$1.braceL);\n\n        var _this$flowEnumMembers = this.flowEnumMembers({\n          enumName: enumName,\n          explicitType: explicitType\n        }),\n            members = _this$flowEnumMembers.members,\n            hasUnknownMembers = _this$flowEnumMembers.hasUnknownMembers;\n\n        node.hasUnknownMembers = hasUnknownMembers;\n\n        switch (explicitType) {\n          case \"boolean\":\n            node.explicitType = true;\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n\n          case \"number\":\n            node.explicitType = true;\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n\n          case \"string\":\n            node.explicitType = true;\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName: enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n\n          case \"symbol\":\n            node.members = members.defaultedMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumSymbolBody\");\n\n          default:\n            {\n              var empty = function empty() {\n                node.members = [];\n\n                _this21.expect(types$1.braceR);\n\n                return _this21.finishNode(node, \"EnumStringBody\");\n              };\n\n              node.explicitType = false;\n              var boolsLen = members.booleanMembers.length;\n              var numsLen = members.numberMembers.length;\n              var strsLen = members.stringMembers.length;\n              var defaultedLen = members.defaultedMembers.length;\n\n              if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n                return empty();\n              } else if (!boolsLen && !numsLen) {\n                node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n                  enumName: enumName\n                });\n                this.expect(types$1.braceR);\n                return this.finishNode(node, \"EnumStringBody\");\n              } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n                var _iterator4 = _createForOfIteratorHelper(members.defaultedMembers),\n                    _step4;\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var member = _step4.value;\n                    this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                      enumName: enumName,\n                      memberName: member.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                node.members = members.booleanMembers;\n                this.expect(types$1.braceR);\n                return this.finishNode(node, \"EnumBooleanBody\");\n              } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n                var _iterator5 = _createForOfIteratorHelper(members.defaultedMembers),\n                    _step5;\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var _member2 = _step5.value;\n                    this.flowEnumErrorNumberMemberNotInitialized(_member2.start, {\n                      enumName: enumName,\n                      memberName: _member2.id.name\n                    });\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                node.members = members.numberMembers;\n                this.expect(types$1.braceR);\n                return this.finishNode(node, \"EnumNumberBody\");\n              } else {\n                this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n                  enumName: enumName\n                });\n                return empty();\n              }\n            }\n        }\n      }\n    }, {\n      key: \"flowParseEnumDeclaration\",\n      value: function flowParseEnumDeclaration(node) {\n        var id = this.parseIdentifier();\n        node.id = id;\n        node.body = this.flowEnumBody(this.startNode(), {\n          enumName: id.name,\n          nameLoc: id.start\n        });\n        return this.finishNode(node, \"EnumDeclaration\");\n      }\n    }, {\n      key: \"isLookaheadToken_lt\",\n      value: function isLookaheadToken_lt() {\n        var next = this.nextTokenStart();\n\n        if (this.input.charCodeAt(next) === 60) {\n          var afterNext = this.input.charCodeAt(next + 1);\n          return afterNext !== 60 && afterNext !== 61;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"maybeUnwrapTypeCastExpression\",\n      value: function maybeUnwrapTypeCastExpression(node) {\n        return node.type === \"TypeCastExpression\" ? node.expression : node;\n      }\n    }]);\n\n    return _class2;\n  }(superClass);\n};\n\nvar entities = {\n  quot: \"\\\"\",\n  amp: \"&\",\n  apos: \"'\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\xA0\",\n  iexcl: \"\\xA1\",\n  cent: \"\\xA2\",\n  pound: \"\\xA3\",\n  curren: \"\\xA4\",\n  yen: \"\\xA5\",\n  brvbar: \"\\xA6\",\n  sect: \"\\xA7\",\n  uml: \"\\xA8\",\n  copy: \"\\xA9\",\n  ordf: \"\\xAA\",\n  laquo: \"\\xAB\",\n  not: \"\\xAC\",\n  shy: \"\\xAD\",\n  reg: \"\\xAE\",\n  macr: \"\\xAF\",\n  deg: \"\\xB0\",\n  plusmn: \"\\xB1\",\n  sup2: \"\\xB2\",\n  sup3: \"\\xB3\",\n  acute: \"\\xB4\",\n  micro: \"\\xB5\",\n  para: \"\\xB6\",\n  middot: \"\\xB7\",\n  cedil: \"\\xB8\",\n  sup1: \"\\xB9\",\n  ordm: \"\\xBA\",\n  raquo: \"\\xBB\",\n  frac14: \"\\xBC\",\n  frac12: \"\\xBD\",\n  frac34: \"\\xBE\",\n  iquest: \"\\xBF\",\n  Agrave: \"\\xC0\",\n  Aacute: \"\\xC1\",\n  Acirc: \"\\xC2\",\n  Atilde: \"\\xC3\",\n  Auml: \"\\xC4\",\n  Aring: \"\\xC5\",\n  AElig: \"\\xC6\",\n  Ccedil: \"\\xC7\",\n  Egrave: \"\\xC8\",\n  Eacute: \"\\xC9\",\n  Ecirc: \"\\xCA\",\n  Euml: \"\\xCB\",\n  Igrave: \"\\xCC\",\n  Iacute: \"\\xCD\",\n  Icirc: \"\\xCE\",\n  Iuml: \"\\xCF\",\n  ETH: \"\\xD0\",\n  Ntilde: \"\\xD1\",\n  Ograve: \"\\xD2\",\n  Oacute: \"\\xD3\",\n  Ocirc: \"\\xD4\",\n  Otilde: \"\\xD5\",\n  Ouml: \"\\xD6\",\n  times: \"\\xD7\",\n  Oslash: \"\\xD8\",\n  Ugrave: \"\\xD9\",\n  Uacute: \"\\xDA\",\n  Ucirc: \"\\xDB\",\n  Uuml: \"\\xDC\",\n  Yacute: \"\\xDD\",\n  THORN: \"\\xDE\",\n  szlig: \"\\xDF\",\n  agrave: \"\\xE0\",\n  aacute: \"\\xE1\",\n  acirc: \"\\xE2\",\n  atilde: \"\\xE3\",\n  auml: \"\\xE4\",\n  aring: \"\\xE5\",\n  aelig: \"\\xE6\",\n  ccedil: \"\\xE7\",\n  egrave: \"\\xE8\",\n  eacute: \"\\xE9\",\n  ecirc: \"\\xEA\",\n  euml: \"\\xEB\",\n  igrave: \"\\xEC\",\n  iacute: \"\\xED\",\n  icirc: \"\\xEE\",\n  iuml: \"\\xEF\",\n  eth: \"\\xF0\",\n  ntilde: \"\\xF1\",\n  ograve: \"\\xF2\",\n  oacute: \"\\xF3\",\n  ocirc: \"\\xF4\",\n  otilde: \"\\xF5\",\n  ouml: \"\\xF6\",\n  divide: \"\\xF7\",\n  oslash: \"\\xF8\",\n  ugrave: \"\\xF9\",\n  uacute: \"\\xFA\",\n  ucirc: \"\\xFB\",\n  uuml: \"\\xFC\",\n  yacute: \"\\xFD\",\n  thorn: \"\\xFE\",\n  yuml: \"\\xFF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nvar HEX_NUMBER = /^[\\da-fA-F]+$/;\nvar DECIMAL_NUMBER = /^\\d+$/;\nvar JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = function (context) {\n  context.push(types.j_expr, types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = function jsx(superClass) {\n  return /*#__PURE__*/function (_superClass3) {\n    _inherits(_class3, _superClass3);\n\n    var _super11 = _createSuper(_class3);\n\n    function _class3() {\n      _classCallCheck(this, _class3);\n\n      return _super11.apply(this, arguments);\n    }\n\n    _createClass(_class3, [{\n      key: \"jsxReadToken\",\n      value: function jsxReadToken() {\n        var out = \"\";\n        var chunkStart = this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n\n          switch (ch) {\n            case 60:\n            case 123:\n              if (this.state.pos === this.state.start) {\n                if (ch === 60 && this.state.exprAllowed) {\n                  ++this.state.pos;\n                  return this.finishToken(types$1.jsxTagStart);\n                }\n\n                return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, ch);\n              }\n\n              out += this.input.slice(chunkStart, this.state.pos);\n              return this.finishToken(types$1.jsxText, out);\n\n            case 38:\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadEntity();\n              chunkStart = this.state.pos;\n              break;\n\n            case 62:\n            case 125:\n            default:\n              if (isNewLine(ch)) {\n                out += this.input.slice(chunkStart, this.state.pos);\n                out += this.jsxReadNewLine(true);\n                chunkStart = this.state.pos;\n              } else {\n                ++this.state.pos;\n              }\n\n          }\n        }\n      }\n    }, {\n      key: \"jsxReadNewLine\",\n      value: function jsxReadNewLine(normalizeCRLF) {\n        var ch = this.input.charCodeAt(this.state.pos);\n        var out;\n        ++this.state.pos;\n\n        if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n          out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n        } else {\n          out = String.fromCharCode(ch);\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        return out;\n      }\n    }, {\n      key: \"jsxReadString\",\n      value: function jsxReadString(quote) {\n        var out = \"\";\n        var chunkStart = ++this.state.pos;\n\n        for (;;) {\n          if (this.state.pos >= this.length) {\n            throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n          }\n\n          var ch = this.input.charCodeAt(this.state.pos);\n          if (ch === quote) break;\n\n          if (ch === 38) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n          } else if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(false);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos++);\n        return this.finishToken(types$1.string, out);\n      }\n    }, {\n      key: \"jsxReadEntity\",\n      value: function jsxReadEntity() {\n        var str = \"\";\n        var count = 0;\n        var entity;\n        var ch = this.input[this.state.pos];\n        var startPos = ++this.state.pos;\n\n        while (this.state.pos < this.length && count++ < 10) {\n          ch = this.input[this.state.pos++];\n\n          if (ch === \";\") {\n            if (str[0] === \"#\") {\n              if (str[1] === \"x\") {\n                str = str.substr(2);\n\n                if (HEX_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 16));\n                }\n              } else {\n                str = str.substr(1);\n\n                if (DECIMAL_NUMBER.test(str)) {\n                  entity = String.fromCodePoint(parseInt(str, 10));\n                }\n              }\n            } else {\n              entity = entities[str];\n            }\n\n            break;\n          }\n\n          str += ch;\n        }\n\n        if (!entity) {\n          this.state.pos = startPos;\n          return \"&\";\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"jsxReadWord\",\n      value: function jsxReadWord() {\n        var ch;\n        var start = this.state.pos;\n\n        do {\n          ch = this.input.charCodeAt(++this.state.pos);\n        } while (isIdentifierChar(ch) || ch === 45);\n\n        return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n      }\n    }, {\n      key: \"jsxParseIdentifier\",\n      value: function jsxParseIdentifier() {\n        var node = this.startNode();\n\n        if (this.match(types$1.jsxName)) {\n          node.name = this.state.value;\n        } else if (this.state.type.keyword) {\n          node.name = this.state.type.keyword;\n        } else {\n          this.unexpected();\n        }\n\n        this.next();\n        return this.finishNode(node, \"JSXIdentifier\");\n      }\n    }, {\n      key: \"jsxParseNamespacedName\",\n      value: function jsxParseNamespacedName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var name = this.jsxParseIdentifier();\n        if (!this.eat(types$1.colon)) return name;\n        var node = this.startNodeAt(startPos, startLoc);\n        node.namespace = name;\n        node.name = this.jsxParseIdentifier();\n        return this.finishNode(node, \"JSXNamespacedName\");\n      }\n    }, {\n      key: \"jsxParseElementName\",\n      value: function jsxParseElementName() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var node = this.jsxParseNamespacedName();\n\n        if (node.type === \"JSXNamespacedName\") {\n          return node;\n        }\n\n        while (this.eat(types$1.dot)) {\n          var newNode = this.startNodeAt(startPos, startLoc);\n          newNode.object = node;\n          newNode.property = this.jsxParseIdentifier();\n          node = this.finishNode(newNode, \"JSXMemberExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"jsxParseAttributeValue\",\n      value: function jsxParseAttributeValue() {\n        var node;\n\n        switch (this.state.type) {\n          case types$1.braceL:\n            node = this.startNode();\n            this.next();\n            node = this.jsxParseExpressionContainer(node);\n\n            if (node.expression.type === \"JSXEmptyExpression\") {\n              this.raise(node.start, JsxErrors.AttributeIsEmpty);\n            }\n\n            return node;\n\n          case types$1.jsxTagStart:\n          case types$1.string:\n            return this.parseExprAtom();\n\n          default:\n            throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n        }\n      }\n    }, {\n      key: \"jsxParseEmptyExpression\",\n      value: function jsxParseEmptyExpression() {\n        var node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n        return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n      }\n    }, {\n      key: \"jsxParseSpreadChild\",\n      value: function jsxParseSpreadChild(node) {\n        this.next();\n        node.expression = this.parseExpression();\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"JSXSpreadChild\");\n      }\n    }, {\n      key: \"jsxParseExpressionContainer\",\n      value: function jsxParseExpressionContainer(node) {\n        if (this.match(types$1.braceR)) {\n          node.expression = this.jsxParseEmptyExpression();\n        } else {\n          var expression = this.parseExpression();\n          node.expression = expression;\n        }\n\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"JSXExpressionContainer\");\n      }\n    }, {\n      key: \"jsxParseAttribute\",\n      value: function jsxParseAttribute() {\n        var node = this.startNode();\n\n        if (this.eat(types$1.braceL)) {\n          this.expect(types$1.ellipsis);\n          node.argument = this.parseMaybeAssignAllowIn();\n          this.expect(types$1.braceR);\n          return this.finishNode(node, \"JSXSpreadAttribute\");\n        }\n\n        node.name = this.jsxParseNamespacedName();\n        node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n        return this.finishNode(node, \"JSXAttribute\");\n      }\n    }, {\n      key: \"jsxParseOpeningElementAt\",\n      value: function jsxParseOpeningElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types$1.jsxTagEnd)) {\n          this.expect(types$1.jsxTagEnd);\n          return this.finishNode(node, \"JSXOpeningFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        return this.jsxParseOpeningElementAfterName(node);\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var attributes = [];\n\n        while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n          attributes.push(this.jsxParseAttribute());\n        }\n\n        node.attributes = attributes;\n        node.selfClosing = this.eat(types$1.slash);\n        this.expect(types$1.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningElement\");\n      }\n    }, {\n      key: \"jsxParseClosingElementAt\",\n      value: function jsxParseClosingElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n\n        if (this.match(types$1.jsxTagEnd)) {\n          this.expect(types$1.jsxTagEnd);\n          return this.finishNode(node, \"JSXClosingFragment\");\n        }\n\n        node.name = this.jsxParseElementName();\n        this.expect(types$1.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingElement\");\n      }\n    }, {\n      key: \"jsxParseElementAt\",\n      value: function jsxParseElementAt(startPos, startLoc) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var children = [];\n        var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n        var closingElement = null;\n\n        if (!openingElement.selfClosing) {\n          contents: for (;;) {\n            switch (this.state.type) {\n              case types$1.jsxTagStart:\n                startPos = this.state.start;\n                startLoc = this.state.startLoc;\n                this.next();\n\n                if (this.eat(types$1.slash)) {\n                  closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n                  break contents;\n                }\n\n                children.push(this.jsxParseElementAt(startPos, startLoc));\n                break;\n\n              case types$1.jsxText:\n                children.push(this.parseExprAtom());\n                break;\n\n              case types$1.braceL:\n                {\n                  var _node5 = this.startNode();\n\n                  this.next();\n\n                  if (this.match(types$1.ellipsis)) {\n                    children.push(this.jsxParseSpreadChild(_node5));\n                  } else {\n                    children.push(this.jsxParseExpressionContainer(_node5));\n                  }\n\n                  break;\n                }\n\n              default:\n                throw this.unexpected();\n            }\n          }\n\n          if (isFragment(openingElement) && !isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n          } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n            this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n          } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n            if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n              this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n            }\n          }\n        }\n\n        if (isFragment(openingElement)) {\n          node.openingFragment = openingElement;\n          node.closingFragment = closingElement;\n        } else {\n          node.openingElement = openingElement;\n          node.closingElement = closingElement;\n        }\n\n        node.children = children;\n\n        if (this.isRelational(\"<\")) {\n          throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n        }\n\n        return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n      }\n    }, {\n      key: \"jsxParseElement\",\n      value: function jsxParseElement() {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        this.next();\n        return this.jsxParseElementAt(startPos, startLoc);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom(refExpressionErrors) {\n        if (this.match(types$1.jsxText)) {\n          return this.parseLiteral(this.state.value, \"JSXText\");\n        } else if (this.match(types$1.jsxTagStart)) {\n          return this.jsxParseElement();\n        } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n          this.finishToken(types$1.jsxTagStart);\n          return this.jsxParseElement();\n        } else {\n          return _get(_getPrototypeOf(_class3.prototype), \"parseExprAtom\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"createLookaheadState\",\n      value: function createLookaheadState(state) {\n        var lookaheadState = _get(_getPrototypeOf(_class3.prototype), \"createLookaheadState\", this).call(this, state);\n\n        lookaheadState.inPropertyName = state.inPropertyName;\n        return lookaheadState;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inPropertyName) return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n        var context = this.curContext();\n\n        if (context === types.j_expr) {\n          return this.jsxReadToken();\n        }\n\n        if (context === types.j_oTag || context === types.j_cTag) {\n          if (isIdentifierStart(code)) {\n            return this.jsxReadWord();\n          }\n\n          if (code === 62) {\n            ++this.state.pos;\n            return this.finishToken(types$1.jsxTagEnd);\n          }\n\n          if ((code === 34 || code === 39) && context === types.j_oTag) {\n            return this.jsxReadString(code);\n          }\n        }\n\n        if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n          ++this.state.pos;\n          return this.finishToken(types$1.jsxTagStart);\n        }\n\n        return _get(_getPrototypeOf(_class3.prototype), \"getTokenFromCode\", this).call(this, code);\n      }\n    }, {\n      key: \"updateContext\",\n      value: function updateContext(prevType) {\n        _get(_getPrototypeOf(_class3.prototype), \"updateContext\", this).call(this, prevType);\n\n        var _this$state = this.state,\n            context = _this$state.context,\n            type = _this$state.type;\n\n        if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n          context.splice(-2, 2, types.j_cTag);\n          this.state.exprAllowed = false;\n        } else if (type === types$1.jsxTagEnd) {\n          var out = context.pop();\n\n          if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n            context.pop();\n            this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n          } else {\n            this.state.exprAllowed = true;\n          }\n        } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n          this.state.exprAllowed = false;\n        } else {\n          this.state.exprAllowed = type.beforeExpr;\n        }\n      }\n    }]);\n\n    return _class3;\n  }(superClass);\n};\n\nvar TypeScriptScope = /*#__PURE__*/function (_Scope2) {\n  _inherits(TypeScriptScope, _Scope2);\n\n  var _super12 = _createSuper(TypeScriptScope);\n\n  function TypeScriptScope() {\n    var _this22;\n\n    _classCallCheck(this, TypeScriptScope);\n\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n\n    _this22 = _super12.call.apply(_super12, [this].concat(args));\n    _this22.types = new Set();\n    _this22.enums = new Set();\n    _this22.constEnums = new Set();\n    _this22.classes = new Set();\n    _this22.exportOnlyBindings = new Set();\n    return _this22;\n  }\n\n  return TypeScriptScope;\n}(Scope);\n\nvar TypeScriptScopeHandler = /*#__PURE__*/function (_ScopeHandler2) {\n  _inherits(TypeScriptScopeHandler, _ScopeHandler2);\n\n  var _super13 = _createSuper(TypeScriptScopeHandler);\n\n  function TypeScriptScopeHandler() {\n    _classCallCheck(this, TypeScriptScopeHandler);\n\n    return _super13.apply(this, arguments);\n  }\n\n  _createClass(TypeScriptScopeHandler, [{\n    key: \"createScope\",\n    value: function createScope(flags) {\n      return new TypeScriptScope(flags);\n    }\n  }, {\n    key: \"declareName\",\n    value: function declareName(name, bindingType, pos) {\n      var scope = this.currentScope();\n\n      if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n        this.maybeExportDefined(scope, name);\n        scope.exportOnlyBindings.add(name);\n        return;\n      }\n\n      _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"declareName\", this).apply(this, arguments);\n\n      if (bindingType & BIND_KIND_TYPE) {\n        if (!(bindingType & BIND_KIND_VALUE)) {\n          this.checkRedeclarationInScope(scope, name, bindingType, pos);\n          this.maybeExportDefined(scope, name);\n        }\n\n        scope.types.add(name);\n      }\n\n      if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n      if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n      if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n    }\n  }, {\n    key: \"isRedeclaredInScope\",\n    value: function isRedeclaredInScope(scope, name, bindingType) {\n      if (scope.enums.has(name)) {\n        if (bindingType & BIND_FLAGS_TS_ENUM) {\n          var isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n          var wasConst = scope.constEnums.has(name);\n          return isConst !== wasConst;\n        }\n\n        return true;\n      }\n\n      if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n        if (scope.lexical.has(name)) {\n          return !!(bindingType & BIND_KIND_VALUE);\n        } else {\n          return false;\n        }\n      }\n\n      if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n        return true;\n      }\n\n      return _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"isRedeclaredInScope\", this).apply(this, arguments);\n    }\n  }, {\n    key: \"checkLocalExport\",\n    value: function checkLocalExport(id) {\n      var topLevelScope = this.scopeStack[0];\n      var name = id.name;\n\n      if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n        _get(_getPrototypeOf(TypeScriptScopeHandler.prototype), \"checkLocalExport\", this).call(this, id);\n      }\n    }\n  }]);\n\n  return TypeScriptScopeHandler;\n}(ScopeHandler);\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(\"Unexpected \".concat(x, \" value.\"));\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nvar TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = function typescript(superClass) {\n  return /*#__PURE__*/function (_superClass4) {\n    _inherits(_class4, _superClass4);\n\n    var _super14 = _createSuper(_class4);\n\n    function _class4() {\n      _classCallCheck(this, _class4);\n\n      return _super14.apply(this, arguments);\n    }\n\n    _createClass(_class4, [{\n      key: \"getScopeHandler\",\n      value: function getScopeHandler() {\n        return TypeScriptScopeHandler;\n      }\n    }, {\n      key: \"tsIsIdentifier\",\n      value: function tsIsIdentifier() {\n        return this.match(types$1.name);\n      }\n    }, {\n      key: \"tsTokenCanFollowModifier\",\n      value: function tsTokenCanFollowModifier() {\n        return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n      }\n    }, {\n      key: \"tsNextTokenCanFollowModifier\",\n      value: function tsNextTokenCanFollowModifier() {\n        this.next();\n        return this.tsTokenCanFollowModifier();\n      }\n    }, {\n      key: \"tsParseModifier\",\n      value: function tsParseModifier(allowedModifiers) {\n        if (!this.match(types$1.name)) {\n          return undefined;\n        }\n\n        var modifier = this.state.value;\n\n        if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n\n        return undefined;\n      }\n    }, {\n      key: \"tsParseModifiers\",\n      value: function tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n        var _this23 = this;\n\n        var enforceOrder = function enforceOrder(pos, modifier, before, after) {\n          if (modifier === before && modified[after]) {\n            _this23.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n          }\n        };\n\n        var incompatible = function incompatible(pos, modifier, mod1, mod2) {\n          if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n            _this23.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n          }\n        };\n\n        for (;;) {\n          var startPos = this.state.start;\n          var modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n          if (!modifier) break;\n\n          if (tsIsAccessModifier(modifier)) {\n            if (modified.accessibility) {\n              this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n            } else {\n              enforceOrder(startPos, modifier, modifier, \"override\");\n              enforceOrder(startPos, modifier, modifier, \"static\");\n              enforceOrder(startPos, modifier, modifier, \"readonly\");\n              modified.accessibility = modifier;\n            }\n          } else {\n            if (Object.hasOwnProperty.call(modified, modifier)) {\n              this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n            } else {\n              enforceOrder(startPos, modifier, \"static\", \"readonly\");\n              enforceOrder(startPos, modifier, \"static\", \"override\");\n              enforceOrder(startPos, modifier, \"override\", \"readonly\");\n              enforceOrder(startPos, modifier, \"abstract\", \"override\");\n              incompatible(startPos, modifier, \"declare\", \"override\");\n              incompatible(startPos, modifier, \"static\", \"abstract\");\n            }\n\n            modified[modifier] = true;\n          }\n\n          if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n            this.raise(startPos, errorTemplate, modifier);\n          }\n        }\n      }\n    }, {\n      key: \"tsIsListTerminator\",\n      value: function tsIsListTerminator(kind) {\n        switch (kind) {\n          case \"EnumMembers\":\n          case \"TypeMembers\":\n            return this.match(types$1.braceR);\n\n          case \"HeritageClauseElement\":\n            return this.match(types$1.braceL);\n\n          case \"TupleElementTypes\":\n            return this.match(types$1.bracketR);\n\n          case \"TypeParametersOrArguments\":\n            return this.isRelational(\">\");\n        }\n\n        throw new Error(\"Unreachable\");\n      }\n    }, {\n      key: \"tsParseList\",\n      value: function tsParseList(kind, parseElement) {\n        var result = [];\n\n        while (!this.tsIsListTerminator(kind)) {\n          result.push(parseElement());\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseDelimitedList\",\n      value: function tsParseDelimitedList(kind, parseElement) {\n        return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n      }\n    }, {\n      key: \"tsParseDelimitedListWorker\",\n      value: function tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n        var result = [];\n\n        for (;;) {\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          var element = parseElement();\n\n          if (element == null) {\n            return undefined;\n          }\n\n          result.push(element);\n\n          if (this.eat(types$1.comma)) {\n            continue;\n          }\n\n          if (this.tsIsListTerminator(kind)) {\n            break;\n          }\n\n          if (expectSuccess) {\n            this.expect(types$1.comma);\n          }\n\n          return undefined;\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseBracketedList\",\n      value: function tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n        if (!skipFirstToken) {\n          if (bracket) {\n            this.expect(types$1.bracketL);\n          } else {\n            this.expectRelational(\"<\");\n          }\n        }\n\n        var result = this.tsParseDelimitedList(kind, parseElement);\n\n        if (bracket) {\n          this.expect(types$1.bracketR);\n        } else {\n          this.expectRelational(\">\");\n        }\n\n        return result;\n      }\n    }, {\n      key: \"tsParseImportType\",\n      value: function tsParseImportType() {\n        var node = this.startNode();\n        this.expect(types$1._import);\n        this.expect(types$1.parenL);\n\n        if (!this.match(types$1.string)) {\n          this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n        }\n\n        node.argument = this.parseExprAtom();\n        this.expect(types$1.parenR);\n\n        if (this.eat(types$1.dot)) {\n          node.qualifier = this.tsParseEntityName(true);\n        }\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSImportType\");\n      }\n    }, {\n      key: \"tsParseEntityName\",\n      value: function tsParseEntityName(allowReservedWords) {\n        var entity = this.parseIdentifier();\n\n        while (this.eat(types$1.dot)) {\n          var node = this.startNodeAtNode(entity);\n          node.left = entity;\n          node.right = this.parseIdentifier(allowReservedWords);\n          entity = this.finishNode(node, \"TSQualifiedName\");\n        }\n\n        return entity;\n      }\n    }, {\n      key: \"tsParseTypeReference\",\n      value: function tsParseTypeReference() {\n        var node = this.startNode();\n        node.typeName = this.tsParseEntityName(false);\n\n        if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSTypeReference\");\n      }\n    }, {\n      key: \"tsParseThisTypePredicate\",\n      value: function tsParseThisTypePredicate(lhs) {\n        this.next();\n        var node = this.startNodeAtNode(lhs);\n        node.parameterName = lhs;\n        node.typeAnnotation = this.tsParseTypeAnnotation(false);\n        node.asserts = false;\n        return this.finishNode(node, \"TSTypePredicate\");\n      }\n    }, {\n      key: \"tsParseThisTypeNode\",\n      value: function tsParseThisTypeNode() {\n        var node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSThisType\");\n      }\n    }, {\n      key: \"tsParseTypeQuery\",\n      value: function tsParseTypeQuery() {\n        var node = this.startNode();\n        this.expect(types$1._typeof);\n\n        if (this.match(types$1._import)) {\n          node.exprName = this.tsParseImportType();\n        } else {\n          node.exprName = this.tsParseEntityName(true);\n        }\n\n        return this.finishNode(node, \"TSTypeQuery\");\n      }\n    }, {\n      key: \"tsParseTypeParameter\",\n      value: function tsParseTypeParameter() {\n        var node = this.startNode();\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsEatThenParseType(types$1._extends);\n        node.default = this.tsEatThenParseType(types$1.eq);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsTryParseTypeParameters\",\n      value: function tsTryParseTypeParameters() {\n        if (this.isRelational(\"<\")) {\n          return this.tsParseTypeParameters();\n        }\n      }\n    }, {\n      key: \"tsParseTypeParameters\",\n      value: function tsParseTypeParameters() {\n        var node = this.startNode();\n\n        if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n          this.next();\n        } else {\n          this.unexpected();\n        }\n\n        node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n        if (node.params.length === 0) {\n          this.raise(node.start, TSErrors.EmptyTypeParameters);\n        }\n\n        return this.finishNode(node, \"TSTypeParameterDeclaration\");\n      }\n    }, {\n      key: \"tsTryNextParseConstantContext\",\n      value: function tsTryNextParseConstantContext() {\n        if (this.lookahead().type === types$1._const) {\n          this.next();\n          return this.tsParseTypeReference();\n        }\n\n        return null;\n      }\n    }, {\n      key: \"tsFillSignature\",\n      value: function tsFillSignature(returnToken, signature) {\n        var returnTokenRequired = returnToken === types$1.arrow;\n        signature.typeParameters = this.tsTryParseTypeParameters();\n        this.expect(types$1.parenL);\n        signature.parameters = this.tsParseBindingListForSignature();\n\n        if (returnTokenRequired) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        } else if (this.match(returnToken)) {\n          signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n        }\n      }\n    }, {\n      key: \"tsParseBindingListForSignature\",\n      value: function tsParseBindingListForSignature() {\n        var _this24 = this;\n\n        return this.parseBindingList(types$1.parenR, 41).map(function (pattern) {\n          if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n            _this24.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n          }\n\n          return pattern;\n        });\n      }\n    }, {\n      key: \"tsParseTypeMemberSemicolon\",\n      value: function tsParseTypeMemberSemicolon() {\n        if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n          this.expect(types$1.semi);\n        }\n      }\n    }, {\n      key: \"tsParseSignatureMember\",\n      value: function tsParseSignatureMember(kind, node) {\n        this.tsFillSignature(types$1.colon, node);\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsIsUnambiguouslyIndexSignature\",\n      value: function tsIsUnambiguouslyIndexSignature() {\n        this.next();\n        return this.eat(types$1.name) && this.match(types$1.colon);\n      }\n    }, {\n      key: \"tsTryParseIndexSignature\",\n      value: function tsTryParseIndexSignature(node) {\n        if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n          return undefined;\n        }\n\n        this.expect(types$1.bracketL);\n        var id = this.parseIdentifier();\n        id.typeAnnotation = this.tsParseTypeAnnotation();\n        this.resetEndLocation(id);\n        this.expect(types$1.bracketR);\n        node.parameters = [id];\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(node, \"TSIndexSignature\");\n      }\n    }, {\n      key: \"tsParsePropertyOrMethodSignature\",\n      value: function tsParsePropertyOrMethodSignature(node, readonly) {\n        if (this.eat(types$1.question)) node.optional = true;\n        var nodeAny = node;\n\n        if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n          if (readonly) {\n            this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n          }\n\n          var method = nodeAny;\n\n          if (method.kind && this.isRelational(\"<\")) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n          }\n\n          this.tsFillSignature(types$1.colon, method);\n          this.tsParseTypeMemberSemicolon();\n\n          if (method.kind === \"get\") {\n            if (method.parameters.length > 0) {\n              this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n              if (this.isThisParam(method.parameters[0])) {\n                this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n              }\n            }\n          } else if (method.kind === \"set\") {\n            if (method.parameters.length !== 1) {\n              this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n            } else {\n              var firstParameter = method.parameters[0];\n\n              if (this.isThisParam(firstParameter)) {\n                this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n              }\n\n              if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n                this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n              }\n\n              if (firstParameter.type === \"RestElement\") {\n                this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n              }\n            }\n\n            if (method.typeAnnotation) {\n              this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n            }\n          } else {\n            method.kind = \"method\";\n          }\n\n          return this.finishNode(method, \"TSMethodSignature\");\n        } else {\n          var property = nodeAny;\n          if (readonly) property.readonly = true;\n          var type = this.tsTryParseTypeAnnotation();\n          if (type) property.typeAnnotation = type;\n          this.tsParseTypeMemberSemicolon();\n          return this.finishNode(property, \"TSPropertySignature\");\n        }\n      }\n    }, {\n      key: \"tsParseTypeMember\",\n      value: function tsParseTypeMember() {\n        var node = this.startNode();\n\n        if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n          return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n        }\n\n        if (this.match(types$1._new)) {\n          var id = this.startNode();\n          this.next();\n\n          if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n            return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n          } else {\n            node.key = this.createIdentifier(id, \"new\");\n            return this.tsParsePropertyOrMethodSignature(node, false);\n          }\n        }\n\n        this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n        var idx = this.tsTryParseIndexSignature(node);\n\n        if (idx) {\n          return idx;\n        }\n\n        this.parsePropertyName(node, false);\n\n        if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n          node.kind = node.key.name;\n          this.parsePropertyName(node, false);\n        }\n\n        return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n      }\n    }, {\n      key: \"tsParseTypeLiteral\",\n      value: function tsParseTypeLiteral() {\n        var node = this.startNode();\n        node.members = this.tsParseObjectTypeMembers();\n        return this.finishNode(node, \"TSTypeLiteral\");\n      }\n    }, {\n      key: \"tsParseObjectTypeMembers\",\n      value: function tsParseObjectTypeMembers() {\n        this.expect(types$1.braceL);\n        var members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n        this.expect(types$1.braceR);\n        return members;\n      }\n    }, {\n      key: \"tsIsStartOfMappedType\",\n      value: function tsIsStartOfMappedType() {\n        this.next();\n\n        if (this.eat(types$1.plusMin)) {\n          return this.isContextual(\"readonly\");\n        }\n\n        if (this.isContextual(\"readonly\")) {\n          this.next();\n        }\n\n        if (!this.match(types$1.bracketL)) {\n          return false;\n        }\n\n        this.next();\n\n        if (!this.tsIsIdentifier()) {\n          return false;\n        }\n\n        this.next();\n        return this.match(types$1._in);\n      }\n    }, {\n      key: \"tsParseMappedTypeParameter\",\n      value: function tsParseMappedTypeParameter() {\n        var node = this.startNode();\n        node.name = this.tsParseTypeParameterName();\n        node.constraint = this.tsExpectThenParseType(types$1._in);\n        return this.finishNode(node, \"TSTypeParameter\");\n      }\n    }, {\n      key: \"tsParseMappedType\",\n      value: function tsParseMappedType() {\n        var node = this.startNode();\n        this.expect(types$1.braceL);\n\n        if (this.match(types$1.plusMin)) {\n          node.readonly = this.state.value;\n          this.next();\n          this.expectContextual(\"readonly\");\n        } else if (this.eatContextual(\"readonly\")) {\n          node.readonly = true;\n        }\n\n        this.expect(types$1.bracketL);\n        node.typeParameter = this.tsParseMappedTypeParameter();\n        node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n        this.expect(types$1.bracketR);\n\n        if (this.match(types$1.plusMin)) {\n          node.optional = this.state.value;\n          this.next();\n          this.expect(types$1.question);\n        } else if (this.eat(types$1.question)) {\n          node.optional = true;\n        }\n\n        node.typeAnnotation = this.tsTryParseType();\n        this.semicolon();\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"TSMappedType\");\n      }\n    }, {\n      key: \"tsParseTupleType\",\n      value: function tsParseTupleType() {\n        var _this25 = this;\n\n        var node = this.startNode();\n        node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n        var seenOptionalElement = false;\n        var labeledElements = null;\n        node.elementTypes.forEach(function (elementNode) {\n          var _labeledElements;\n\n          var _elementNode = elementNode,\n              type = _elementNode.type;\n\n          if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n            _this25.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n          }\n\n          seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n          if (type === \"TSRestType\") {\n            elementNode = elementNode.typeAnnotation;\n            type = elementNode.type;\n          }\n\n          var isLabeled = type === \"TSNamedTupleMember\";\n          labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n          if (labeledElements !== isLabeled) {\n            _this25.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n          }\n        });\n        return this.finishNode(node, \"TSTupleType\");\n      }\n    }, {\n      key: \"tsParseTupleElementType\",\n      value: function tsParseTupleElementType() {\n        var _this$state2 = this.state,\n            startPos = _this$state2.start,\n            startLoc = _this$state2.startLoc;\n        var rest = this.eat(types$1.ellipsis);\n        var type = this.tsParseType();\n        var optional = this.eat(types$1.question);\n        var labeled = this.eat(types$1.colon);\n\n        if (labeled) {\n          var labeledNode = this.startNodeAtNode(type);\n          labeledNode.optional = optional;\n\n          if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n            labeledNode.label = type.typeName;\n          } else {\n            this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n            labeledNode.label = type;\n          }\n\n          labeledNode.elementType = this.tsParseType();\n          type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n        } else if (optional) {\n          var optionalTypeNode = this.startNodeAtNode(type);\n          optionalTypeNode.typeAnnotation = type;\n          type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n        }\n\n        if (rest) {\n          var restNode = this.startNodeAt(startPos, startLoc);\n          restNode.typeAnnotation = type;\n          type = this.finishNode(restNode, \"TSRestType\");\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseParenthesizedType\",\n      value: function tsParseParenthesizedType() {\n        var node = this.startNode();\n        this.expect(types$1.parenL);\n        node.typeAnnotation = this.tsParseType();\n        this.expect(types$1.parenR);\n        return this.finishNode(node, \"TSParenthesizedType\");\n      }\n    }, {\n      key: \"tsParseFunctionOrConstructorType\",\n      value: function tsParseFunctionOrConstructorType(type, abstract) {\n        var node = this.startNode();\n\n        if (type === \"TSConstructorType\") {\n          node.abstract = !!abstract;\n          if (abstract) this.next();\n          this.next();\n        }\n\n        this.tsFillSignature(types$1.arrow, node);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"tsParseLiteralTypeNode\",\n      value: function tsParseLiteralTypeNode() {\n        var _this26 = this;\n\n        var node = this.startNode();\n\n        node.literal = function () {\n          switch (_this26.state.type) {\n            case types$1.num:\n            case types$1.bigint:\n            case types$1.string:\n            case types$1._true:\n            case types$1._false:\n              return _this26.parseExprAtom();\n\n            default:\n              throw _this26.unexpected();\n          }\n        }();\n\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"tsParseTemplateLiteralType\",\n      value: function tsParseTemplateLiteralType() {\n        var node = this.startNode();\n        node.literal = this.parseTemplate(false);\n        return this.finishNode(node, \"TSLiteralType\");\n      }\n    }, {\n      key: \"parseTemplateSubstitution\",\n      value: function parseTemplateSubstitution() {\n        if (this.state.inType) return this.tsParseType();\n        return _get(_getPrototypeOf(_class4.prototype), \"parseTemplateSubstitution\", this).call(this);\n      }\n    }, {\n      key: \"tsParseThisTypeOrThisTypePredicate\",\n      value: function tsParseThisTypeOrThisTypePredicate() {\n        var thisKeyword = this.tsParseThisTypeNode();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          return this.tsParseThisTypePredicate(thisKeyword);\n        } else {\n          return thisKeyword;\n        }\n      }\n    }, {\n      key: \"tsParseNonArrayType\",\n      value: function tsParseNonArrayType() {\n        switch (this.state.type) {\n          case types$1.name:\n          case types$1._void:\n          case types$1._null:\n            {\n              var type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n              if (type !== undefined && this.lookaheadCharCode() !== 46) {\n                var node = this.startNode();\n                this.next();\n                return this.finishNode(node, type);\n              }\n\n              return this.tsParseTypeReference();\n            }\n\n          case types$1.string:\n          case types$1.num:\n          case types$1.bigint:\n          case types$1._true:\n          case types$1._false:\n            return this.tsParseLiteralTypeNode();\n\n          case types$1.plusMin:\n            if (this.state.value === \"-\") {\n              var _node6 = this.startNode();\n\n              var nextToken = this.lookahead();\n\n              if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n                throw this.unexpected();\n              }\n\n              _node6.literal = this.parseMaybeUnary();\n              return this.finishNode(_node6, \"TSLiteralType\");\n            }\n\n            break;\n\n          case types$1._this:\n            return this.tsParseThisTypeOrThisTypePredicate();\n\n          case types$1._typeof:\n            return this.tsParseTypeQuery();\n\n          case types$1._import:\n            return this.tsParseImportType();\n\n          case types$1.braceL:\n            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n          case types$1.bracketL:\n            return this.tsParseTupleType();\n\n          case types$1.parenL:\n            return this.tsParseParenthesizedType();\n\n          case types$1.backQuote:\n            return this.tsParseTemplateLiteralType();\n        }\n\n        throw this.unexpected();\n      }\n    }, {\n      key: \"tsParseArrayTypeOrHigher\",\n      value: function tsParseArrayTypeOrHigher() {\n        var type = this.tsParseNonArrayType();\n\n        while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n          if (this.match(types$1.bracketR)) {\n            var node = this.startNodeAtNode(type);\n            node.elementType = type;\n            this.expect(types$1.bracketR);\n            type = this.finishNode(node, \"TSArrayType\");\n          } else {\n            var _node7 = this.startNodeAtNode(type);\n\n            _node7.objectType = type;\n            _node7.indexType = this.tsParseType();\n            this.expect(types$1.bracketR);\n            type = this.finishNode(_node7, \"TSIndexedAccessType\");\n          }\n        }\n\n        return type;\n      }\n    }, {\n      key: \"tsParseTypeOperator\",\n      value: function tsParseTypeOperator(operator) {\n        var node = this.startNode();\n        this.expectContextual(operator);\n        node.operator = operator;\n        node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n        if (operator === \"readonly\") {\n          this.tsCheckTypeAnnotationForReadOnly(node);\n        }\n\n        return this.finishNode(node, \"TSTypeOperator\");\n      }\n    }, {\n      key: \"tsCheckTypeAnnotationForReadOnly\",\n      value: function tsCheckTypeAnnotationForReadOnly(node) {\n        switch (node.typeAnnotation.type) {\n          case \"TSTupleType\":\n          case \"TSArrayType\":\n            return;\n\n          default:\n            this.raise(node.start, TSErrors.UnexpectedReadonly);\n        }\n      }\n    }, {\n      key: \"tsParseInferType\",\n      value: function tsParseInferType() {\n        var node = this.startNode();\n        this.expectContextual(\"infer\");\n        var typeParameter = this.startNode();\n        typeParameter.name = this.tsParseTypeParameterName();\n        node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n        return this.finishNode(node, \"TSInferType\");\n      }\n    }, {\n      key: \"tsParseTypeOperatorOrHigher\",\n      value: function tsParseTypeOperatorOrHigher() {\n        var _this27 = this;\n\n        var operator = [\"keyof\", \"unique\", \"readonly\"].find(function (kw) {\n          return _this27.isContextual(kw);\n        });\n        return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseUnionOrIntersectionType\",\n      value: function tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n        var node = this.startNode();\n        var hasLeadingOperator = this.eat(operator);\n        var types = [];\n\n        do {\n          types.push(parseConstituentType());\n        } while (this.eat(operator));\n\n        if (types.length === 1 && !hasLeadingOperator) {\n          return types[0];\n        }\n\n        node.types = types;\n        return this.finishNode(node, kind);\n      }\n    }, {\n      key: \"tsParseIntersectionTypeOrHigher\",\n      value: function tsParseIntersectionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n      }\n    }, {\n      key: \"tsParseUnionTypeOrHigher\",\n      value: function tsParseUnionTypeOrHigher() {\n        return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n      }\n    }, {\n      key: \"tsIsStartOfFunctionType\",\n      value: function tsIsStartOfFunctionType() {\n        if (this.isRelational(\"<\")) {\n          return true;\n        }\n\n        return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n      }\n    }, {\n      key: \"tsSkipParameterStart\",\n      value: function tsSkipParameterStart() {\n        if (this.match(types$1.name) || this.match(types$1._this)) {\n          this.next();\n          return true;\n        }\n\n        if (this.match(types$1.braceL)) {\n          var braceStackCounter = 1;\n          this.next();\n\n          while (braceStackCounter > 0) {\n            if (this.match(types$1.braceL)) {\n              ++braceStackCounter;\n            } else if (this.match(types$1.braceR)) {\n              --braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        if (this.match(types$1.bracketL)) {\n          var _braceStackCounter = 1;\n          this.next();\n\n          while (_braceStackCounter > 0) {\n            if (this.match(types$1.bracketL)) {\n              ++_braceStackCounter;\n            } else if (this.match(types$1.bracketR)) {\n              --_braceStackCounter;\n            }\n\n            this.next();\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsIsUnambiguouslyStartOfFunctionType\",\n      value: function tsIsUnambiguouslyStartOfFunctionType() {\n        this.next();\n\n        if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n          return true;\n        }\n\n        if (this.tsSkipParameterStart()) {\n          if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n            return true;\n          }\n\n          if (this.match(types$1.parenR)) {\n            this.next();\n\n            if (this.match(types$1.arrow)) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"tsParseTypeOrTypePredicateAnnotation\",\n      value: function tsParseTypeOrTypePredicateAnnotation(returnToken) {\n        var _this28 = this;\n\n        return this.tsInType(function () {\n          var t = _this28.startNode();\n\n          _this28.expect(returnToken);\n\n          var node = _this28.startNode();\n\n          var asserts = !!_this28.tsTryParse(_this28.tsParseTypePredicateAsserts.bind(_this28));\n\n          if (asserts && _this28.match(types$1._this)) {\n            var thisTypePredicate = _this28.tsParseThisTypeOrThisTypePredicate();\n\n            if (thisTypePredicate.type === \"TSThisType\") {\n              node.parameterName = thisTypePredicate;\n              node.asserts = true;\n              node.typeAnnotation = null;\n              thisTypePredicate = _this28.finishNode(node, \"TSTypePredicate\");\n            } else {\n              _this28.resetStartLocationFromNode(thisTypePredicate, node);\n\n              thisTypePredicate.asserts = true;\n            }\n\n            t.typeAnnotation = thisTypePredicate;\n            return _this28.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var typePredicateVariable = _this28.tsIsIdentifier() && _this28.tsTryParse(_this28.tsParseTypePredicatePrefix.bind(_this28));\n\n          if (!typePredicateVariable) {\n            if (!asserts) {\n              return _this28.tsParseTypeAnnotation(false, t);\n            }\n\n            node.parameterName = _this28.parseIdentifier();\n            node.asserts = asserts;\n            node.typeAnnotation = null;\n            t.typeAnnotation = _this28.finishNode(node, \"TSTypePredicate\");\n            return _this28.finishNode(t, \"TSTypeAnnotation\");\n          }\n\n          var type = _this28.tsParseTypeAnnotation(false);\n\n          node.parameterName = typePredicateVariable;\n          node.typeAnnotation = type;\n          node.asserts = asserts;\n          t.typeAnnotation = _this28.finishNode(node, \"TSTypePredicate\");\n          return _this28.finishNode(t, \"TSTypeAnnotation\");\n        });\n      }\n    }, {\n      key: \"tsTryParseTypeOrTypePredicateAnnotation\",\n      value: function tsTryParseTypeOrTypePredicateAnnotation() {\n        return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n      }\n    }, {\n      key: \"tsTryParseTypeAnnotation\",\n      value: function tsTryParseTypeAnnotation() {\n        return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n      }\n    }, {\n      key: \"tsTryParseType\",\n      value: function tsTryParseType() {\n        return this.tsEatThenParseType(types$1.colon);\n      }\n    }, {\n      key: \"tsParseTypePredicatePrefix\",\n      value: function tsParseTypePredicatePrefix() {\n        var id = this.parseIdentifier();\n\n        if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n          this.next();\n          return id;\n        }\n      }\n    }, {\n      key: \"tsParseTypePredicateAsserts\",\n      value: function tsParseTypePredicateAsserts() {\n        if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n          return false;\n        }\n\n        var containsEsc = this.state.containsEsc;\n        this.next();\n\n        if (!this.match(types$1.name) && !this.match(types$1._this)) {\n          return false;\n        }\n\n        if (containsEsc) {\n          this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n        }\n\n        return true;\n      }\n    }, {\n      key: \"tsParseTypeAnnotation\",\n      value: function tsParseTypeAnnotation() {\n        var _this29 = this;\n\n        var eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n        this.tsInType(function () {\n          if (eatColon) _this29.expect(types$1.colon);\n          t.typeAnnotation = _this29.tsParseType();\n        });\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n    }, {\n      key: \"tsParseType\",\n      value: function tsParseType() {\n        assert(this.state.inType);\n        var type = this.tsParseNonConditionalType();\n\n        if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n          return type;\n        }\n\n        var node = this.startNodeAtNode(type);\n        node.checkType = type;\n        node.extendsType = this.tsParseNonConditionalType();\n        this.expect(types$1.question);\n        node.trueType = this.tsParseType();\n        this.expect(types$1.colon);\n        node.falseType = this.tsParseType();\n        return this.finishNode(node, \"TSConditionalType\");\n      }\n    }, {\n      key: \"isAbstractConstructorSignature\",\n      value: function isAbstractConstructorSignature() {\n        return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n      }\n    }, {\n      key: \"tsParseNonConditionalType\",\n      value: function tsParseNonConditionalType() {\n        if (this.tsIsStartOfFunctionType()) {\n          return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n        }\n\n        if (this.match(types$1._new)) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n        } else if (this.isAbstractConstructorSignature()) {\n          return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n        }\n\n        return this.tsParseUnionTypeOrHigher();\n      }\n    }, {\n      key: \"tsParseTypeAssertion\",\n      value: function tsParseTypeAssertion() {\n        var node = this.startNode();\n\n        var _const = this.tsTryNextParseConstantContext();\n\n        node.typeAnnotation = _const || this.tsNextThenParseType();\n        this.expectRelational(\">\");\n        node.expression = this.parseMaybeUnary();\n        return this.finishNode(node, \"TSTypeAssertion\");\n      }\n    }, {\n      key: \"tsParseHeritageClause\",\n      value: function tsParseHeritageClause(descriptor) {\n        var originalStart = this.state.start;\n        var delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n        if (!delimitedList.length) {\n          this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n        }\n\n        return delimitedList;\n      }\n    }, {\n      key: \"tsParseExpressionWithTypeArguments\",\n      value: function tsParseExpressionWithTypeArguments() {\n        var node = this.startNode();\n        node.expression = this.tsParseEntityName(false);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.tsParseTypeArguments();\n        }\n\n        return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n      }\n    }, {\n      key: \"tsParseInterfaceDeclaration\",\n      value: function tsParseInterfaceDeclaration(node) {\n        if (this.match(types$1.name)) {\n          node.id = this.parseIdentifier();\n          this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n        } else {\n          node.id = null;\n          this.raise(this.state.start, TSErrors.MissingInterfaceName);\n        }\n\n        node.typeParameters = this.tsTryParseTypeParameters();\n\n        if (this.eat(types$1._extends)) {\n          node.extends = this.tsParseHeritageClause(\"extends\");\n        }\n\n        var body = this.startNode();\n        body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n        node.body = this.finishNode(body, \"TSInterfaceBody\");\n        return this.finishNode(node, \"TSInterfaceDeclaration\");\n      }\n    }, {\n      key: \"tsParseTypeAliasDeclaration\",\n      value: function tsParseTypeAliasDeclaration(node) {\n        var _this30 = this;\n\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n        node.typeParameters = this.tsTryParseTypeParameters();\n        node.typeAnnotation = this.tsInType(function () {\n          _this30.expect(types$1.eq);\n\n          if (_this30.isContextual(\"intrinsic\") && _this30.lookahead().type !== types$1.dot) {\n            var _node8 = _this30.startNode();\n\n            _this30.next();\n\n            return _this30.finishNode(_node8, \"TSIntrinsicKeyword\");\n          }\n\n          return _this30.tsParseType();\n        });\n        this.semicolon();\n        return this.finishNode(node, \"TSTypeAliasDeclaration\");\n      }\n    }, {\n      key: \"tsInNoContext\",\n      value: function tsInNoContext(cb) {\n        var oldContext = this.state.context;\n        this.state.context = [oldContext[0]];\n\n        try {\n          return cb();\n        } finally {\n          this.state.context = oldContext;\n        }\n      }\n    }, {\n      key: \"tsInType\",\n      value: function tsInType(cb) {\n        var oldInType = this.state.inType;\n        this.state.inType = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.inType = oldInType;\n        }\n      }\n    }, {\n      key: \"tsEatThenParseType\",\n      value: function tsEatThenParseType(token) {\n        return !this.match(token) ? undefined : this.tsNextThenParseType();\n      }\n    }, {\n      key: \"tsExpectThenParseType\",\n      value: function tsExpectThenParseType(token) {\n        var _this31 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this31.expect(token);\n        });\n      }\n    }, {\n      key: \"tsNextThenParseType\",\n      value: function tsNextThenParseType() {\n        var _this32 = this;\n\n        return this.tsDoThenParseType(function () {\n          return _this32.next();\n        });\n      }\n    }, {\n      key: \"tsDoThenParseType\",\n      value: function tsDoThenParseType(cb) {\n        var _this33 = this;\n\n        return this.tsInType(function () {\n          cb();\n          return _this33.tsParseType();\n        });\n      }\n    }, {\n      key: \"tsParseEnumMember\",\n      value: function tsParseEnumMember() {\n        var node = this.startNode();\n        node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n        if (this.eat(types$1.eq)) {\n          node.initializer = this.parseMaybeAssignAllowIn();\n        }\n\n        return this.finishNode(node, \"TSEnumMember\");\n      }\n    }, {\n      key: \"tsParseEnumDeclaration\",\n      value: function tsParseEnumDeclaration(node, isConst) {\n        if (isConst) node.const = true;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n        this.expect(types$1.braceL);\n        node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"TSEnumDeclaration\");\n      }\n    }, {\n      key: \"tsParseModuleBlock\",\n      value: function tsParseModuleBlock() {\n        var node = this.startNode();\n        this.scope.enter(SCOPE_OTHER);\n        this.expect(types$1.braceL);\n        this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n        this.scope.exit();\n        return this.finishNode(node, \"TSModuleBlock\");\n      }\n    }, {\n      key: \"tsParseModuleOrNamespaceDeclaration\",\n      value: function tsParseModuleOrNamespaceDeclaration(node) {\n        var nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        node.id = this.parseIdentifier();\n\n        if (!nested) {\n          this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n        }\n\n        if (this.eat(types$1.dot)) {\n          var inner = this.startNode();\n          this.tsParseModuleOrNamespaceDeclaration(inner, true);\n          node.body = inner;\n        } else {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseAmbientExternalModuleDeclaration\",\n      value: function tsParseAmbientExternalModuleDeclaration(node) {\n        if (this.isContextual(\"global\")) {\n          node.global = true;\n          node.id = this.parseIdentifier();\n        } else if (this.match(types$1.string)) {\n          node.id = this.parseExprAtom();\n        } else {\n          this.unexpected();\n        }\n\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          node.body = this.tsParseModuleBlock();\n          this.prodParam.exit();\n          this.scope.exit();\n        } else {\n          this.semicolon();\n        }\n\n        return this.finishNode(node, \"TSModuleDeclaration\");\n      }\n    }, {\n      key: \"tsParseImportEqualsDeclaration\",\n      value: function tsParseImportEqualsDeclaration(node, isExport) {\n        node.isExport = isExport || false;\n        node.id = this.parseIdentifier();\n        this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n        this.expect(types$1.eq);\n        var moduleReference = this.tsParseModuleReference();\n\n        if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n          this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n        }\n\n        node.moduleReference = moduleReference;\n        this.semicolon();\n        return this.finishNode(node, \"TSImportEqualsDeclaration\");\n      }\n    }, {\n      key: \"tsIsExternalModuleReference\",\n      value: function tsIsExternalModuleReference() {\n        return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n      }\n    }, {\n      key: \"tsParseModuleReference\",\n      value: function tsParseModuleReference() {\n        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n      }\n    }, {\n      key: \"tsParseExternalModuleReference\",\n      value: function tsParseExternalModuleReference() {\n        var node = this.startNode();\n        this.expectContextual(\"require\");\n        this.expect(types$1.parenL);\n\n        if (!this.match(types$1.string)) {\n          throw this.unexpected();\n        }\n\n        node.expression = this.parseExprAtom();\n        this.expect(types$1.parenR);\n        return this.finishNode(node, \"TSExternalModuleReference\");\n      }\n    }, {\n      key: \"tsLookAhead\",\n      value: function tsLookAhead(f) {\n        var state = this.state.clone();\n        var res = f();\n        this.state = state;\n        return res;\n      }\n    }, {\n      key: \"tsTryParseAndCatch\",\n      value: function tsTryParseAndCatch(f) {\n        var result = this.tryParse(function (abort) {\n          return f() || abort();\n        });\n        if (result.aborted || !result.node) return undefined;\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"tsTryParse\",\n      value: function tsTryParse(f) {\n        var state = this.state.clone();\n        var result = f();\n\n        if (result !== undefined && result !== false) {\n          return result;\n        } else {\n          this.state = state;\n          return undefined;\n        }\n      }\n    }, {\n      key: \"tsTryParseDeclare\",\n      value: function tsTryParseDeclare(nany) {\n        var _this34 = this;\n\n        if (this.isLineTerminator()) {\n          return;\n        }\n\n        var starttype = this.state.type;\n        var kind;\n\n        if (this.isContextual(\"let\")) {\n          starttype = types$1._var;\n          kind = \"let\";\n        }\n\n        return this.tsInAmbientContext(function () {\n          switch (starttype) {\n            case types$1._function:\n              nany.declare = true;\n              return _this34.parseFunctionStatement(nany, false, true);\n\n            case types$1._class:\n              nany.declare = true;\n              return _this34.parseClass(nany, true, false);\n\n            case types$1._const:\n              if (_this34.match(types$1._const) && _this34.isLookaheadContextual(\"enum\")) {\n                _this34.expect(types$1._const);\n\n                _this34.expectContextual(\"enum\");\n\n                return _this34.tsParseEnumDeclaration(nany, true);\n              }\n\n            case types$1._var:\n              kind = kind || _this34.state.value;\n              return _this34.parseVarStatement(nany, kind);\n\n            case types$1.name:\n              {\n                var value = _this34.state.value;\n\n                if (value === \"global\") {\n                  return _this34.tsParseAmbientExternalModuleDeclaration(nany);\n                } else {\n                  return _this34.tsParseDeclaration(nany, value, true);\n                }\n              }\n          }\n        });\n      }\n    }, {\n      key: \"tsTryParseExportDeclaration\",\n      value: function tsTryParseExportDeclaration() {\n        return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      }\n    }, {\n      key: \"tsParseExpressionStatement\",\n      value: function tsParseExpressionStatement(node, expr) {\n        switch (expr.name) {\n          case \"declare\":\n            {\n              var declaration = this.tsTryParseDeclare(node);\n\n              if (declaration) {\n                declaration.declare = true;\n                return declaration;\n              }\n\n              break;\n            }\n\n          case \"global\":\n            if (this.match(types$1.braceL)) {\n              this.scope.enter(SCOPE_TS_MODULE);\n              this.prodParam.enter(PARAM);\n              var mod = node;\n              mod.global = true;\n              mod.id = expr;\n              mod.body = this.tsParseModuleBlock();\n              this.scope.exit();\n              this.prodParam.exit();\n              return this.finishNode(mod, \"TSModuleDeclaration\");\n            }\n\n            break;\n\n          default:\n            return this.tsParseDeclaration(node, expr.name, false);\n        }\n      }\n    }, {\n      key: \"tsParseDeclaration\",\n      value: function tsParseDeclaration(node, value, next) {\n        switch (value) {\n          case \"abstract\":\n            if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n              return this.tsParseAbstractDeclaration(node);\n            }\n\n            break;\n\n          case \"enum\":\n            if (next || this.match(types$1.name)) {\n              if (next) this.next();\n              return this.tsParseEnumDeclaration(node, false);\n            }\n\n            break;\n\n          case \"interface\":\n            if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n              return this.tsParseInterfaceDeclaration(node);\n            }\n\n            break;\n\n          case \"module\":\n            if (this.tsCheckLineTerminator(next)) {\n              if (this.match(types$1.string)) {\n                return this.tsParseAmbientExternalModuleDeclaration(node);\n              } else if (this.match(types$1.name)) {\n                return this.tsParseModuleOrNamespaceDeclaration(node);\n              }\n            }\n\n            break;\n\n          case \"namespace\":\n            if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n\n            break;\n\n          case \"type\":\n            if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n              return this.tsParseTypeAliasDeclaration(node);\n            }\n\n            break;\n        }\n      }\n    }, {\n      key: \"tsCheckLineTerminator\",\n      value: function tsCheckLineTerminator(next) {\n        if (next) {\n          if (this.hasFollowingLineBreak()) return false;\n          this.next();\n          return true;\n        }\n\n        return !this.isLineTerminator();\n      }\n    }, {\n      key: \"tsTryParseGenericAsyncArrowFunction\",\n      value: function tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n        var _this35 = this;\n\n        if (!this.isRelational(\"<\")) {\n          return undefined;\n        }\n\n        var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n        this.state.maybeInArrowParameters = true;\n        var res = this.tsTryParseAndCatch(function () {\n          var node = _this35.startNodeAt(startPos, startLoc);\n\n          node.typeParameters = _this35.tsParseTypeParameters();\n\n          _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", _this35).call(_this35, node);\n\n          node.returnType = _this35.tsTryParseTypeOrTypePredicateAnnotation();\n\n          _this35.expect(types$1.arrow);\n\n          return node;\n        });\n        this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n        if (!res) {\n          return undefined;\n        }\n\n        return this.parseArrowExpression(res, null, true);\n      }\n    }, {\n      key: \"tsParseTypeArguments\",\n      value: function tsParseTypeArguments() {\n        var _this36 = this;\n\n        var node = this.startNode();\n        node.params = this.tsInType(function () {\n          return _this36.tsInNoContext(function () {\n            _this36.expectRelational(\"<\");\n\n            return _this36.tsParseDelimitedList(\"TypeParametersOrArguments\", _this36.tsParseType.bind(_this36));\n          });\n        });\n\n        if (node.params.length === 0) {\n          this.raise(node.start, TSErrors.EmptyTypeArguments);\n        }\n\n        this.expectRelational(\">\");\n        return this.finishNode(node, \"TSTypeParameterInstantiation\");\n      }\n    }, {\n      key: \"tsIsDeclarationStart\",\n      value: function tsIsDeclarationStart() {\n        if (this.match(types$1.name)) {\n          switch (this.state.value) {\n            case \"abstract\":\n            case \"declare\":\n            case \"enum\":\n            case \"interface\":\n            case \"module\":\n            case \"namespace\":\n            case \"type\":\n              return true;\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.tsIsDeclarationStart()) return false;\n        return _get(_getPrototypeOf(_class4.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"parseAssignableListItem\",\n      value: function parseAssignableListItem(allowModifiers, decorators) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var accessibility;\n        var readonly = false;\n        var override = false;\n\n        if (allowModifiers !== undefined) {\n          var modified = {};\n          this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n          accessibility = modified.accessibility;\n          override = modified.override;\n          readonly = modified.readonly;\n\n          if (allowModifiers === false && (accessibility || readonly || override)) {\n            this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n          }\n        }\n\n        var left = this.parseMaybeDefault();\n        this.parseAssignableListItemTypes(left);\n        var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n        if (accessibility || readonly || override) {\n          var pp = this.startNodeAt(startPos, startLoc);\n\n          if (decorators.length) {\n            pp.decorators = decorators;\n          }\n\n          if (accessibility) pp.accessibility = accessibility;\n          if (readonly) pp.readonly = readonly;\n          if (override) pp.override = override;\n\n          if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n            this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n          }\n\n          pp.parameter = elt;\n          return this.finishNode(pp, \"TSParameterProperty\");\n        }\n\n        if (decorators.length) {\n          left.decorators = decorators;\n        }\n\n        return elt;\n      }\n    }, {\n      key: \"parseFunctionBodyAndFinish\",\n      value: function parseFunctionBodyAndFinish(node, type) {\n        var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        if (this.match(types$1.colon)) {\n          node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        }\n\n        var bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n        if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n          this.finishNode(node, bodilessType);\n          return;\n        }\n\n        if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n          this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n          if (node.declare) {\n            _get(_getPrototypeOf(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, bodilessType, isMethod);\n\n            return;\n          }\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseFunctionBodyAndFinish\", this).call(this, node, type, isMethod);\n      }\n    }, {\n      key: \"registerFunctionStatementId\",\n      value: function registerFunctionStatementId(node) {\n        if (!node.body && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n        } else {\n          _get(_getPrototypeOf(_class4.prototype), \"registerFunctionStatementId\", this).apply(this, arguments);\n        }\n      }\n    }, {\n      key: \"tsCheckForInvalidTypeCasts\",\n      value: function tsCheckForInvalidTypeCasts(items) {\n        var _this37 = this;\n\n        items.forEach(function (node) {\n          if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n            _this37.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n          }\n        });\n      }\n    }, {\n      key: \"toReferencedList\",\n      value: function toReferencedList(exprList, isInParens) {\n        this.tsCheckForInvalidTypeCasts(exprList);\n        return exprList;\n      }\n    }, {\n      key: \"parseArrayLike\",\n      value: function parseArrayLike() {\n        var _get8;\n\n        for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n          args[_key13] = arguments[_key13];\n        }\n\n        var node = (_get8 = _get(_getPrototypeOf(_class4.prototype), \"parseArrayLike\", this)).call.apply(_get8, [this].concat(args));\n\n        if (node.type === \"ArrayExpression\") {\n          this.tsCheckForInvalidTypeCasts(node.elements);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseSubscript\",\n      value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n        var _this38 = this;\n\n        if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n          this.state.exprAllowed = false;\n          this.next();\n          var nonNullExpression = this.startNodeAt(startPos, startLoc);\n          nonNullExpression.expression = base;\n          return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n        }\n\n        var isOptionalCall = false;\n\n        if (this.match(types$1.questionDot) && this.lookaheadCharCode() === 60) {\n          if (noCalls) {\n            state.stop = true;\n            return base;\n          }\n\n          state.optionalChainMember = isOptionalCall = true;\n          this.next();\n        }\n\n        if (this.isRelational(\"<\")) {\n          var missingParenErrorPos;\n          var result = this.tsTryParseAndCatch(function () {\n            if (!noCalls && _this38.atPossibleAsyncArrow(base)) {\n              var asyncArrowFn = _this38.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n              if (asyncArrowFn) {\n                return asyncArrowFn;\n              }\n            }\n\n            var node = _this38.startNodeAt(startPos, startLoc);\n\n            node.callee = base;\n\n            var typeArguments = _this38.tsParseTypeArguments();\n\n            if (typeArguments) {\n              if (isOptionalCall && !_this38.match(types$1.parenL)) {\n                missingParenErrorPos = _this38.state.pos;\n\n                _this38.unexpected();\n              }\n\n              if (!noCalls && _this38.eat(types$1.parenL)) {\n                node.arguments = _this38.parseCallExpressionArguments(types$1.parenR, false);\n\n                _this38.tsCheckForInvalidTypeCasts(node.arguments);\n\n                node.typeParameters = typeArguments;\n\n                if (state.optionalChainMember) {\n                  node.optional = isOptionalCall;\n                }\n\n                return _this38.finishCallExpression(node, state.optionalChainMember);\n              } else if (_this38.match(types$1.backQuote)) {\n                var _result = _this38.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n\n                _result.typeParameters = typeArguments;\n                return _result;\n              }\n            }\n\n            _this38.unexpected();\n          });\n\n          if (missingParenErrorPos) {\n            this.unexpected(missingParenErrorPos, types$1.parenL);\n          }\n\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseSubscript\", this).call(this, base, startPos, startLoc, noCalls, state);\n      }\n    }, {\n      key: \"parseNewArguments\",\n      value: function parseNewArguments(node) {\n        var _this39 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeParameters = this.tsTryParseAndCatch(function () {\n            var args = _this39.tsParseTypeArguments();\n\n            if (!_this39.match(types$1.parenL)) _this39.unexpected();\n            return args;\n          });\n\n          if (typeParameters) {\n            node.typeParameters = typeParameters;\n          }\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseNewArguments\", this).call(this, node);\n      }\n    }, {\n      key: \"parseExprOp\",\n      value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n        if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.expression = left;\n\n          var _const = this.tsTryNextParseConstantContext();\n\n          if (_const) {\n            node.typeAnnotation = _const;\n          } else {\n            node.typeAnnotation = this.tsNextThenParseType();\n          }\n\n          this.finishNode(node, \"TSAsExpression\");\n          this.reScan_lt_gt();\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseExprOp\", this).call(this, left, leftStartPos, leftStartLoc, minPrec);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n    }, {\n      key: \"checkDuplicateExports\",\n      value: function checkDuplicateExports() {}\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        node.importKind = \"value\";\n\n        if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n          var ahead = this.lookahead();\n\n          if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n            node.importKind = \"type\";\n            this.next();\n            ahead = this.lookahead();\n          }\n\n          if (this.match(types$1.name) && ahead.type === types$1.eq) {\n            return this.tsParseImportEqualsDeclaration(node);\n          }\n        }\n\n        var importNode = _get(_getPrototypeOf(_class4.prototype), \"parseImport\", this).call(this, node);\n\n        if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n          this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n        }\n\n        return importNode;\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        if (this.match(types$1._import)) {\n          this.next();\n\n          if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n            node.importKind = \"type\";\n            this.next();\n          } else {\n            node.importKind = \"value\";\n          }\n\n          return this.tsParseImportEqualsDeclaration(node, true);\n        } else if (this.eat(types$1.eq)) {\n          var assign = node;\n          assign.expression = this.parseExpression();\n          this.semicolon();\n          return this.finishNode(assign, \"TSExportAssignment\");\n        } else if (this.eatContextual(\"as\")) {\n          var decl = node;\n          this.expectContextual(\"namespace\");\n          decl.id = this.parseIdentifier();\n          this.semicolon();\n          return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n        } else {\n          if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n            this.next();\n            node.exportKind = \"type\";\n          } else {\n            node.exportKind = \"value\";\n          }\n\n          return _get(_getPrototypeOf(_class4.prototype), \"parseExport\", this).call(this, node);\n        }\n      }\n    }, {\n      key: \"isAbstractClass\",\n      value: function isAbstractClass() {\n        return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n      }\n    }, {\n      key: \"parseExportDefaultExpression\",\n      value: function parseExportDefaultExpression() {\n        if (this.isAbstractClass()) {\n          var cls = this.startNode();\n          this.next();\n          cls.abstract = true;\n          this.parseClass(cls, true, true);\n          return cls;\n        }\n\n        if (this.state.value === \"interface\") {\n          var interfaceNode = this.startNode();\n          this.next();\n          var result = this.tsParseInterfaceDeclaration(interfaceNode);\n          if (result) return result;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseExportDefaultExpression\", this).call(this);\n      }\n    }, {\n      key: \"parseStatementContent\",\n      value: function parseStatementContent(context, topLevel) {\n        if (this.state.type === types$1._const) {\n          var ahead = this.lookahead();\n\n          if (ahead.type === types$1.name && ahead.value === \"enum\") {\n            var node = this.startNode();\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(node, true);\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseStatementContent\", this).call(this, context, topLevel);\n      }\n    }, {\n      key: \"parseAccessModifier\",\n      value: function parseAccessModifier() {\n        return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n      }\n    }, {\n      key: \"tsHasSomeModifiers\",\n      value: function tsHasSomeModifiers(member, modifiers) {\n        return modifiers.some(function (modifier) {\n          if (tsIsAccessModifier(modifier)) {\n            return member.accessibility === modifier;\n          }\n\n          return !!member[modifier];\n        });\n      }\n    }, {\n      key: \"parseClassMember\",\n      value: function parseClassMember(classBody, member, state) {\n        var _this40 = this;\n\n        var invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n        this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n        var callParseClassMemberWithIsStatic = function callParseClassMemberWithIsStatic() {\n          var isStatic = !!member.static;\n\n          if (isStatic && _this40.eat(types$1.braceL)) {\n            if (_this40.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n              _this40.raise(_this40.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n            }\n\n            _this40.parseClassStaticBlock(classBody, member);\n          } else {\n            _this40.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n          }\n        };\n\n        if (member.declare) {\n          this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n        } else {\n          callParseClassMemberWithIsStatic();\n        }\n      }\n    }, {\n      key: \"parseClassMemberWithIsStatic\",\n      value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n        var idx = this.tsTryParseIndexSignature(member);\n\n        if (idx) {\n          classBody.body.push(idx);\n\n          if (member.abstract) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n          }\n\n          if (member.accessibility) {\n            this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n          }\n\n          if (member.declare) {\n            this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n          }\n\n          if (member.override) {\n            this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n          }\n\n          return;\n        }\n\n        if (!this.state.inAbstractClass && member.abstract) {\n          this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n        }\n\n        if (member.override) {\n          if (!state.hadSuperClass) {\n            this.raise(member.start, TSErrors.OverrideNotInSubClass);\n          }\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassMemberWithIsStatic\", this).call(this, classBody, member, state, isStatic);\n      }\n    }, {\n      key: \"parsePostMemberNameModifiers\",\n      value: function parsePostMemberNameModifiers(methodOrProp) {\n        var optional = this.eat(types$1.question);\n        if (optional) methodOrProp.optional = true;\n\n        if (methodOrProp.readonly && this.match(types$1.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n        }\n\n        if (methodOrProp.declare && this.match(types$1.parenL)) {\n          this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n        }\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        var decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n        return decl || _get(_getPrototypeOf(_class4.prototype), \"parseExpressionStatement\", this).call(this, node, expr);\n      }\n    }, {\n      key: \"shouldParseExportDeclaration\",\n      value: function shouldParseExportDeclaration() {\n        if (this.tsIsDeclarationStart()) return true;\n        return _get(_getPrototypeOf(_class4.prototype), \"shouldParseExportDeclaration\", this).call(this);\n      }\n    }, {\n      key: \"parseConditional\",\n      value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n        var _this41 = this;\n\n        if (!this.state.maybeInArrowParameters || !this.match(types$1.question)) {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", this).call(this, expr, startPos, startLoc, refExpressionErrors);\n        }\n\n        var result = this.tryParse(function () {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseConditional\", _this41).call(_this41, expr, startPos, startLoc);\n        });\n\n        if (!result.node) {\n          if (result.error) {\n            _get(_getPrototypeOf(_class4.prototype), \"setOptionalParametersError\", this).call(this, refExpressionErrors, result.error);\n          }\n\n          return expr;\n        }\n\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }, {\n      key: \"parseParenItem\",\n      value: function parseParenItem(node, startPos, startLoc) {\n        node = _get(_getPrototypeOf(_class4.prototype), \"parseParenItem\", this).call(this, node, startPos, startLoc);\n\n        if (this.eat(types$1.question)) {\n          node.optional = true;\n          this.resetEndLocation(node);\n        }\n\n        if (this.match(types$1.colon)) {\n          var typeCastNode = this.startNodeAt(startPos, startLoc);\n          typeCastNode.expression = node;\n          typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n          return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n        }\n\n        return node;\n      }\n    }, {\n      key: \"parseExportDeclaration\",\n      value: function parseExportDeclaration(node) {\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var isDeclare = this.eatContextual(\"declare\");\n\n        if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n          throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n        }\n\n        var declaration;\n\n        if (this.match(types$1.name)) {\n          declaration = this.tsTryParseExportDeclaration();\n        }\n\n        if (!declaration) {\n          declaration = _get(_getPrototypeOf(_class4.prototype), \"parseExportDeclaration\", this).call(this, node);\n        }\n\n        if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n          node.exportKind = \"type\";\n        }\n\n        if (declaration && isDeclare) {\n          this.resetStartLocation(declaration, startPos, startLoc);\n          declaration.declare = true;\n        }\n\n        return declaration;\n      }\n    }, {\n      key: \"parseClassId\",\n      value: function parseClassId(node, isStatement, optionalId) {\n        if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n          return;\n        }\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassId\", this).call(this, node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n      }\n    }, {\n      key: \"parseClassPropertyAnnotation\",\n      value: function parseClassPropertyAnnotation(node) {\n        if (!node.optional && this.eat(types$1.bang)) {\n          node.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) node.typeAnnotation = type;\n      }\n    }, {\n      key: \"parseClassProperty\",\n      value: function parseClassProperty(node) {\n        this.parseClassPropertyAnnotation(node);\n\n        if (this.state.isAmbientContext && this.match(types$1.eq)) {\n          this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n        }\n\n        if (node.abstract && this.match(types$1.eq)) {\n          var key = node.key;\n          this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\"));\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseClassProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"parseClassPrivateProperty\",\n      value: function parseClassPrivateProperty(node) {\n        if (node.abstract) {\n          this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n        }\n\n        if (node.accessibility) {\n          this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n        }\n\n        this.parseClassPropertyAnnotation(node);\n        return _get(_getPrototypeOf(_class4.prototype), \"parseClassPrivateProperty\", this).call(this, node);\n      }\n    }, {\n      key: \"pushClassMethod\",\n      value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n        var typeParameters = this.tsTryParseTypeParameters();\n\n        if (typeParameters && isConstructor) {\n          this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n        }\n\n        if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n          this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n        }\n\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"pushClassMethod\", this).call(this, classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n      }\n    }, {\n      key: \"pushClassPrivateMethod\",\n      value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) method.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"pushClassPrivateMethod\", this).call(this, classBody, method, isGenerator, isAsync);\n      }\n    }, {\n      key: \"parseClassSuper\",\n      value: function parseClassSuper(node) {\n        _get(_getPrototypeOf(_class4.prototype), \"parseClassSuper\", this).call(this, node);\n\n        if (node.superClass && this.isRelational(\"<\")) {\n          node.superTypeParameters = this.tsParseTypeArguments();\n        }\n\n        if (this.eatContextual(\"implements\")) {\n          node.implements = this.tsParseHeritageClause(\"implements\");\n        }\n      }\n    }, {\n      key: \"parseObjPropValue\",\n      value: function parseObjPropValue(prop) {\n        var _get9;\n\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) prop.typeParameters = typeParameters;\n\n        for (var _len14 = arguments.length, args = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n          args[_key14 - 1] = arguments[_key14];\n        }\n\n        (_get9 = _get(_getPrototypeOf(_class4.prototype), \"parseObjPropValue\", this)).call.apply(_get9, [this, prop].concat(args));\n      }\n    }, {\n      key: \"parseFunctionParams\",\n      value: function parseFunctionParams(node, allowModifiers) {\n        var typeParameters = this.tsTryParseTypeParameters();\n        if (typeParameters) node.typeParameters = typeParameters;\n\n        _get(_getPrototypeOf(_class4.prototype), \"parseFunctionParams\", this).call(this, node, allowModifiers);\n      }\n    }, {\n      key: \"parseVarId\",\n      value: function parseVarId(decl, kind) {\n        _get(_getPrototypeOf(_class4.prototype), \"parseVarId\", this).call(this, decl, kind);\n\n        if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n          decl.definite = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          decl.id.typeAnnotation = type;\n          this.resetEndLocation(decl.id);\n        }\n      }\n    }, {\n      key: \"parseAsyncArrowFromCallExpression\",\n      value: function parseAsyncArrowFromCallExpression(node, call) {\n        if (this.match(types$1.colon)) {\n          node.returnType = this.tsParseTypeAnnotation();\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseAsyncArrowFromCallExpression\", this).call(this, node, call);\n      }\n    }, {\n      key: \"parseMaybeAssign\",\n      value: function parseMaybeAssign() {\n        var _this42 = this;\n\n        for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n          args[_key15] = arguments[_key15];\n        }\n\n        var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n        var state;\n        var jsx;\n        var typeCast;\n\n        if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n          state = this.state.clone();\n          jsx = this.tryParse(function () {\n            var _get10;\n\n            return (_get10 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this42)).call.apply(_get10, [_this42].concat(args));\n          }, state);\n          if (!jsx.error) return jsx.node;\n          var context = this.state.context;\n\n          if (context[context.length - 1] === types.j_oTag) {\n            context.length -= 2;\n          } else if (context[context.length - 1] === types.j_expr) {\n            context.length -= 1;\n          }\n        }\n\n        if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n          var _get11;\n\n          return (_get11 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", this)).call.apply(_get11, [this].concat(args));\n        }\n\n        var typeParameters;\n        state = state || this.state.clone();\n        var arrow = this.tryParse(function (abort) {\n          var _get12;\n\n          var _expr$extra, _typeParameters;\n\n          typeParameters = _this42.tsParseTypeParameters();\n\n          var expr = (_get12 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this42)).call.apply(_get12, [_this42].concat(args));\n\n          if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n            abort();\n          }\n\n          if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n            _this42.resetStartLocationFromNode(expr, typeParameters);\n          }\n\n          expr.typeParameters = typeParameters;\n          return expr;\n        }, state);\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        if (!jsx) {\n          assert(!this.hasPlugin(\"jsx\"));\n          typeCast = this.tryParse(function () {\n            var _get13;\n\n            return (_get13 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeAssign\", _this42)).call.apply(_get13, [_this42].concat(args));\n          }, state);\n          if (!typeCast.error) return typeCast.node;\n        }\n\n        if ((_jsx2 = jsx) != null && _jsx2.node) {\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if ((_typeCast = typeCast) != null && _typeCast.node) {\n          this.state = typeCast.failState;\n          return typeCast.node;\n        }\n\n        if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n        if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n        throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n      }\n    }, {\n      key: \"parseMaybeUnary\",\n      value: function parseMaybeUnary(refExpressionErrors) {\n        if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n          return this.tsParseTypeAssertion();\n        } else {\n          return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeUnary\", this).call(this, refExpressionErrors);\n        }\n      }\n    }, {\n      key: \"parseArrow\",\n      value: function parseArrow(node) {\n        var _this43 = this;\n\n        if (this.match(types$1.colon)) {\n          var result = this.tryParse(function (abort) {\n            var returnType = _this43.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n\n            if (_this43.canInsertSemicolon() || !_this43.match(types$1.arrow)) abort();\n            return returnType;\n          });\n          if (result.aborted) return;\n\n          if (!result.thrown) {\n            if (result.error) this.state = result.failState;\n            node.returnType = result.node;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseArrow\", this).call(this, node);\n      }\n    }, {\n      key: \"parseAssignableListItemTypes\",\n      value: function parseAssignableListItemTypes(param) {\n        if (this.eat(types$1.question)) {\n          if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n            this.raise(param.start, TSErrors.PatternIsOptional);\n          }\n\n          param.optional = true;\n        }\n\n        var type = this.tsTryParseTypeAnnotation();\n        if (type) param.typeAnnotation = type;\n        this.resetEndLocation(param);\n        return param;\n      }\n    }, {\n      key: \"isAssignable\",\n      value: function isAssignable(node, isBinding) {\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return this.isAssignable(node.expression, isBinding);\n\n          case \"TSParameterProperty\":\n            return true;\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"isAssignable\", this).call(this, node, isBinding);\n        }\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        switch (node.type) {\n          case \"TSTypeCastExpression\":\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, this.typeCastToParameter(node), isLHS);\n\n          case \"TSParameterProperty\":\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node, isLHS);\n\n          case \"ParenthesizedExpression\":\n            return this.toAssignableParenthesizedExpression(node, isLHS);\n\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n            node.expression = this.toAssignable(node.expression, isLHS);\n            return node;\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"toAssignableParenthesizedExpression\",\n      value: function toAssignableParenthesizedExpression(node, isLHS) {\n        switch (node.expression.type) {\n          case \"TSAsExpression\":\n          case \"TSNonNullExpression\":\n          case \"TSTypeAssertion\":\n          case \"ParenthesizedExpression\":\n            node.expression = this.toAssignable(node.expression, isLHS);\n            return node;\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"toAssignable\", this).call(this, node, isLHS);\n        }\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr, contextDescription) {\n        var _get14;\n\n        var _expr$extra2;\n\n        for (var _len16 = arguments.length, args = new Array(_len16 > 2 ? _len16 - 2 : 0), _key16 = 2; _key16 < _len16; _key16++) {\n          args[_key16 - 2] = arguments[_key16];\n        }\n\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            return;\n\n          case \"TSParameterProperty\":\n            this.checkLVal.apply(this, [expr.parameter, \"parameter property\"].concat(args));\n            return;\n\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n              this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n              break;\n            }\n\n            this.checkLVal.apply(this, [expr.expression, \"parenthesized expression\"].concat(args));\n            return;\n\n          case \"TSNonNullExpression\":\n            this.checkLVal.apply(this, [expr.expression, contextDescription].concat(args));\n            return;\n\n          default:\n            (_get14 = _get(_getPrototypeOf(_class4.prototype), \"checkLVal\", this)).call.apply(_get14, [this, expr, contextDescription].concat(args));\n\n            return;\n        }\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        switch (this.state.type) {\n          case types$1._this:\n            return this.parseIdentifier(true);\n\n          default:\n            return _get(_getPrototypeOf(_class4.prototype), \"parseBindingAtom\", this).call(this);\n        }\n      }\n    }, {\n      key: \"parseMaybeDecoratorArguments\",\n      value: function parseMaybeDecoratorArguments(expr) {\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsParseTypeArguments();\n\n          if (this.match(types$1.parenL)) {\n            var call = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n\n            call.typeParameters = typeArguments;\n            return call;\n          }\n\n          this.unexpected(this.state.start, types$1.parenL);\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDecoratorArguments\", this).call(this, expr);\n      }\n    }, {\n      key: \"checkCommaAfterRest\",\n      value: function checkCommaAfterRest(close) {\n        if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n          this.next();\n        } else {\n          _get(_getPrototypeOf(_class4.prototype), \"checkCommaAfterRest\", this).call(this, close);\n        }\n      }\n    }, {\n      key: \"isClassMethod\",\n      value: function isClassMethod() {\n        return this.isRelational(\"<\") || _get(_getPrototypeOf(_class4.prototype), \"isClassMethod\", this).call(this);\n      }\n    }, {\n      key: \"isClassProperty\",\n      value: function isClassProperty() {\n        return this.match(types$1.bang) || this.match(types$1.colon) || _get(_getPrototypeOf(_class4.prototype), \"isClassProperty\", this).call(this);\n      }\n    }, {\n      key: \"parseMaybeDefault\",\n      value: function parseMaybeDefault() {\n        var _get15;\n\n        for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n          args[_key17] = arguments[_key17];\n        }\n\n        var node = (_get15 = _get(_getPrototypeOf(_class4.prototype), \"parseMaybeDefault\", this)).call.apply(_get15, [this].concat(args));\n\n        if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n          this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n        }\n\n        return node;\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (this.state.inType && (code === 62 || code === 60)) {\n          return this.finishOp(types$1.relational, 1);\n        } else {\n          return _get(_getPrototypeOf(_class4.prototype), \"getTokenFromCode\", this).call(this, code);\n        }\n      }\n    }, {\n      key: \"reScan_lt_gt\",\n      value: function reScan_lt_gt() {\n        if (this.match(types$1.relational)) {\n          var code = this.input.charCodeAt(this.state.start);\n\n          if (code === 60 || code === 62) {\n            this.state.pos -= 1;\n            this.readToken_lt_gt(code);\n          }\n        }\n      }\n    }, {\n      key: \"toAssignableList\",\n      value: function toAssignableList(exprList) {\n        for (var i = 0; i < exprList.length; i++) {\n          var expr = exprList[i];\n          if (!expr) continue;\n\n          switch (expr.type) {\n            case \"TSTypeCastExpression\":\n              exprList[i] = this.typeCastToParameter(expr);\n              break;\n\n            case \"TSAsExpression\":\n            case \"TSTypeAssertion\":\n              if (!this.state.maybeInArrowParameters) {\n                exprList[i] = this.typeCastToParameter(expr);\n              } else {\n                this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n              }\n\n              break;\n          }\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"toAssignableList\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"typeCastToParameter\",\n      value: function typeCastToParameter(node) {\n        node.expression.typeAnnotation = node.typeAnnotation;\n        this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n        return node.expression;\n      }\n    }, {\n      key: \"shouldParseArrow\",\n      value: function shouldParseArrow(params) {\n        var _this44 = this;\n\n        if (this.match(types$1.colon)) {\n          return params.every(function (expr) {\n            return _this44.isAssignable(expr, true);\n          });\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"shouldParseArrow\", this).call(this, params);\n      }\n    }, {\n      key: \"shouldParseAsyncArrow\",\n      value: function shouldParseAsyncArrow() {\n        return this.match(types$1.colon) || _get(_getPrototypeOf(_class4.prototype), \"shouldParseAsyncArrow\", this).call(this);\n      }\n    }, {\n      key: \"canHaveLeadingDecorator\",\n      value: function canHaveLeadingDecorator() {\n        return _get(_getPrototypeOf(_class4.prototype), \"canHaveLeadingDecorator\", this).call(this) || this.isAbstractClass();\n      }\n    }, {\n      key: \"jsxParseOpeningElementAfterName\",\n      value: function jsxParseOpeningElementAfterName(node) {\n        var _this45 = this;\n\n        if (this.isRelational(\"<\")) {\n          var typeArguments = this.tsTryParseAndCatch(function () {\n            return _this45.tsParseTypeArguments();\n          });\n          if (typeArguments) node.typeParameters = typeArguments;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"jsxParseOpeningElementAfterName\", this).call(this, node);\n      }\n    }, {\n      key: \"getGetterSetterExpectedParamCount\",\n      value: function getGetterSetterExpectedParamCount(method) {\n        var baseCount = _get(_getPrototypeOf(_class4.prototype), \"getGetterSetterExpectedParamCount\", this).call(this, method);\n\n        var params = this.getObjectOrClassMethodParams(method);\n        var firstParam = params[0];\n        var hasContextParam = firstParam && this.isThisParam(firstParam);\n        return hasContextParam ? baseCount + 1 : baseCount;\n      }\n    }, {\n      key: \"parseCatchClauseParam\",\n      value: function parseCatchClauseParam() {\n        var param = _get(_getPrototypeOf(_class4.prototype), \"parseCatchClauseParam\", this).call(this);\n\n        var type = this.tsTryParseTypeAnnotation();\n\n        if (type) {\n          param.typeAnnotation = type;\n          this.resetEndLocation(param);\n        }\n\n        return param;\n      }\n    }, {\n      key: \"tsInAmbientContext\",\n      value: function tsInAmbientContext(cb) {\n        var oldIsAmbientContext = this.state.isAmbientContext;\n        this.state.isAmbientContext = true;\n\n        try {\n          return cb();\n        } finally {\n          this.state.isAmbientContext = oldIsAmbientContext;\n        }\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node) {\n        var oldInAbstractClass = this.state.inAbstractClass;\n        this.state.inAbstractClass = !!node.abstract;\n\n        try {\n          var _get16;\n\n          for (var _len18 = arguments.length, args = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {\n            args[_key18 - 1] = arguments[_key18];\n          }\n\n          return (_get16 = _get(_getPrototypeOf(_class4.prototype), \"parseClass\", this)).call.apply(_get16, [this, node].concat(args));\n        } finally {\n          this.state.inAbstractClass = oldInAbstractClass;\n        }\n      }\n    }, {\n      key: \"tsParseAbstractDeclaration\",\n      value: function tsParseAbstractDeclaration(node) {\n        if (this.match(types$1._class)) {\n          node.abstract = true;\n          return this.parseClass(node, true, false);\n        } else if (this.isContextual(\"interface\")) {\n          if (!this.hasFollowingLineBreak()) {\n            node.abstract = true;\n            this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n            this.next();\n            return this.tsParseInterfaceDeclaration(node);\n          }\n        } else {\n          this.unexpected(null, types$1._class);\n        }\n      }\n    }, {\n      key: \"parseMethod\",\n      value: function parseMethod() {\n        var _get17;\n\n        for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n          args[_key19] = arguments[_key19];\n        }\n\n        var method = (_get17 = _get(_getPrototypeOf(_class4.prototype), \"parseMethod\", this)).call.apply(_get17, [this].concat(args));\n\n        if (method.abstract) {\n          var hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n          if (hasBody) {\n            var key = method.key;\n            this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : \"[\".concat(this.input.slice(key.start, key.end), \"]\"));\n          }\n        }\n\n        return method;\n      }\n    }, {\n      key: \"tsParseTypeParameterName\",\n      value: function tsParseTypeParameterName() {\n        var typeName = this.parseIdentifier();\n        return typeName.name;\n      }\n    }, {\n      key: \"shouldParseAsAmbientContext\",\n      value: function shouldParseAsAmbientContext() {\n        return !!this.getPluginOption(\"typescript\", \"dts\");\n      }\n    }, {\n      key: \"parse\",\n      value: function parse() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"parse\", this).call(this);\n      }\n    }, {\n      key: \"getExpression\",\n      value: function getExpression() {\n        if (this.shouldParseAsAmbientContext()) {\n          this.state.isAmbientContext = true;\n        }\n\n        return _get(_getPrototypeOf(_class4.prototype), \"getExpression\", this).call(this);\n      }\n    }]);\n\n    return _class4;\n  }(superClass);\n};\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = function placeholders(superClass) {\n  return /*#__PURE__*/function (_superClass5) {\n    _inherits(_class5, _superClass5);\n\n    var _super15 = _createSuper(_class5);\n\n    function _class5() {\n      _classCallCheck(this, _class5);\n\n      return _super15.apply(this, arguments);\n    }\n\n    _createClass(_class5, [{\n      key: \"parsePlaceholder\",\n      value: function parsePlaceholder(expectedNode) {\n        if (this.match(types$1.placeholder)) {\n          var node = this.startNode();\n          this.next();\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          node.name = _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).call(this, true);\n          this.assertNoSpace(\"Unexpected space in placeholder.\");\n          this.expect(types$1.placeholder);\n          return this.finishPlaceholder(node, expectedNode);\n        }\n      }\n    }, {\n      key: \"finishPlaceholder\",\n      value: function finishPlaceholder(node, expectedNode) {\n        var isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n        node.expectedNode = expectedNode;\n        return isFinished ? node : this.finishNode(node, \"Placeholder\");\n      }\n    }, {\n      key: \"getTokenFromCode\",\n      value: function getTokenFromCode(code) {\n        if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n          return this.finishOp(types$1.placeholder, 2);\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"getTokenFromCode\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parsePlaceholder(\"Expression\") || _get(_getPrototypeOf(_class5.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseIdentifier\",\n      value: function parseIdentifier() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseIdentifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkReservedWord\",\n      value: function checkReservedWord(word) {\n        if (word !== undefined) _get(_getPrototypeOf(_class5.prototype), \"checkReservedWord\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseBindingAtom\",\n      value: function parseBindingAtom() {\n        return this.parsePlaceholder(\"Pattern\") || _get(_getPrototypeOf(_class5.prototype), \"parseBindingAtom\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkLVal\",\n      value: function checkLVal(expr) {\n        if (expr.type !== \"Placeholder\") _get(_getPrototypeOf(_class5.prototype), \"checkLVal\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"toAssignable\",\n      value: function toAssignable(node) {\n        if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n          node.expectedNode = \"Pattern\";\n          return node;\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"toAssignable\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"isLet\",\n      value: function isLet(context) {\n        if (_get(_getPrototypeOf(_class5.prototype), \"isLet\", this).call(this, context)) {\n          return true;\n        }\n\n        if (!this.isContextual(\"let\")) {\n          return false;\n        }\n\n        if (context) return false;\n        var nextToken = this.lookahead();\n\n        if (nextToken.type === types$1.placeholder) {\n          return true;\n        }\n\n        return false;\n      }\n    }, {\n      key: \"verifyBreakContinue\",\n      value: function verifyBreakContinue(node) {\n        if (node.label && node.label.type === \"Placeholder\") return;\n\n        _get(_getPrototypeOf(_class5.prototype), \"verifyBreakContinue\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseExpressionStatement\",\n      value: function parseExpressionStatement(node, expr) {\n        if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n          return _get(_getPrototypeOf(_class5.prototype), \"parseExpressionStatement\", this).apply(this, arguments);\n        }\n\n        if (this.match(types$1.colon)) {\n          var stmt = node;\n          stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n          this.next();\n          stmt.body = this.parseStatement(\"label\");\n          return this.finishNode(stmt, \"LabeledStatement\");\n        }\n\n        this.semicolon();\n        node.name = expr.name;\n        return this.finishPlaceholder(node, \"Statement\");\n      }\n    }, {\n      key: \"parseBlock\",\n      value: function parseBlock() {\n        return this.parsePlaceholder(\"BlockStatement\") || _get(_getPrototypeOf(_class5.prototype), \"parseBlock\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseFunctionId\",\n      value: function parseFunctionId() {\n        return this.parsePlaceholder(\"Identifier\") || _get(_getPrototypeOf(_class5.prototype), \"parseFunctionId\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"parseClass\",\n      value: function parseClass(node, isStatement, optionalId) {\n        var type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n        this.next();\n        this.takeDecorators(node);\n        var oldStrict = this.state.strict;\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n\n        if (placeholder) {\n          if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n            node.id = placeholder;\n          } else if (optionalId || !isStatement) {\n            node.id = null;\n            node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n            return this.finishNode(node, type);\n          } else {\n            this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n          }\n        } else {\n          this.parseClassId(node, isStatement, optionalId);\n        }\n\n        this.parseClassSuper(node);\n        node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n        return this.finishNode(node, type);\n      }\n    }, {\n      key: \"parseExport\",\n      value: function parseExport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).apply(this, arguments);\n\n        if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n          node.specifiers = [];\n          node.source = null;\n          node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n          return this.finishNode(node, \"ExportNamedDeclaration\");\n        }\n\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = placeholder;\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return _get(_getPrototypeOf(_class5.prototype), \"parseExport\", this).call(this, node);\n      }\n    }, {\n      key: \"isExportDefaultSpecifier\",\n      value: function isExportDefaultSpecifier() {\n        if (this.match(types$1._default)) {\n          var next = this.nextTokenStart();\n\n          if (this.isUnparsedContextual(next, \"from\")) {\n            if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n              return true;\n            }\n          }\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"isExportDefaultSpecifier\", this).call(this);\n      }\n    }, {\n      key: \"maybeParseExportDefaultSpecifier\",\n      value: function maybeParseExportDefaultSpecifier(node) {\n        if (node.specifiers && node.specifiers.length > 0) {\n          return true;\n        }\n\n        return _get(_getPrototypeOf(_class5.prototype), \"maybeParseExportDefaultSpecifier\", this).apply(this, arguments);\n      }\n    }, {\n      key: \"checkExport\",\n      value: function checkExport(node) {\n        var specifiers = node.specifiers;\n\n        if (specifiers != null && specifiers.length) {\n          node.specifiers = specifiers.filter(function (node) {\n            return node.exported.type === \"Placeholder\";\n          });\n        }\n\n        _get(_getPrototypeOf(_class5.prototype), \"checkExport\", this).call(this, node);\n\n        node.specifiers = specifiers;\n      }\n    }, {\n      key: \"parseImport\",\n      value: function parseImport(node) {\n        var placeholder = this.parsePlaceholder(\"Identifier\");\n        if (!placeholder) return _get(_getPrototypeOf(_class5.prototype), \"parseImport\", this).apply(this, arguments);\n        node.specifiers = [];\n\n        if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n          node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n          this.semicolon();\n          return this.finishNode(node, \"ImportDeclaration\");\n        }\n\n        var specifier = this.startNodeAtNode(placeholder);\n        specifier.local = placeholder;\n        this.finishNode(specifier, \"ImportDefaultSpecifier\");\n        node.specifiers.push(specifier);\n\n        if (this.eat(types$1.comma)) {\n          var hasStarImport = this.maybeParseStarImportSpecifier(node);\n          if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n        }\n\n        this.expectContextual(\"from\");\n        node.source = this.parseImportSource();\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n    }, {\n      key: \"parseImportSource\",\n      value: function parseImportSource() {\n        return this.parsePlaceholder(\"StringLiteral\") || _get(_getPrototypeOf(_class5.prototype), \"parseImportSource\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class5;\n  }(superClass);\n};\n\nvar v8intrinsic = function v8intrinsic(superClass) {\n  return /*#__PURE__*/function (_superClass6) {\n    _inherits(_class6, _superClass6);\n\n    var _super16 = _createSuper(_class6);\n\n    function _class6() {\n      _classCallCheck(this, _class6);\n\n      return _super16.apply(this, arguments);\n    }\n\n    _createClass(_class6, [{\n      key: \"parseV8Intrinsic\",\n      value: function parseV8Intrinsic() {\n        if (this.match(types$1.modulo)) {\n          var v8IntrinsicStart = this.state.start;\n          var node = this.startNode();\n          this.eat(types$1.modulo);\n\n          if (this.match(types$1.name)) {\n            var name = this.parseIdentifierName(this.state.start);\n            var identifier = this.createIdentifier(node, name);\n            identifier.type = \"V8IntrinsicIdentifier\";\n\n            if (this.match(types$1.parenL)) {\n              return identifier;\n            }\n          }\n\n          this.unexpected(v8IntrinsicStart);\n        }\n      }\n    }, {\n      key: \"parseExprAtom\",\n      value: function parseExprAtom() {\n        return this.parseV8Intrinsic() || _get(_getPrototypeOf(_class6.prototype), \"parseExprAtom\", this).apply(this, arguments);\n      }\n    }]);\n\n    return _class6;\n  }(superClass);\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  var plugin = plugins.find(function (plugin) {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nvar PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nvar TOPIC_TOKENS = [\"%\", \"#\"];\nvar RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    var decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    var proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      var proposalList = PIPELINE_PROPOSALS.map(function (p) {\n        return \"\\\"\".concat(p, \"\\\"\");\n      }).join(\", \");\n      throw new Error(\"\\\"pipelineOperator\\\" requires \\\"proposal\\\" option whose value must be one of: \".concat(proposalList, \".\"));\n    }\n\n    var tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      var topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        var tokenList = TOPIC_TOKENS.map(function (t) {\n          return \"\\\"\".concat(t, \"\\\"\");\n        }).join(\", \");\n        throw new Error(\"\\\"pipelineOperator\\\" in \\\"proposal\\\": \\\"hack\\\" mode also requires a \\\"topicToken\\\" option whose value must be one of: \".concat(tokenList, \".\"));\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      var moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(function (p) {\n      return \"'\".concat(p, \"'\");\n    }).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    var error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nvar mixinPlugins = {\n  estree: estree,\n  jsx: jsx,\n  flow: flow,\n  typescript: typescript,\n  v8intrinsic: v8intrinsic,\n  placeholders: placeholders\n};\nvar mixinPluginNames = Object.keys(mixinPlugins);\nvar defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var _i2 = 0, _Object$keys = Object.keys(defaultOptions); _i2 < _Object$keys.length; _i2++) {\n    var key = _Object$keys[_i2];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nvar unwrapParenthesizedExpression = function unwrapParenthesizedExpression(node) {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nvar LValParser = /*#__PURE__*/function (_NodeUtils) {\n  _inherits(LValParser, _NodeUtils);\n\n  var _super17 = _createSuper(LValParser);\n\n  function LValParser() {\n    _classCallCheck(this, LValParser);\n\n    return _super17.apply(this, arguments);\n  }\n\n  _createClass(LValParser, [{\n    key: \"toAssignable\",\n    value: function toAssignable(node) {\n      var isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _node$extra, _node$extra3;\n\n      var parenthesized = undefined;\n\n      if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n        parenthesized = unwrapParenthesizedExpression(node);\n\n        if (isLHS) {\n          if (parenthesized.type === \"Identifier\") {\n            this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n          } else if (parenthesized.type !== \"MemberExpression\") {\n            this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n          }\n        } else {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      }\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (var i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            var _node$extra2;\n\n            var prop = node.properties[i];\n            var isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n            if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isLHS);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            var arg = node.argument;\n            this.toAssignable(arg, isLHS);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isLHS);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.toAssignable(parenthesized, isLHS);\n          break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"toAssignableObjectExpressionProp\",\n    value: function toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n      if (prop.type === \"ObjectMethod\") {\n        var error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n        this.raise(prop.key.start, error);\n      } else if (prop.type === \"SpreadElement\" && !isLast) {\n        this.raiseRestNotLast(prop.start);\n      } else {\n        this.toAssignable(prop, isLHS);\n      }\n    }\n  }, {\n    key: \"toAssignableList\",\n    value: function toAssignableList(exprList, trailingCommaPos, isLHS) {\n      var end = exprList.length;\n\n      if (end) {\n        var last = exprList[end - 1];\n\n        if ((last == null ? void 0 : last.type) === \"RestElement\") {\n          --end;\n        } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n          last.type = \"RestElement\";\n          var arg = last.argument;\n          this.toAssignable(arg, isLHS);\n          arg = unwrapParenthesizedExpression(arg);\n\n          if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n            this.unexpected(arg.start);\n          }\n\n          if (trailingCommaPos) {\n            this.raiseTrailingCommaAfterRest(trailingCommaPos);\n          }\n\n          --end;\n        }\n      }\n\n      for (var i = 0; i < end; i++) {\n        var elt = exprList[i];\n\n        if (elt) {\n          this.toAssignable(elt, isLHS);\n\n          if (elt.type === \"RestElement\") {\n            this.raiseRestNotLast(elt.start);\n          }\n        }\n      }\n\n      return exprList;\n    }\n  }, {\n    key: \"isAssignable\",\n    value: function isAssignable(node, isBinding) {\n      var _this46 = this;\n\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n        case \"RestElement\":\n          return true;\n\n        case \"ObjectExpression\":\n          {\n            var last = node.properties.length - 1;\n            return node.properties.every(function (prop, i) {\n              return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && _this46.isAssignable(prop);\n            });\n          }\n\n        case \"ObjectProperty\":\n          return this.isAssignable(node.value);\n\n        case \"SpreadElement\":\n          return this.isAssignable(node.argument);\n\n        case \"ArrayExpression\":\n          return node.elements.every(function (element) {\n            return element === null || _this46.isAssignable(element);\n          });\n\n        case \"AssignmentExpression\":\n          return node.operator === \"=\";\n\n        case \"ParenthesizedExpression\":\n          return this.isAssignable(node.expression);\n\n        case \"MemberExpression\":\n        case \"OptionalMemberExpression\":\n          return !isBinding;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"toReferencedList\",\n    value: function toReferencedList(exprList, isParenthesizedExpr) {\n      return exprList;\n    }\n  }, {\n    key: \"toReferencedListDeep\",\n    value: function toReferencedListDeep(exprList, isParenthesizedExpr) {\n      this.toReferencedList(exprList, isParenthesizedExpr);\n\n      var _iterator6 = _createForOfIteratorHelper(exprList),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var expr = _step6.value;\n\n          if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n            this.toReferencedListDeep(expr.elements);\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"parseSpread\",\n    value: function parseSpread(refExpressionErrors, refNeedsArrowPos) {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n      return this.finishNode(node, \"SpreadElement\");\n    }\n  }, {\n    key: \"parseRestBinding\",\n    value: function parseRestBinding() {\n      var node = this.startNode();\n      this.next();\n      node.argument = this.parseBindingAtom();\n      return this.finishNode(node, \"RestElement\");\n    }\n  }, {\n    key: \"parseBindingAtom\",\n    value: function parseBindingAtom() {\n      switch (this.state.type) {\n        case types$1.bracketL:\n          {\n            var node = this.startNode();\n            this.next();\n            node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n            return this.finishNode(node, \"ArrayPattern\");\n          }\n\n        case types$1.braceL:\n          return this.parseObjectLike(types$1.braceR, true);\n      }\n\n      return this.parseIdentifier();\n    }\n  }, {\n    key: \"parseBindingList\",\n    value: function parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma);\n        }\n\n        if (allowEmpty && this.match(types$1.comma)) {\n          elts.push(null);\n        } else if (this.eat(close)) {\n          break;\n        } else if (this.match(types$1.ellipsis)) {\n          elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n          this.checkCommaAfterRest(closeCharCode);\n          this.expect(close);\n          break;\n        } else {\n          var decorators = [];\n\n          if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n            this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n          }\n\n          while (this.match(types$1.at)) {\n            decorators.push(this.parseDecorator());\n          }\n\n          elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n        }\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseAssignableListItem\",\n    value: function parseAssignableListItem(allowModifiers, decorators) {\n      var left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      var elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseAssignableListItemTypes\",\n    value: function parseAssignableListItemTypes(param) {\n      return param;\n    }\n  }, {\n    key: \"parseMaybeDefault\",\n    value: function parseMaybeDefault(startPos, startLoc, left) {\n      var _startLoc, _startPos, _left;\n\n      startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n      startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n      left = (_left = left) != null ? _left : this.parseBindingAtom();\n      if (!this.eat(types$1.eq)) return left;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.left = left;\n      node.right = this.parseMaybeAssignAllowIn();\n      return this.finishNode(node, \"AssignmentPattern\");\n    }\n  }, {\n    key: \"checkLVal\",\n    value: function checkLVal(expr, contextDescription) {\n      var bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n      var checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n      var disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n      var strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n      switch (expr.type) {\n        case \"Identifier\":\n          {\n            var name = expr.name;\n\n            if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n              this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n            }\n\n            if (checkClashes) {\n              if (checkClashes.has(name)) {\n                this.raise(expr.start, ErrorMessages.ParamDupe);\n              } else {\n                checkClashes.add(name);\n              }\n            }\n\n            if (disallowLetBinding && name === \"let\") {\n              this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n            }\n\n            if (!(bindingType & BIND_NONE)) {\n              this.scope.declareName(name, bindingType, expr.start);\n            }\n\n            break;\n          }\n\n        case \"MemberExpression\":\n          if (bindingType !== BIND_NONE) {\n            this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n          }\n\n          break;\n\n        case \"ObjectPattern\":\n          var _iterator7 = _createForOfIteratorHelper(expr.properties),\n              _step7;\n\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var prop = _step7.value;\n              if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n              this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n\n          break;\n\n        case \"ArrayPattern\":\n          var _iterator8 = _createForOfIteratorHelper(expr.elements),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var elem = _step8.value;\n\n              if (elem) {\n                this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n\n          break;\n\n        case \"AssignmentPattern\":\n          this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n          break;\n\n        case \"RestElement\":\n          this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n          break;\n\n        case \"ParenthesizedExpression\":\n          this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n          break;\n\n        default:\n          {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n          }\n      }\n    }\n  }, {\n    key: \"checkToRestConversion\",\n    value: function checkToRestConversion(node) {\n      if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n        this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n      }\n    }\n  }, {\n    key: \"checkCommaAfterRest\",\n    value: function checkCommaAfterRest(close) {\n      if (this.match(types$1.comma)) {\n        if (this.lookaheadCharCode() === close) {\n          this.raiseTrailingCommaAfterRest(this.state.start);\n        } else {\n          this.raiseRestNotLast(this.state.start);\n        }\n      }\n    }\n  }, {\n    key: \"raiseRestNotLast\",\n    value: function raiseRestNotLast(pos) {\n      throw this.raise(pos, ErrorMessages.ElementAfterRest);\n    }\n  }, {\n    key: \"raiseTrailingCommaAfterRest\",\n    value: function raiseTrailingCommaAfterRest(pos) {\n      this.raise(pos, ErrorMessages.RestTrailingComma);\n    }\n  }]);\n\n  return LValParser;\n}(NodeUtils);\n\nvar ExpressionParser = /*#__PURE__*/function (_LValParser) {\n  _inherits(ExpressionParser, _LValParser);\n\n  var _super18 = _createSuper(ExpressionParser);\n\n  function ExpressionParser() {\n    _classCallCheck(this, ExpressionParser);\n\n    return _super18.apply(this, arguments);\n  }\n\n  _createClass(ExpressionParser, [{\n    key: \"checkProto\",\n    value: function checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n      if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n        return;\n      }\n\n      var key = prop.key;\n      var name = key.type === \"Identifier\" ? key.name : key.value;\n\n      if (name === \"__proto__\") {\n        if (isRecord) {\n          this.raise(key.start, ErrorMessages.RecordNoProto);\n          return;\n        }\n\n        if (protoRef.used) {\n          if (refExpressionErrors) {\n            if (refExpressionErrors.doubleProto === -1) {\n              refExpressionErrors.doubleProto = key.start;\n            }\n          } else {\n            this.raise(key.start, ErrorMessages.DuplicateProto);\n          }\n        }\n\n        protoRef.used = true;\n      }\n    }\n  }, {\n    key: \"shouldExitDescending\",\n    value: function shouldExitDescending(expr, potentialArrowAt) {\n      return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n    }\n  }, {\n    key: \"getExpression\",\n    value: function getExpression() {\n      this.enterInitialScopes();\n      this.nextToken();\n      var expr = this.parseExpression();\n\n      if (!this.match(types$1.eof)) {\n        this.unexpected();\n      }\n\n      this.finalizeRemainingComments();\n      expr.comments = this.state.comments;\n      expr.errors = this.state.errors;\n\n      if (this.options.tokens) {\n        expr.tokens = this.tokens;\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExpression\",\n    value: function parseExpression(disallowIn, refExpressionErrors) {\n      var _this47 = this;\n\n      if (disallowIn) {\n        return this.disallowInAnd(function () {\n          return _this47.parseExpressionBase(refExpressionErrors);\n        });\n      }\n\n      return this.allowInAnd(function () {\n        return _this47.parseExpressionBase(refExpressionErrors);\n      });\n    }\n  }, {\n    key: \"parseExpressionBase\",\n    value: function parseExpressionBase(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseMaybeAssign(refExpressionErrors);\n\n      if (this.match(types$1.comma)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.expressions = [expr];\n\n        while (this.eat(types$1.comma)) {\n          node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n        }\n\n        this.toReferencedList(node.expressions);\n        return this.finishNode(node, \"SequenceExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseMaybeAssignDisallowIn\",\n    value: function parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n      var _this48 = this;\n\n      return this.disallowInAnd(function () {\n        return _this48.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"parseMaybeAssignAllowIn\",\n    value: function parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n      var _this49 = this;\n\n      return this.allowInAnd(function () {\n        return _this49.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      });\n    }\n  }, {\n    key: \"setOptionalParametersError\",\n    value: function setOptionalParametersError(refExpressionErrors, resultError) {\n      var _resultError$pos;\n\n      refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n    }\n  }, {\n    key: \"parseMaybeAssign\",\n    value: function parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      if (this.isContextual(\"yield\")) {\n        if (this.prodParam.hasYield) {\n          var _left2 = this.parseYield();\n\n          if (afterLeftParse) {\n            _left2 = afterLeftParse.call(this, _left2, startPos, startLoc);\n          }\n\n          return _left2;\n        }\n      }\n\n      var ownExpressionErrors;\n\n      if (refExpressionErrors) {\n        ownExpressionErrors = false;\n      } else {\n        refExpressionErrors = new ExpressionErrors();\n        ownExpressionErrors = true;\n      }\n\n      if (this.match(types$1.parenL) || this.match(types$1.name)) {\n        this.state.potentialArrowAt = this.state.start;\n      }\n\n      var left = this.parseMaybeConditional(refExpressionErrors);\n\n      if (afterLeftParse) {\n        left = afterLeftParse.call(this, left, startPos, startLoc);\n      }\n\n      if (this.state.type.isAssign) {\n        var node = this.startNodeAt(startPos, startLoc);\n        var operator = this.state.value;\n        node.operator = operator;\n        var leftIsHackPipeExpression = left.type === \"BinaryExpression\" && left.operator === \"|>\" && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n        if (leftIsHackPipeExpression) {\n          throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, operator);\n        }\n\n        if (this.match(types$1.eq)) {\n          node.left = this.toAssignable(left, true);\n          refExpressionErrors.doubleProto = -1;\n        } else {\n          node.left = left;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= node.left.start) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n\n        this.checkLVal(left, \"assignment expression\");\n        this.next();\n        node.right = this.parseMaybeAssign();\n        return this.finishNode(node, \"AssignmentExpression\");\n      } else if (ownExpressionErrors) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseMaybeConditional\",\n    value: function parseMaybeConditional(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprOps(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n  }, {\n    key: \"parseConditional\",\n    value: function parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n      if (this.eat(types$1.question)) {\n        var node = this.startNodeAt(startPos, startLoc);\n        node.test = expr;\n        node.consequent = this.parseMaybeAssignAllowIn();\n        this.expect(types$1.colon);\n        node.alternate = this.parseMaybeAssign();\n        return this.finishNode(node, \"ConditionalExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprOps\",\n    value: function parseExprOps(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseMaybeUnary(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseExprOp(expr, startPos, startLoc, -1);\n    }\n  }, {\n    key: \"parseExprOp\",\n    value: function parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n      var prec = this.state.type.binop;\n\n      if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n        if (prec > minPrec) {\n          var op = this.state.type;\n\n          if (op === types$1.pipeline) {\n            this.expectPlugin(\"pipelineOperator\");\n\n            if (this.state.inFSharpPipelineDirectBody) {\n              return left;\n            }\n\n            this.checkPipelineAtInfixOperator(left, leftStartPos);\n          }\n\n          var node = this.startNodeAt(leftStartPos, leftStartLoc);\n          node.left = left;\n          node.operator = this.state.value;\n          var logical = op === types$1.logicalOR || op === types$1.logicalAND;\n          var coalesce = op === types$1.nullishCoalescing;\n\n          if (coalesce) {\n            prec = types$1.logicalAND.binop;\n          }\n\n          this.next();\n\n          if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n            if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n              throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n            }\n          }\n\n          node.right = this.parseExprOpRightExpr(op, prec);\n          this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n          var nextOp = this.state.type;\n\n          if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n            throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n          }\n\n          return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n        }\n      }\n\n      return left;\n    }\n  }, {\n    key: \"parseExprOpRightExpr\",\n    value: function parseExprOpRightExpr(op, prec) {\n      var _this50 = this;\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n\n      switch (op) {\n        case types$1.pipeline:\n          switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n            case \"hack\":\n              return this.withTopicBindingContext(function () {\n                var bodyExpr = _this50.parseHackPipeBody(op, prec);\n\n                _this50.checkHackPipeBodyEarlyErrors(startPos);\n\n                return bodyExpr;\n              });\n\n            case \"smart\":\n              return this.withTopicBindingContext(function () {\n                var childExpr = _this50.parseHackPipeBody(op, prec);\n\n                return _this50.parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc);\n              });\n\n            case \"fsharp\":\n              return this.withSoloAwaitPermittingContext(function () {\n                return _this50.parseFSharpPipelineBody(prec);\n              });\n          }\n\n        default:\n          return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"parseExprOpBaseRightExpr\",\n    value: function parseExprOpBaseRightExpr(op, prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n    }\n  }, {\n    key: \"parseHackPipeBody\",\n    value: function parseHackPipeBody(op, prec) {\n      var bodyIsInGeneratorContext = this.prodParam.hasYield;\n      var bodyIsYieldExpression = bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n      if (bodyIsYieldExpression) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n      } else {\n        return this.parseExprOpBaseRightExpr(op, prec);\n      }\n    }\n  }, {\n    key: \"checkExponentialAfterUnary\",\n    value: function checkExponentialAfterUnary(node) {\n      if (this.match(types$1.exponent)) {\n        this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n      }\n    }\n  }, {\n    key: \"parseMaybeUnary\",\n    value: function parseMaybeUnary(refExpressionErrors, sawUnary) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var isAwait = this.isContextual(\"await\");\n\n      if (isAwait && this.isAwaitAllowed()) {\n        this.next();\n\n        var _expr = this.parseAwait(startPos, startLoc);\n\n        if (!sawUnary) this.checkExponentialAfterUnary(_expr);\n        return _expr;\n      }\n\n      var update = this.match(types$1.incDec);\n      var node = this.startNode();\n\n      if (this.state.type.prefix) {\n        node.operator = this.state.value;\n        node.prefix = true;\n\n        if (this.match(types$1._throw)) {\n          this.expectPlugin(\"throwExpressions\");\n        }\n\n        var isDelete = this.match(types$1._delete);\n        this.next();\n        node.argument = this.parseMaybeUnary(null, true);\n        this.checkExpressionErrors(refExpressionErrors, true);\n\n        if (this.state.strict && isDelete) {\n          var arg = node.argument;\n\n          if (arg.type === \"Identifier\") {\n            this.raise(node.start, ErrorMessages.StrictDelete);\n          } else if (this.hasPropertyAsPrivateName(arg)) {\n            this.raise(node.start, ErrorMessages.DeletePrivateField);\n          }\n        }\n\n        if (!update) {\n          if (!sawUnary) this.checkExponentialAfterUnary(node);\n          return this.finishNode(node, \"UnaryExpression\");\n        }\n      }\n\n      var expr = this.parseUpdate(node, update, refExpressionErrors);\n\n      if (isAwait) {\n        var _startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n        if (_startsExpr && !this.isAmbiguousAwait()) {\n          this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n          return this.parseAwait(startPos, startLoc);\n        }\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseUpdate\",\n    value: function parseUpdate(node, update, refExpressionErrors) {\n      if (update) {\n        this.checkLVal(node.argument, \"prefix operation\");\n        return this.finishNode(node, \"UpdateExpression\");\n      }\n\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var expr = this.parseExprSubscripts(refExpressionErrors);\n      if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n      while (this.state.type.postfix && !this.canInsertSemicolon()) {\n        var _node9 = this.startNodeAt(startPos, startLoc);\n\n        _node9.operator = this.state.value;\n        _node9.prefix = false;\n        _node9.argument = expr;\n        this.checkLVal(expr, \"postfix operation\");\n        this.next();\n        expr = this.finishNode(_node9, \"UpdateExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseExprSubscripts\",\n    value: function parseExprSubscripts(refExpressionErrors) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var potentialArrowAt = this.state.potentialArrowAt;\n      var expr = this.parseExprAtom(refExpressionErrors);\n\n      if (this.shouldExitDescending(expr, potentialArrowAt)) {\n        return expr;\n      }\n\n      return this.parseSubscripts(expr, startPos, startLoc);\n    }\n  }, {\n    key: \"parseSubscripts\",\n    value: function parseSubscripts(base, startPos, startLoc, noCalls) {\n      var state = {\n        optionalChainMember: false,\n        maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n        stop: false\n      };\n\n      do {\n        base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n        state.maybeAsyncArrow = false;\n      } while (!state.stop);\n\n      return base;\n    }\n  }, {\n    key: \"parseSubscript\",\n    value: function parseSubscript(base, startPos, startLoc, noCalls, state) {\n      if (!noCalls && this.eat(types$1.doubleColon)) {\n        return this.parseBind(base, startPos, startLoc, noCalls, state);\n      } else if (this.match(types$1.backQuote)) {\n        return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n      }\n\n      var optional = false;\n\n      if (this.match(types$1.questionDot)) {\n        if (noCalls && this.lookaheadCharCode() === 40) {\n          state.stop = true;\n          return base;\n        }\n\n        state.optionalChainMember = optional = true;\n        this.next();\n      }\n\n      if (!noCalls && this.match(types$1.parenL)) {\n        return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n      } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n        return this.parseMember(base, startPos, startLoc, state, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }, {\n    key: \"parseMember\",\n    value: function parseMember(base, startPos, startLoc, state, optional) {\n      var node = this.startNodeAt(startPos, startLoc);\n      var computed = this.eat(types$1.bracketL);\n      node.object = base;\n      node.computed = computed;\n      var privateName = !computed && this.match(types$1.privateName) && this.state.value;\n      var property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n      if (privateName !== false) {\n        if (node.object.type === \"Super\") {\n          this.raise(startPos, ErrorMessages.SuperPrivateField);\n        }\n\n        this.classScope.usePrivateName(privateName, property.start);\n      }\n\n      node.property = property;\n\n      if (computed) {\n        this.expect(types$1.bracketR);\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else {\n        return this.finishNode(node, \"MemberExpression\");\n      }\n    }\n  }, {\n    key: \"parseBind\",\n    value: function parseBind(base, startPos, startLoc, noCalls, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    }\n  }, {\n    key: \"parseCoverCallAndAsyncArrowHead\",\n    value: function parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var refExpressionErrors = null;\n      this.state.maybeInArrowParameters = true;\n      this.next();\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n\n      if (state.maybeAsyncArrow) {\n        this.expressionScope.enter(newAsyncArrowScope());\n        refExpressionErrors = new ExpressionErrors();\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = optional;\n      }\n\n      if (optional) {\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n      } else {\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n      }\n\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n        state.stop = true;\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n      } else {\n        if (state.maybeAsyncArrow) {\n          this.checkExpressionErrors(refExpressionErrors, true);\n          this.expressionScope.exit();\n        }\n\n        this.toReferencedArguments(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"toReferencedArguments\",\n    value: function toReferencedArguments(node, isParenthesizedExpr) {\n      this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n    }\n  }, {\n    key: \"parseTaggedTemplateExpression\",\n    value: function parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate(true);\n\n      if (state.optionalChainMember) {\n        this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n      }\n\n      return this.finishNode(node, \"TaggedTemplateExpression\");\n    }\n  }, {\n    key: \"atPossibleAsyncArrow\",\n    value: function atPossibleAsyncArrow(base) {\n      return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n    }\n  }, {\n    key: \"finishCallExpression\",\n    value: function finishCallExpression(node, optional) {\n      if (node.callee.type === \"Import\") {\n        if (node.arguments.length === 2) {\n          {\n            if (!this.hasPlugin(\"moduleAttributes\")) {\n              this.expectPlugin(\"importAssertions\");\n            }\n          }\n        }\n\n        if (node.arguments.length === 0 || node.arguments.length > 2) {\n          this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n        } else {\n          var _iterator9 = _createForOfIteratorHelper(node.arguments),\n              _step9;\n\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var arg = _step9.value;\n\n              if (arg.type === \"SpreadElement\") {\n                this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n              }\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n      }\n\n      return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n    }\n  }, {\n    key: \"parseCallExpressionArguments\",\n    value: function parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n      var elts = [];\n      var first = true;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma);\n\n          if (this.match(close)) {\n            if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n              this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n            }\n\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n      }\n\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return elts;\n    }\n  }, {\n    key: \"shouldParseAsyncArrow\",\n    value: function shouldParseAsyncArrow() {\n      return this.match(types$1.arrow) && !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseAsyncArrowFromCallExpression\",\n    value: function parseAsyncArrowFromCallExpression(node, call) {\n      var _call$extra;\n\n      this.resetPreviousNodeTrailingComments(call);\n      this.expect(types$1.arrow);\n      this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n      setInnerComments(node, call.innerComments);\n      setInnerComments(node, call.callee.trailingComments);\n      return node;\n    }\n  }, {\n    key: \"parseNoCallExpr\",\n    value: function parseNoCallExpr() {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n    }\n  }, {\n    key: \"parseExprAtom\",\n    value: function parseExprAtom(refExpressionErrors) {\n      var node;\n\n      switch (this.state.type) {\n        case types$1._super:\n          return this.parseSuper();\n\n        case types$1._import:\n          node = this.startNode();\n          this.next();\n\n          if (this.match(types$1.dot)) {\n            return this.parseImportMetaProperty(node);\n          }\n\n          if (!this.match(types$1.parenL)) {\n            this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n          }\n\n          return this.finishNode(node, \"Import\");\n\n        case types$1._this:\n          node = this.startNode();\n          this.next();\n          return this.finishNode(node, \"ThisExpression\");\n\n        case types$1.name:\n          {\n            if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n              return this.parseModuleExpression();\n            }\n\n            var canBeArrow = this.state.potentialArrowAt === this.state.start;\n            var containsEsc = this.state.containsEsc;\n            var id = this.parseIdentifier();\n\n            if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n              if (this.match(types$1._function)) {\n                this.resetPreviousNodeTrailingComments(id);\n                this.next();\n                return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n              } else if (this.match(types$1.name)) {\n                if (this.lookaheadCharCode() === 61) {\n                  return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n                } else {\n                  return id;\n                }\n              } else if (this.match(types$1._do)) {\n                this.resetPreviousNodeTrailingComments(id);\n                return this.parseDo(this.startNodeAtNode(id), true);\n              }\n            }\n\n            if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n              this.next();\n              return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n            }\n\n            return id;\n          }\n\n        case types$1._do:\n          {\n            return this.parseDo(this.startNode(), false);\n          }\n\n        case types$1.slash:\n        case types$1.slashAssign:\n          {\n            this.readRegexp();\n            return this.parseRegExpLiteral(this.state.value);\n          }\n\n        case types$1.num:\n          return this.parseNumericLiteral(this.state.value);\n\n        case types$1.bigint:\n          return this.parseBigIntLiteral(this.state.value);\n\n        case types$1.decimal:\n          return this.parseDecimalLiteral(this.state.value);\n\n        case types$1.string:\n          return this.parseStringLiteral(this.state.value);\n\n        case types$1._null:\n          return this.parseNullLiteral();\n\n        case types$1._true:\n          return this.parseBooleanLiteral(true);\n\n        case types$1._false:\n          return this.parseBooleanLiteral(false);\n\n        case types$1.parenL:\n          {\n            var _canBeArrow = this.state.potentialArrowAt === this.state.start;\n\n            return this.parseParenAndDistinguishExpression(_canBeArrow);\n          }\n\n        case types$1.bracketBarL:\n        case types$1.bracketHashL:\n          {\n            return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n          }\n\n        case types$1.bracketL:\n          {\n            return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n          }\n\n        case types$1.braceBarL:\n        case types$1.braceHashL:\n          {\n            return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n          }\n\n        case types$1.braceL:\n          {\n            return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n          }\n\n        case types$1._function:\n          return this.parseFunctionOrFunctionSent();\n\n        case types$1.at:\n          this.parseDecorators();\n\n        case types$1._class:\n          node = this.startNode();\n          this.takeDecorators(node);\n          return this.parseClass(node, false);\n\n        case types$1._new:\n          return this.parseNewOrNewTarget();\n\n        case types$1.backQuote:\n          return this.parseTemplate(false);\n\n        case types$1.doubleColon:\n          {\n            node = this.startNode();\n            this.next();\n            node.object = null;\n            var callee = node.callee = this.parseNoCallExpr();\n\n            if (callee.type === \"MemberExpression\") {\n              return this.finishNode(node, \"BindExpression\");\n            } else {\n              throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n            }\n          }\n\n        case types$1.privateName:\n          {\n            var _this$state3 = this.state,\n                value = _this$state3.value,\n                start = _this$state3.start;\n            node = this.parsePrivateName();\n\n            if (this.match(types$1._in)) {\n              this.classScope.usePrivateName(value, start);\n            } else {\n              this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n            }\n\n            return node;\n          }\n\n        case types$1.moduloAssign:\n          if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n            this.state.value = \"%\";\n            this.state.type = types$1.modulo;\n            this.state.pos--;\n            this.state.end--;\n            this.state.endLoc.column--;\n          } else {\n            throw this.unexpected();\n          }\n\n        case types$1.modulo:\n        case types$1.hash:\n          {\n            var pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n            if (pipeProposal) {\n              node = this.startNode();\n              var _start = this.state.start;\n              var tokenType = this.state.type;\n              this.next();\n              return this.finishTopicReference(node, _start, pipeProposal, tokenType);\n            }\n          }\n\n        case types$1.relational:\n          {\n            if (this.state.value === \"<\") {\n              var lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n              if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n                this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n              }\n            }\n          }\n\n        default:\n          throw this.unexpected();\n      }\n    }\n  }, {\n    key: \"finishTopicReference\",\n    value: function finishTopicReference(node, start, pipeProposal, tokenType) {\n      if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n        var nodeType;\n\n        if (pipeProposal === \"smart\") {\n          nodeType = \"PipelinePrimaryTopicReference\";\n        } else {\n          nodeType = \"TopicReference\";\n        }\n\n        if (!this.topicReferenceIsAllowedInCurrentContext()) {\n          if (pipeProposal === \"smart\") {\n            this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n          } else {\n            this.raise(start, ErrorMessages.PipeTopicUnbound);\n          }\n        }\n\n        this.registerTopicReference();\n        return this.finishNode(node, nodeType);\n      } else {\n        throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenType.label);\n      }\n    }\n  }, {\n    key: \"testTopicReferenceConfiguration\",\n    value: function testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n      switch (pipeProposal) {\n        case \"hack\":\n          {\n            var pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n            return tokenType.label === pluginTopicToken;\n          }\n\n        case \"smart\":\n          return tokenType === types$1.hash;\n\n        default:\n          throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n      }\n    }\n  }, {\n    key: \"parseAsyncArrowUnaryFunction\",\n    value: function parseAsyncArrowUnaryFunction(node) {\n      this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n      var params = [this.parseIdentifier()];\n      this.prodParam.exit();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n      }\n\n      this.expect(types$1.arrow);\n      this.parseArrowExpression(node, params, true);\n      return node;\n    }\n  }, {\n    key: \"parseDo\",\n    value: function parseDo(node, isAsync) {\n      this.expectPlugin(\"doExpressions\");\n\n      if (isAsync) {\n        this.expectPlugin(\"asyncDoExpressions\");\n      }\n\n      node.async = isAsync;\n      this.next();\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      if (isAsync) {\n        this.prodParam.enter(PARAM_AWAIT);\n        node.body = this.parseBlock();\n        this.prodParam.exit();\n      } else {\n        node.body = this.parseBlock();\n      }\n\n      this.state.labels = oldLabels;\n      return this.finishNode(node, \"DoExpression\");\n    }\n  }, {\n    key: \"parseSuper\",\n    value: function parseSuper() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.SuperNotAllowed);\n      } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n        this.raise(node.start, ErrorMessages.UnexpectedSuper);\n      }\n\n      if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n        this.raise(node.start, ErrorMessages.UnsupportedSuper);\n      }\n\n      return this.finishNode(node, \"Super\");\n    }\n  }, {\n    key: \"parseMaybePrivateName\",\n    value: function parseMaybePrivateName(isPrivateNameAllowed) {\n      var isPrivate = this.match(types$1.privateName);\n\n      if (isPrivate) {\n        if (!isPrivateNameAllowed) {\n          this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n        }\n\n        return this.parsePrivateName();\n      } else {\n        return this.parseIdentifier(true);\n      }\n    }\n  }, {\n    key: \"parsePrivateName\",\n    value: function parsePrivateName() {\n      var node = this.startNode();\n      var id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n      var name = this.state.value;\n      this.next();\n      node.id = this.createIdentifier(id, name);\n      return this.finishNode(node, \"PrivateName\");\n    }\n  }, {\n    key: \"parseFunctionOrFunctionSent\",\n    value: function parseFunctionOrFunctionSent() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.prodParam.hasYield && this.match(types$1.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n        this.next();\n        return this.parseMetaProperty(node, meta, \"sent\");\n      }\n\n      return this.parseFunction(node);\n    }\n  }, {\n    key: \"parseMetaProperty\",\n    value: function parseMetaProperty(node, meta, propertyName) {\n      node.meta = meta;\n\n      if (meta.name === \"function\" && propertyName === \"sent\") {\n        if (this.isContextual(propertyName)) {\n          this.expectPlugin(\"functionSent\");\n        } else if (!this.hasPlugin(\"functionSent\")) {\n          this.unexpected();\n        }\n      }\n\n      var containsEsc = this.state.containsEsc;\n      node.property = this.parseIdentifier(true);\n\n      if (node.property.name !== propertyName || containsEsc) {\n        this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n      }\n\n      return this.finishNode(node, \"MetaProperty\");\n    }\n  }, {\n    key: \"parseImportMetaProperty\",\n    value: function parseImportMetaProperty(node) {\n      var id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n      this.next();\n\n      if (this.isContextual(\"meta\")) {\n        if (!this.inModule) {\n          this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n        }\n\n        this.sawUnambiguousESM = true;\n      }\n\n      return this.parseMetaProperty(node, id, \"meta\");\n    }\n  }, {\n    key: \"parseLiteralAtNode\",\n    value: function parseLiteralAtNode(value, type, node) {\n      this.addExtra(node, \"rawValue\", value);\n      this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n      node.value = value;\n      this.next();\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseLiteral\",\n    value: function parseLiteral(value, type) {\n      var node = this.startNode();\n      return this.parseLiteralAtNode(value, type, node);\n    }\n  }, {\n    key: \"parseStringLiteral\",\n    value: function parseStringLiteral(value) {\n      return this.parseLiteral(value, \"StringLiteral\");\n    }\n  }, {\n    key: \"parseNumericLiteral\",\n    value: function parseNumericLiteral(value) {\n      return this.parseLiteral(value, \"NumericLiteral\");\n    }\n  }, {\n    key: \"parseBigIntLiteral\",\n    value: function parseBigIntLiteral(value) {\n      return this.parseLiteral(value, \"BigIntLiteral\");\n    }\n  }, {\n    key: \"parseDecimalLiteral\",\n    value: function parseDecimalLiteral(value) {\n      return this.parseLiteral(value, \"DecimalLiteral\");\n    }\n  }, {\n    key: \"parseRegExpLiteral\",\n    value: function parseRegExpLiteral(value) {\n      var node = this.parseLiteral(value.value, \"RegExpLiteral\");\n      node.pattern = value.pattern;\n      node.flags = value.flags;\n      return node;\n    }\n  }, {\n    key: \"parseBooleanLiteral\",\n    value: function parseBooleanLiteral(value) {\n      var node = this.startNode();\n      node.value = value;\n      this.next();\n      return this.finishNode(node, \"BooleanLiteral\");\n    }\n  }, {\n    key: \"parseNullLiteral\",\n    value: function parseNullLiteral() {\n      var node = this.startNode();\n      this.next();\n      return this.finishNode(node, \"NullLiteral\");\n    }\n  }, {\n    key: \"parseParenAndDistinguishExpression\",\n    value: function parseParenAndDistinguishExpression(canBeArrow) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      var val;\n      this.next();\n      this.expressionScope.enter(newArrowHeadScope());\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.maybeInArrowParameters = true;\n      this.state.inFSharpPipelineDirectBody = false;\n      var innerStartPos = this.state.start;\n      var innerStartLoc = this.state.startLoc;\n      var exprList = [];\n      var refExpressionErrors = new ExpressionErrors();\n      var first = true;\n      var spreadStart;\n      var optionalCommaStart;\n\n      while (!this.match(types$1.parenR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n          if (this.match(types$1.parenR)) {\n            optionalCommaStart = this.state.start;\n            break;\n          }\n        }\n\n        if (this.match(types$1.ellipsis)) {\n          var spreadNodeStartPos = this.state.start;\n          var spreadNodeStartLoc = this.state.startLoc;\n          spreadStart = this.state.start;\n          exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n          this.checkCommaAfterRest(41);\n          break;\n        } else {\n          exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n        }\n      }\n\n      var innerEndPos = this.state.lastTokEnd;\n      var innerEndLoc = this.state.lastTokEndLoc;\n      this.expect(types$1.parenR);\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var arrowNode = this.startNodeAt(startPos, startLoc);\n\n      if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n        this.expressionScope.validateAsPattern();\n        this.expressionScope.exit();\n        this.parseArrowExpression(arrowNode, exprList, false);\n        return arrowNode;\n      }\n\n      this.expressionScope.exit();\n\n      if (!exprList.length) {\n        this.unexpected(this.state.lastTokStart);\n      }\n\n      if (optionalCommaStart) this.unexpected(optionalCommaStart);\n      if (spreadStart) this.unexpected(spreadStart);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      this.toReferencedListDeep(exprList, true);\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc);\n        val.expressions = exprList;\n        this.finishNode(val, \"SequenceExpression\");\n        val.end = innerEndPos;\n        val.loc.end = innerEndLoc;\n      } else {\n        val = exprList[0];\n      }\n\n      if (!this.options.createParenthesizedExpressions) {\n        this.addExtra(val, \"parenthesized\", true);\n        this.addExtra(val, \"parenStart\", startPos);\n        return val;\n      }\n\n      var parenExpression = this.startNodeAt(startPos, startLoc);\n      parenExpression.expression = val;\n      this.finishNode(parenExpression, \"ParenthesizedExpression\");\n      return parenExpression;\n    }\n  }, {\n    key: \"shouldParseArrow\",\n    value: function shouldParseArrow(params) {\n      return !this.canInsertSemicolon();\n    }\n  }, {\n    key: \"parseArrow\",\n    value: function parseArrow(node) {\n      if (this.eat(types$1.arrow)) {\n        return node;\n      }\n    }\n  }, {\n    key: \"parseParenItem\",\n    value: function parseParenItem(node, startPos, startLoc) {\n      return node;\n    }\n  }, {\n    key: \"parseNewOrNewTarget\",\n    value: function parseNewOrNewTarget() {\n      var node = this.startNode();\n      this.next();\n\n      if (this.match(types$1.dot)) {\n        var meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n        this.next();\n        var metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n        if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n          this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n        }\n\n        return metaProp;\n      }\n\n      return this.parseNew(node);\n    }\n  }, {\n    key: \"parseNew\",\n    value: function parseNew(node) {\n      node.callee = this.parseNoCallExpr();\n\n      if (node.callee.type === \"Import\") {\n        this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n      } else if (this.isOptionalChain(node.callee)) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n      } else if (this.eat(types$1.questionDot)) {\n        this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n      }\n\n      this.parseNewArguments(node);\n      return this.finishNode(node, \"NewExpression\");\n    }\n  }, {\n    key: \"parseNewArguments\",\n    value: function parseNewArguments(node) {\n      if (this.eat(types$1.parenL)) {\n        var args = this.parseExprList(types$1.parenR);\n        this.toReferencedList(args);\n        node.arguments = args;\n      } else {\n        node.arguments = [];\n      }\n    }\n  }, {\n    key: \"parseTemplateElement\",\n    value: function parseTemplateElement(isTagged) {\n      var elem = this.startNode();\n\n      if (this.state.value === null) {\n        if (!isTagged) {\n          this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n        }\n      }\n\n      elem.value = {\n        raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n        cooked: this.state.value\n      };\n      this.next();\n      elem.tail = this.match(types$1.backQuote);\n      return this.finishNode(elem, \"TemplateElement\");\n    }\n  }, {\n    key: \"parseTemplate\",\n    value: function parseTemplate(isTagged) {\n      var node = this.startNode();\n      this.next();\n      node.expressions = [];\n      var curElt = this.parseTemplateElement(isTagged);\n      node.quasis = [curElt];\n\n      while (!curElt.tail) {\n        this.expect(types$1.dollarBraceL);\n        node.expressions.push(this.parseTemplateSubstitution());\n        this.expect(types$1.braceR);\n        node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n      }\n\n      this.next();\n      return this.finishNode(node, \"TemplateLiteral\");\n    }\n  }, {\n    key: \"parseTemplateSubstitution\",\n    value: function parseTemplateSubstitution() {\n      return this.parseExpression();\n    }\n  }, {\n    key: \"parseObjectLike\",\n    value: function parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n      if (isRecord) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var propHash = Object.create(null);\n      var first = true;\n      var node = this.startNode();\n      node.properties = [];\n      this.next();\n\n      while (!this.match(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma);\n\n          if (this.match(close)) {\n            this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n            break;\n          }\n        }\n\n        var prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n        if (!isPattern) {\n          this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n        }\n\n        if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n          this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n        }\n\n        if (prop.shorthand) {\n          this.addExtra(prop, \"shorthand\", true);\n        }\n\n        node.properties.push(prop);\n      }\n\n      this.next();\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      var type = \"ObjectExpression\";\n\n      if (isPattern) {\n        type = \"ObjectPattern\";\n      } else if (isRecord) {\n        type = \"RecordExpression\";\n      }\n\n      return this.finishNode(node, type);\n    }\n  }, {\n    key: \"maybeAsyncOrAccessorProp\",\n    value: function maybeAsyncOrAccessorProp(prop) {\n      return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n    }\n  }, {\n    key: \"parsePropertyDefinition\",\n    value: function parsePropertyDefinition(isPattern, refExpressionErrors) {\n      var decorators = [];\n\n      if (this.match(types$1.at)) {\n        if (this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n      }\n\n      var prop = this.startNode();\n      var isGenerator = false;\n      var isAsync = false;\n      var isAccessor = false;\n      var startPos;\n      var startLoc;\n\n      if (this.match(types$1.ellipsis)) {\n        if (decorators.length) this.unexpected();\n\n        if (isPattern) {\n          this.next();\n          prop.argument = this.parseIdentifier();\n          this.checkCommaAfterRest(125);\n          return this.finishNode(prop, \"RestElement\");\n        }\n\n        return this.parseSpread();\n      }\n\n      if (decorators.length) {\n        prop.decorators = decorators;\n        decorators = [];\n      }\n\n      prop.method = false;\n\n      if (isPattern || refExpressionErrors) {\n        startPos = this.state.start;\n        startLoc = this.state.startLoc;\n      }\n\n      if (!isPattern) {\n        isGenerator = this.eat(types$1.star);\n      }\n\n      var containsEsc = this.state.containsEsc;\n      var key = this.parsePropertyName(prop, false);\n\n      if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n        var keyName = key.name;\n\n        if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n          isAsync = true;\n          this.resetPreviousNodeTrailingComments(key);\n          isGenerator = this.eat(types$1.star);\n          this.parsePropertyName(prop, false);\n        }\n\n        if (keyName === \"get\" || keyName === \"set\") {\n          isAccessor = true;\n          this.resetPreviousNodeTrailingComments(key);\n          prop.kind = keyName;\n\n          if (this.match(types$1.star)) {\n            isGenerator = true;\n            this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n            this.next();\n          }\n\n          this.parsePropertyName(prop, false);\n        }\n      }\n\n      this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n      return prop;\n    }\n  }, {\n    key: \"getGetterSetterExpectedParamCount\",\n    value: function getGetterSetterExpectedParamCount(method) {\n      return method.kind === \"get\" ? 0 : 1;\n    }\n  }, {\n    key: \"getObjectOrClassMethodParams\",\n    value: function getObjectOrClassMethodParams(method) {\n      return method.params;\n    }\n  }, {\n    key: \"checkGetterSetterParams\",\n    value: function checkGetterSetterParams(method) {\n      var _params;\n\n      var paramCount = this.getGetterSetterExpectedParamCount(method);\n      var params = this.getObjectOrClassMethodParams(method);\n      var start = method.start;\n\n      if (params.length !== paramCount) {\n        if (method.kind === \"get\") {\n          this.raise(start, ErrorMessages.BadGetterArity);\n        } else {\n          this.raise(start, ErrorMessages.BadSetterArity);\n        }\n      }\n\n      if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n        this.raise(start, ErrorMessages.BadSetterRestParameter);\n      }\n    }\n  }, {\n    key: \"parseObjectMethod\",\n    value: function parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n      if (isAccessor) {\n        this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n        this.checkGetterSetterParams(prop);\n        return prop;\n      }\n\n      if (isAsync || isGenerator || this.match(types$1.parenL)) {\n        if (isPattern) this.unexpected();\n        prop.kind = \"method\";\n        prop.method = true;\n        return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n      }\n    }\n  }, {\n    key: \"parseObjectProperty\",\n    value: function parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n      prop.shorthand = false;\n\n      if (this.eat(types$1.colon)) {\n        prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n\n      if (!prop.computed && prop.key.type === \"Identifier\") {\n        this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n        if (isPattern) {\n          prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n        } else if (this.match(types$1.eq) && refExpressionErrors) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = this.state.start;\n          }\n\n          prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n        } else {\n          prop.value = cloneIdentifier(prop.key);\n        }\n\n        prop.shorthand = true;\n        return this.finishNode(prop, \"ObjectProperty\");\n      }\n    }\n  }, {\n    key: \"parseObjPropValue\",\n    value: function parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n      var node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n      if (!node) this.unexpected();\n      return node;\n    }\n  }, {\n    key: \"parsePropertyName\",\n    value: function parsePropertyName(prop, isPrivateNameAllowed) {\n      if (this.eat(types$1.bracketL)) {\n        prop.computed = true;\n        prop.key = this.parseMaybeAssignAllowIn();\n        this.expect(types$1.bracketR);\n      } else {\n        var oldInPropertyName = this.state.inPropertyName;\n        this.state.inPropertyName = true;\n        var type = this.state.type;\n        prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n        if (type !== types$1.privateName) {\n          prop.computed = false;\n        }\n\n        this.state.inPropertyName = oldInPropertyName;\n      }\n\n      return prop.key;\n    }\n  }, {\n    key: \"initFunction\",\n    value: function initFunction(node, isAsync) {\n      node.id = null;\n      node.generator = false;\n      node.async = !!isAsync;\n    }\n  }, {\n    key: \"parseMethod\",\n    value: function parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n      var inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      this.initFunction(node, isAsync);\n      node.generator = !!isGenerator;\n      var allowModifiers = isConstructor;\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n      this.parseFunctionParams(node, allowModifiers);\n      this.parseFunctionBodyAndFinish(node, type, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      return node;\n    }\n  }, {\n    key: \"parseArrayLike\",\n    value: function parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n      if (isTuple) {\n        this.expectPlugin(\"recordAndTuple\");\n      }\n\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = false;\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n    }\n  }, {\n    key: \"parseArrowExpression\",\n    value: function parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      var flags = functionFlags(isAsync, false);\n\n      if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n        flags |= PARAM_IN;\n      }\n\n      this.prodParam.enter(flags);\n      this.initFunction(node, isAsync);\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n      if (params) {\n        this.state.maybeInArrowParameters = true;\n        this.setArrowFunctionParameters(node, params, trailingCommaPos);\n      }\n\n      this.state.maybeInArrowParameters = false;\n      this.parseFunctionBody(node, true);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return this.finishNode(node, \"ArrowFunctionExpression\");\n    }\n  }, {\n    key: \"setArrowFunctionParameters\",\n    value: function setArrowFunctionParameters(node, params, trailingCommaPos) {\n      node.params = this.toAssignableList(params, trailingCommaPos, false);\n    }\n  }, {\n    key: \"parseFunctionBodyAndFinish\",\n    value: function parseFunctionBodyAndFinish(node, type) {\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.parseFunctionBody(node, false, isMethod);\n      this.finishNode(node, type);\n    }\n  }, {\n    key: \"parseFunctionBody\",\n    value: function parseFunctionBody(node, allowExpression) {\n      var _this51 = this;\n\n      var isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isExpression = allowExpression && !this.match(types$1.braceL);\n      this.expressionScope.enter(newExpressionScope());\n\n      if (isExpression) {\n        node.body = this.parseMaybeAssign();\n        this.checkParams(node, false, allowExpression, false);\n      } else {\n        var oldStrict = this.state.strict;\n        var oldLabels = this.state.labels;\n        this.state.labels = [];\n        this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n        node.body = this.parseBlock(true, false, function (hasStrictModeDirective) {\n          var nonSimple = !_this51.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            var errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n\n            _this51.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n          }\n\n          var strictModeChanged = !oldStrict && _this51.state.strict;\n\n          _this51.checkParams(node, !_this51.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n          if (_this51.state.strict && node.id) {\n            _this51.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n          }\n        });\n        this.prodParam.exit();\n        this.expressionScope.exit();\n        this.state.labels = oldLabels;\n      }\n    }\n  }, {\n    key: \"isSimpleParamList\",\n    value: function isSimpleParamList(params) {\n      for (var i = 0, len = params.length; i < len; i++) {\n        if (params[i].type !== \"Identifier\") return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"checkParams\",\n    value: function checkParams(node, allowDuplicates, isArrowFunction) {\n      var strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var checkClashes = new Set();\n\n      var _iterator10 = _createForOfIteratorHelper(node.params),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var param = _step10.value;\n          this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  }, {\n    key: \"parseExprList\",\n    value: function parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n      var elts = [];\n      var first = true;\n\n      while (!this.eat(close)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma);\n\n          if (this.match(close)) {\n            if (nodeForExtra) {\n              this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n            }\n\n            this.next();\n            break;\n          }\n        }\n\n        elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n      }\n\n      return elts;\n    }\n  }, {\n    key: \"parseExprListItem\",\n    value: function parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n      var elt;\n\n      if (this.match(types$1.comma)) {\n        if (!allowEmpty) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n        }\n\n        elt = null;\n      } else if (this.match(types$1.ellipsis)) {\n        var spreadNodeStartPos = this.state.start;\n        var spreadNodeStartLoc = this.state.startLoc;\n        elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n      } else if (this.match(types$1.question)) {\n        this.expectPlugin(\"partialApplication\");\n\n        if (!allowPlaceholder) {\n          this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n        }\n\n        var node = this.startNode();\n        this.next();\n        elt = this.finishNode(node, \"ArgumentPlaceholder\");\n      } else {\n        elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n      }\n\n      return elt;\n    }\n  }, {\n    key: \"parseIdentifier\",\n    value: function parseIdentifier(liberal) {\n      var node = this.startNode();\n      var name = this.parseIdentifierName(node.start, liberal);\n      return this.createIdentifier(node, name);\n    }\n  }, {\n    key: \"createIdentifier\",\n    value: function createIdentifier(node, name) {\n      node.name = name;\n      node.loc.identifierName = name;\n      return this.finishNode(node, \"Identifier\");\n    }\n  }, {\n    key: \"parseIdentifierName\",\n    value: function parseIdentifierName(pos, liberal) {\n      var name;\n      var _this$state4 = this.state,\n          start = _this$state4.start,\n          type = _this$state4.type;\n\n      if (type === types$1.name) {\n        name = this.state.value;\n      } else if (type.keyword) {\n        name = type.keyword;\n      } else {\n        throw this.unexpected();\n      }\n\n      if (liberal) {\n        this.state.type = types$1.name;\n      } else {\n        this.checkReservedWord(name, start, !!type.keyword, false);\n      }\n\n      this.next();\n      return name;\n    }\n  }, {\n    key: \"checkReservedWord\",\n    value: function checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n      if (word.length > 10) {\n        return;\n      }\n\n      if (!canBeReservedWord(word)) {\n        return;\n      }\n\n      if (word === \"yield\") {\n        if (this.prodParam.hasYield) {\n          this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n          return;\n        }\n      } else if (word === \"await\") {\n        if (this.prodParam.hasAwait) {\n          this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n          return;\n        } else if (this.scope.inStaticBlock) {\n          this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n          return;\n        } else {\n          this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        }\n      } else if (word === \"arguments\") {\n        if (this.scope.inClassAndNotInNonArrowFunction) {\n          this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n          return;\n        }\n      }\n\n      if (checkKeywords && isKeyword(word)) {\n        this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n        return;\n      }\n\n      var reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n      if (reservedTest(word, this.inModule)) {\n        this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n      }\n    }\n  }, {\n    key: \"isAwaitAllowed\",\n    value: function isAwaitAllowed() {\n      if (this.prodParam.hasAwait) return true;\n\n      if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseAwait\",\n    value: function parseAwait(startPos, startLoc) {\n      var node = this.startNodeAt(startPos, startLoc);\n      this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n      if (this.eat(types$1.star)) {\n        this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n      }\n\n      if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n        if (this.isAmbiguousAwait()) {\n          this.ambiguousScriptDifferentAst = true;\n        } else {\n          this.sawUnambiguousESM = true;\n        }\n      }\n\n      if (!this.state.soloAwait) {\n        node.argument = this.parseMaybeUnary(null, true);\n      }\n\n      return this.finishNode(node, \"AwaitExpression\");\n    }\n  }, {\n    key: \"isAmbiguousAwait\",\n    value: function isAmbiguousAwait() {\n      return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n    }\n  }, {\n    key: \"parseYield\",\n    value: function parseYield() {\n      var node = this.startNode();\n      this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n      this.next();\n      var delegating = false;\n      var argument = null;\n\n      if (!this.hasPrecedingLineBreak()) {\n        delegating = this.eat(types$1.star);\n\n        switch (this.state.type) {\n          case types$1.semi:\n          case types$1.eof:\n          case types$1.braceR:\n          case types$1.parenR:\n          case types$1.bracketR:\n          case types$1.braceBarR:\n          case types$1.colon:\n          case types$1.comma:\n            if (!delegating) break;\n\n          default:\n            argument = this.parseMaybeAssign();\n        }\n      }\n\n      node.delegate = delegating;\n      node.argument = argument;\n      return this.finishNode(node, \"YieldExpression\");\n    }\n  }, {\n    key: \"checkPipelineAtInfixOperator\",\n    value: function checkPipelineAtInfixOperator(left, leftStartPos) {\n      if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n        if (left.type === \"SequenceExpression\") {\n          this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n        }\n      }\n    }\n  }, {\n    key: \"checkHackPipeBodyEarlyErrors\",\n    value: function checkHackPipeBodyEarlyErrors(startPos) {\n      if (this.match(types$1.arrow)) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, types$1.arrow.label);\n      } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(startPos, ErrorMessages.PipeTopicUnused);\n      }\n    }\n  }, {\n    key: \"parseSmartPipelineBodyInStyle\",\n    value: function parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n      var bodyNode = this.startNodeAt(startPos, startLoc);\n\n      if (this.isSimpleReference(childExpr)) {\n        bodyNode.callee = childExpr;\n        return this.finishNode(bodyNode, \"PipelineBareFunction\");\n      } else {\n        this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n        bodyNode.expression = childExpr;\n        return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n      }\n    }\n  }, {\n    key: \"isSimpleReference\",\n    value: function isSimpleReference(expression) {\n      switch (expression.type) {\n        case \"MemberExpression\":\n          return !expression.computed && this.isSimpleReference(expression.object);\n\n        case \"Identifier\":\n          return true;\n\n        default:\n          return false;\n      }\n    }\n  }, {\n    key: \"checkSmartPipeTopicBodyEarlyErrors\",\n    value: function checkSmartPipeTopicBodyEarlyErrors(startPos) {\n      if (this.match(types$1.arrow)) {\n        throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n      } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n        this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n      }\n    }\n  }, {\n    key: \"withTopicBindingContext\",\n    value: function withTopicBindingContext(callback) {\n      var outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 1,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    }\n  }, {\n    key: \"withSmartMixTopicForbiddingContext\",\n    value: function withSmartMixTopicForbiddingContext(callback) {\n      var proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n      if (proposal === \"smart\") {\n        var outerContextTopicState = this.state.topicContext;\n        this.state.topicContext = {\n          maxNumOfResolvableTopics: 0,\n          maxTopicIndex: null\n        };\n\n        try {\n          return callback();\n        } finally {\n          this.state.topicContext = outerContextTopicState;\n        }\n      } else {\n        return callback();\n      }\n    }\n  }, {\n    key: \"withSoloAwaitPermittingContext\",\n    value: function withSoloAwaitPermittingContext(callback) {\n      var outerContextSoloAwaitState = this.state.soloAwait;\n      this.state.soloAwait = true;\n\n      try {\n        return callback();\n      } finally {\n        this.state.soloAwait = outerContextSoloAwaitState;\n      }\n    }\n  }, {\n    key: \"allowInAnd\",\n    value: function allowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToSet = PARAM_IN & ~flags;\n\n      if (prodParamToSet) {\n        this.prodParam.enter(flags | PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"disallowInAnd\",\n    value: function disallowInAnd(callback) {\n      var flags = this.prodParam.currentFlags();\n      var prodParamToClear = PARAM_IN & flags;\n\n      if (prodParamToClear) {\n        this.prodParam.enter(flags & ~PARAM_IN);\n\n        try {\n          return callback();\n        } finally {\n          this.prodParam.exit();\n        }\n      }\n\n      return callback();\n    }\n  }, {\n    key: \"registerTopicReference\",\n    value: function registerTopicReference() {\n      this.state.topicContext.maxTopicIndex = 0;\n    }\n  }, {\n    key: \"topicReferenceIsAllowedInCurrentContext\",\n    value: function topicReferenceIsAllowedInCurrentContext() {\n      return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n    }\n  }, {\n    key: \"topicReferenceWasUsedInCurrentContext\",\n    value: function topicReferenceWasUsedInCurrentContext() {\n      return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n    }\n  }, {\n    key: \"parseFSharpPipelineBody\",\n    value: function parseFSharpPipelineBody(prec) {\n      var startPos = this.state.start;\n      var startLoc = this.state.startLoc;\n      this.state.potentialArrowAt = this.state.start;\n      var oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n      this.state.inFSharpPipelineDirectBody = true;\n      var ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n      this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n      return ret;\n    }\n  }, {\n    key: \"parseModuleExpression\",\n    value: function parseModuleExpression() {\n      this.expectPlugin(\"moduleBlocks\");\n      var node = this.startNode();\n      this.next();\n      this.eat(types$1.braceL);\n      var revertScopes = this.initializeScopes(true);\n      this.enterInitialScopes();\n      var program = this.startNode();\n\n      try {\n        node.body = this.parseProgram(program, types$1.braceR, \"module\");\n      } finally {\n        revertScopes();\n      }\n\n      this.eat(types$1.braceR);\n      return this.finishNode(node, \"ModuleExpression\");\n    }\n  }]);\n\n  return ExpressionParser;\n}(LValParser);\n\nvar loopLabel = {\n  kind: \"loop\"\n},\n    switchLabel = {\n  kind: \"switch\"\n};\nvar FUNC_NO_FLAGS = 0,\n    FUNC_STATEMENT = 1,\n    FUNC_HANGING_STATEMENT = 2,\n    FUNC_NULLABLE_ID = 4;\nvar loneSurrogate = /(?:[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/;\nvar keywordRelationalOperator = new RegExp(\"in(?:stanceof)?\", \"y\");\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        var loc = token.loc,\n            start = token.start,\n            value = token.value,\n            end = token.end;\n        var hashEndPos = start + 1;\n        var hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nvar StatementParser = /*#__PURE__*/function (_ExpressionParser) {\n  _inherits(StatementParser, _ExpressionParser);\n\n  var _super19 = _createSuper(StatementParser);\n\n  function StatementParser() {\n    _classCallCheck(this, StatementParser);\n\n    return _super19.apply(this, arguments);\n  }\n\n  _createClass(StatementParser, [{\n    key: \"parseTopLevel\",\n    value: function parseTopLevel(file, program) {\n      file.program = this.parseProgram(program);\n      file.comments = this.state.comments;\n      if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n      return this.finishNode(file, \"File\");\n    }\n  }, {\n    key: \"parseProgram\",\n    value: function parseProgram(program) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : types$1.eof;\n      var sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n      program.sourceType = sourceType;\n      program.interpreter = this.parseInterpreterDirective();\n      this.parseBlockBody(program, true, true, end);\n\n      if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n        for (var _i3 = 0, _Array$from2 = Array.from(this.scope.undefinedExports); _i3 < _Array$from2.length; _i3++) {\n          var _Array$from2$_i = _slicedToArray(_Array$from2[_i3], 1),\n              name = _Array$from2$_i[0];\n\n          var pos = this.scope.undefinedExports.get(name);\n          this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n        }\n      }\n\n      return this.finishNode(program, \"Program\");\n    }\n  }, {\n    key: \"stmtToDirective\",\n    value: function stmtToDirective(stmt) {\n      var directive = stmt;\n      directive.type = \"Directive\";\n      directive.value = directive.expression;\n      delete directive.expression;\n      var directiveLiteral = directive.value;\n      var raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n      var val = directiveLiteral.value = raw.slice(1, -1);\n      this.addExtra(directiveLiteral, \"raw\", raw);\n      this.addExtra(directiveLiteral, \"rawValue\", val);\n      directiveLiteral.type = \"DirectiveLiteral\";\n      return directive;\n    }\n  }, {\n    key: \"parseInterpreterDirective\",\n    value: function parseInterpreterDirective() {\n      if (!this.match(types$1.interpreterDirective)) {\n        return null;\n      }\n\n      var node = this.startNode();\n      node.value = this.state.value;\n      this.next();\n      return this.finishNode(node, \"InterpreterDirective\");\n    }\n  }, {\n    key: \"isLet\",\n    value: function isLet(context) {\n      if (!this.isContextual(\"let\")) {\n        return false;\n      }\n\n      return this.isLetKeyword(context);\n    }\n  }, {\n    key: \"isLetKeyword\",\n    value: function isLetKeyword(context) {\n      var next = this.nextTokenStart();\n      var nextCh = this.codePointAtPos(next);\n\n      if (nextCh === 92 || nextCh === 91) {\n        return true;\n      }\n\n      if (context) return false;\n      if (nextCh === 123) return true;\n\n      if (isIdentifierStart(nextCh)) {\n        keywordRelationalOperator.lastIndex = next;\n\n        if (keywordRelationalOperator.test(this.input)) {\n          var endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n          if (!isIdentifierChar(endCh) && endCh !== 92) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseStatement\",\n    value: function parseStatement(context, topLevel) {\n      if (this.match(types$1.at)) {\n        this.parseDecorators(true);\n      }\n\n      return this.parseStatementContent(context, topLevel);\n    }\n  }, {\n    key: \"parseStatementContent\",\n    value: function parseStatementContent(context, topLevel) {\n      var starttype = this.state.type;\n      var node = this.startNode();\n      var kind;\n\n      if (this.isLet(context)) {\n        starttype = types$1._var;\n        kind = \"let\";\n      }\n\n      switch (starttype) {\n        case types$1._break:\n        case types$1._continue:\n          return this.parseBreakContinueStatement(node, starttype.keyword);\n\n        case types$1._debugger:\n          return this.parseDebuggerStatement(node);\n\n        case types$1._do:\n          return this.parseDoStatement(node);\n\n        case types$1._for:\n          return this.parseForStatement(node);\n\n        case types$1._function:\n          if (this.lookaheadCharCode() === 46) break;\n\n          if (context) {\n            if (this.state.strict) {\n              this.raise(this.state.start, ErrorMessages.StrictFunction);\n            } else if (context !== \"if\" && context !== \"label\") {\n              this.raise(this.state.start, ErrorMessages.SloppyFunction);\n            }\n          }\n\n          return this.parseFunctionStatement(node, false, !context);\n\n        case types$1._class:\n          if (context) this.unexpected();\n          return this.parseClass(node, true);\n\n        case types$1._if:\n          return this.parseIfStatement(node);\n\n        case types$1._return:\n          return this.parseReturnStatement(node);\n\n        case types$1._switch:\n          return this.parseSwitchStatement(node);\n\n        case types$1._throw:\n          return this.parseThrowStatement(node);\n\n        case types$1._try:\n          return this.parseTryStatement(node);\n\n        case types$1._const:\n        case types$1._var:\n          kind = kind || this.state.value;\n\n          if (context && kind !== \"var\") {\n            this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n          }\n\n          return this.parseVarStatement(node, kind);\n\n        case types$1._while:\n          return this.parseWhileStatement(node);\n\n        case types$1._with:\n          return this.parseWithStatement(node);\n\n        case types$1.braceL:\n          return this.parseBlock();\n\n        case types$1.semi:\n          return this.parseEmptyStatement(node);\n\n        case types$1._import:\n          {\n            var nextTokenCharCode = this.lookaheadCharCode();\n\n            if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n              break;\n            }\n          }\n\n        case types$1._export:\n          {\n            if (!this.options.allowImportExportEverywhere && !topLevel) {\n              this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n            }\n\n            this.next();\n            var result;\n\n            if (starttype === types$1._import) {\n              result = this.parseImport(node);\n\n              if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n                this.sawUnambiguousESM = true;\n              }\n            } else {\n              result = this.parseExport(node);\n\n              if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n                this.sawUnambiguousESM = true;\n              }\n            }\n\n            this.assertModuleNodeAllowed(node);\n            return result;\n          }\n\n        default:\n          {\n            if (this.isAsyncFunction()) {\n              if (context) {\n                this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n              }\n\n              this.next();\n              return this.parseFunctionStatement(node, true, !context);\n            }\n          }\n      }\n\n      var maybeName = this.state.value;\n      var expr = this.parseExpression();\n\n      if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n        return this.parseLabeledStatement(node, maybeName, expr, context);\n      } else {\n        return this.parseExpressionStatement(node, expr);\n      }\n    }\n  }, {\n    key: \"assertModuleNodeAllowed\",\n    value: function assertModuleNodeAllowed(node) {\n      if (!this.options.allowImportExportEverywhere && !this.inModule) {\n        this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n      }\n    }\n  }, {\n    key: \"takeDecorators\",\n    value: function takeDecorators(node) {\n      var decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (decorators.length) {\n        node.decorators = decorators;\n        this.resetStartLocationFromNode(node, decorators[0]);\n        this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n      }\n    }\n  }, {\n    key: \"canHaveLeadingDecorator\",\n    value: function canHaveLeadingDecorator() {\n      return this.match(types$1._class);\n    }\n  }, {\n    key: \"parseDecorators\",\n    value: function parseDecorators(allowExport) {\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      while (this.match(types$1.at)) {\n        var decorator = this.parseDecorator();\n        currentContextDecorators.push(decorator);\n      }\n\n      if (this.match(types$1._export)) {\n        if (!allowExport) {\n          this.unexpected();\n        }\n\n        if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n        }\n      } else if (!this.canHaveLeadingDecorator()) {\n        throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n      }\n    }\n  }, {\n    key: \"parseDecorator\",\n    value: function parseDecorator() {\n      this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n      var node = this.startNode();\n      this.next();\n\n      if (this.hasPlugin(\"decorators\")) {\n        this.state.decoratorStack.push([]);\n        var startPos = this.state.start;\n        var startLoc = this.state.startLoc;\n        var expr;\n\n        if (this.eat(types$1.parenL)) {\n          expr = this.parseExpression();\n          this.expect(types$1.parenR);\n        } else {\n          expr = this.parseIdentifier(false);\n\n          while (this.eat(types$1.dot)) {\n            var _node10 = this.startNodeAt(startPos, startLoc);\n\n            _node10.object = expr;\n            _node10.property = this.parseIdentifier(true);\n            _node10.computed = false;\n            expr = this.finishNode(_node10, \"MemberExpression\");\n          }\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        this.state.decoratorStack.pop();\n      } else {\n        node.expression = this.parseExprSubscripts();\n      }\n\n      return this.finishNode(node, \"Decorator\");\n    }\n  }, {\n    key: \"parseMaybeDecoratorArguments\",\n    value: function parseMaybeDecoratorArguments(expr) {\n      if (this.eat(types$1.parenL)) {\n        var node = this.startNodeAtNode(expr);\n        node.callee = expr;\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        this.toReferencedList(node.arguments);\n        return this.finishNode(node, \"CallExpression\");\n      }\n\n      return expr;\n    }\n  }, {\n    key: \"parseBreakContinueStatement\",\n    value: function parseBreakContinueStatement(node, keyword) {\n      var isBreak = keyword === \"break\";\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.label = null;\n      } else {\n        node.label = this.parseIdentifier();\n        this.semicolon();\n      }\n\n      this.verifyBreakContinue(node, keyword);\n      return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n    }\n  }, {\n    key: \"verifyBreakContinue\",\n    value: function verifyBreakContinue(node, keyword) {\n      var isBreak = keyword === \"break\";\n      var i;\n\n      for (i = 0; i < this.state.labels.length; ++i) {\n        var lab = this.state.labels[i];\n\n        if (node.label == null || lab.name === node.label.name) {\n          if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n          if (node.label && isBreak) break;\n        }\n      }\n\n      if (i === this.state.labels.length) {\n        this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n      }\n    }\n  }, {\n    key: \"parseDebuggerStatement\",\n    value: function parseDebuggerStatement(node) {\n      this.next();\n      this.semicolon();\n      return this.finishNode(node, \"DebuggerStatement\");\n    }\n  }, {\n    key: \"parseHeaderExpression\",\n    value: function parseHeaderExpression() {\n      this.expect(types$1.parenL);\n      var val = this.parseExpression();\n      this.expect(types$1.parenR);\n      return val;\n    }\n  }, {\n    key: \"parseDoStatement\",\n    value: function parseDoStatement(node) {\n      var _this52 = this;\n\n      this.next();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this52.parseStatement(\"do\");\n      });\n      this.state.labels.pop();\n      this.expect(types$1._while);\n      node.test = this.parseHeaderExpression();\n      this.eat(types$1.semi);\n      return this.finishNode(node, \"DoWhileStatement\");\n    }\n  }, {\n    key: \"parseForStatement\",\n    value: function parseForStatement(node) {\n      this.next();\n      this.state.labels.push(loopLabel);\n      var awaitAt = -1;\n\n      if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n        awaitAt = this.state.lastTokStart;\n      }\n\n      this.scope.enter(SCOPE_OTHER);\n      this.expect(types$1.parenL);\n\n      if (this.match(types$1.semi)) {\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, null);\n      }\n\n      var startsWithLet = this.isContextual(\"let\");\n      var isLet = startsWithLet && this.isLetKeyword();\n\n      if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n        var _init = this.startNode();\n\n        var kind = isLet ? \"let\" : this.state.value;\n        this.next();\n        this.parseVar(_init, true, kind);\n        this.finishNode(_init, \"VariableDeclaration\");\n\n        if ((this.match(types$1._in) || this.isContextual(\"of\")) && _init.declarations.length === 1) {\n          return this.parseForIn(node, _init, awaitAt);\n        }\n\n        if (awaitAt > -1) {\n          this.unexpected(awaitAt);\n        }\n\n        return this.parseFor(node, _init);\n      }\n\n      var startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n      var refExpressionErrors = new ExpressionErrors();\n      var init = this.parseExpression(true, refExpressionErrors);\n      var isForOf = this.isContextual(\"of\");\n\n      if (isForOf) {\n        if (startsWithLet) {\n          this.raise(init.start, ErrorMessages.ForOfLet);\n        } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n          this.raise(init.start, ErrorMessages.ForOfAsync);\n        }\n      }\n\n      if (isForOf || this.match(types$1._in)) {\n        this.toAssignable(init, true);\n        var description = isForOf ? \"for-of statement\" : \"for-in statement\";\n        this.checkLVal(init, description);\n        return this.parseForIn(node, init, awaitAt);\n      } else {\n        this.checkExpressionErrors(refExpressionErrors, true);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n  }, {\n    key: \"parseFunctionStatement\",\n    value: function parseFunctionStatement(node, isAsync, declarationPosition) {\n      this.next();\n      return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n    }\n  }, {\n    key: \"parseIfStatement\",\n    value: function parseIfStatement(node) {\n      this.next();\n      node.test = this.parseHeaderExpression();\n      node.consequent = this.parseStatement(\"if\");\n      node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n      return this.finishNode(node, \"IfStatement\");\n    }\n  }, {\n    key: \"parseReturnStatement\",\n    value: function parseReturnStatement(node) {\n      if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n        this.raise(this.state.start, ErrorMessages.IllegalReturn);\n      }\n\n      this.next();\n\n      if (this.isLineTerminator()) {\n        node.argument = null;\n      } else {\n        node.argument = this.parseExpression();\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"ReturnStatement\");\n    }\n  }, {\n    key: \"parseSwitchStatement\",\n    value: function parseSwitchStatement(node) {\n      this.next();\n      node.discriminant = this.parseHeaderExpression();\n      var cases = node.cases = [];\n      this.expect(types$1.braceL);\n      this.state.labels.push(switchLabel);\n      this.scope.enter(SCOPE_OTHER);\n      var cur;\n\n      for (var sawDefault; !this.match(types$1.braceR);) {\n        if (this.match(types$1._case) || this.match(types$1._default)) {\n          var isCase = this.match(types$1._case);\n          if (cur) this.finishNode(cur, \"SwitchCase\");\n          cases.push(cur = this.startNode());\n          cur.consequent = [];\n          this.next();\n\n          if (isCase) {\n            cur.test = this.parseExpression();\n          } else {\n            if (sawDefault) {\n              this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n            }\n\n            sawDefault = true;\n            cur.test = null;\n          }\n\n          this.expect(types$1.colon);\n        } else {\n          if (cur) {\n            cur.consequent.push(this.parseStatement(null));\n          } else {\n            this.unexpected();\n          }\n        }\n      }\n\n      this.scope.exit();\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      this.next();\n      this.state.labels.pop();\n      return this.finishNode(node, \"SwitchStatement\");\n    }\n  }, {\n    key: \"parseThrowStatement\",\n    value: function parseThrowStatement(node) {\n      this.next();\n\n      if (this.hasPrecedingLineBreak()) {\n        this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n      }\n\n      node.argument = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(node, \"ThrowStatement\");\n    }\n  }, {\n    key: \"parseCatchClauseParam\",\n    value: function parseCatchClauseParam() {\n      var param = this.parseBindingAtom();\n      var simple = param.type === \"Identifier\";\n      this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n      this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n      return param;\n    }\n  }, {\n    key: \"parseTryStatement\",\n    value: function parseTryStatement(node) {\n      var _this53 = this;\n\n      this.next();\n      node.block = this.parseBlock();\n      node.handler = null;\n\n      if (this.match(types$1._catch)) {\n        var clause = this.startNode();\n        this.next();\n\n        if (this.match(types$1.parenL)) {\n          this.expect(types$1.parenL);\n          clause.param = this.parseCatchClauseParam();\n          this.expect(types$1.parenR);\n        } else {\n          clause.param = null;\n          this.scope.enter(SCOPE_OTHER);\n        }\n\n        clause.body = this.withSmartMixTopicForbiddingContext(function () {\n          return _this53.parseBlock(false, false);\n        });\n        this.scope.exit();\n        node.handler = this.finishNode(clause, \"CatchClause\");\n      }\n\n      node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n      if (!node.handler && !node.finalizer) {\n        this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n      }\n\n      return this.finishNode(node, \"TryStatement\");\n    }\n  }, {\n    key: \"parseVarStatement\",\n    value: function parseVarStatement(node, kind) {\n      this.next();\n      this.parseVar(node, false, kind);\n      this.semicolon();\n      return this.finishNode(node, \"VariableDeclaration\");\n    }\n  }, {\n    key: \"parseWhileStatement\",\n    value: function parseWhileStatement(node) {\n      var _this54 = this;\n\n      this.next();\n      node.test = this.parseHeaderExpression();\n      this.state.labels.push(loopLabel);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this54.parseStatement(\"while\");\n      });\n      this.state.labels.pop();\n      return this.finishNode(node, \"WhileStatement\");\n    }\n  }, {\n    key: \"parseWithStatement\",\n    value: function parseWithStatement(node) {\n      var _this55 = this;\n\n      if (this.state.strict) {\n        this.raise(this.state.start, ErrorMessages.StrictWith);\n      }\n\n      this.next();\n      node.object = this.parseHeaderExpression();\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this55.parseStatement(\"with\");\n      });\n      return this.finishNode(node, \"WithStatement\");\n    }\n  }, {\n    key: \"parseEmptyStatement\",\n    value: function parseEmptyStatement(node) {\n      this.next();\n      return this.finishNode(node, \"EmptyStatement\");\n    }\n  }, {\n    key: \"parseLabeledStatement\",\n    value: function parseLabeledStatement(node, maybeName, expr, context) {\n      var _iterator11 = _createForOfIteratorHelper(this.state.labels),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _label = _step11.value;\n\n          if (_label.name === maybeName) {\n            this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      var kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n      for (var i = this.state.labels.length - 1; i >= 0; i--) {\n        var label = this.state.labels[i];\n\n        if (label.statementStart === node.start) {\n          label.statementStart = this.state.start;\n          label.kind = kind;\n        } else {\n          break;\n        }\n      }\n\n      this.state.labels.push({\n        name: maybeName,\n        kind: kind,\n        statementStart: this.state.start\n      });\n      node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n      this.state.labels.pop();\n      node.label = expr;\n      return this.finishNode(node, \"LabeledStatement\");\n    }\n  }, {\n    key: \"parseExpressionStatement\",\n    value: function parseExpressionStatement(node, expr) {\n      node.expression = expr;\n      this.semicolon();\n      return this.finishNode(node, \"ExpressionStatement\");\n    }\n  }, {\n    key: \"parseBlock\",\n    value: function parseBlock() {\n      var allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n      var node = this.startNode();\n\n      if (allowDirectives) {\n        this.state.strictErrors.clear();\n      }\n\n      this.expect(types$1.braceL);\n\n      if (createNewLexicalScope) {\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n      if (createNewLexicalScope) {\n        this.scope.exit();\n      }\n\n      return this.finishNode(node, \"BlockStatement\");\n    }\n  }, {\n    key: \"isValidDirective\",\n    value: function isValidDirective(stmt) {\n      return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n    }\n  }, {\n    key: \"parseBlockBody\",\n    value: function parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n      var body = node.body = [];\n      var directives = node.directives = [];\n      this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n    }\n  }, {\n    key: \"parseBlockOrModuleBlockBody\",\n    value: function parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n      var oldStrict = this.state.strict;\n      var hasStrictModeDirective = false;\n      var parsedNonDirective = false;\n\n      while (!this.match(end)) {\n        var stmt = this.parseStatement(null, topLevel);\n\n        if (directives && !parsedNonDirective) {\n          if (this.isValidDirective(stmt)) {\n            var directive = this.stmtToDirective(stmt);\n            directives.push(directive);\n\n            if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n              hasStrictModeDirective = true;\n              this.setStrict(true);\n            }\n\n            continue;\n          }\n\n          parsedNonDirective = true;\n          this.state.strictErrors.clear();\n        }\n\n        body.push(stmt);\n      }\n\n      if (afterBlockParse) {\n        afterBlockParse.call(this, hasStrictModeDirective);\n      }\n\n      if (!oldStrict) {\n        this.setStrict(false);\n      }\n\n      this.next();\n    }\n  }, {\n    key: \"parseFor\",\n    value: function parseFor(node, init) {\n      var _this56 = this;\n\n      node.init = init;\n      this.semicolon(false);\n      node.test = this.match(types$1.semi) ? null : this.parseExpression();\n      this.semicolon(false);\n      node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n      this.expect(types$1.parenR);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this56.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, \"ForStatement\");\n    }\n  }, {\n    key: \"parseForIn\",\n    value: function parseForIn(node, init, awaitAt) {\n      var _this57 = this;\n\n      var isForIn = this.match(types$1._in);\n      this.next();\n\n      if (isForIn) {\n        if (awaitAt > -1) this.unexpected(awaitAt);\n      } else {\n        node.await = awaitAt > -1;\n      }\n\n      if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n        this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n      } else if (init.type === \"AssignmentPattern\") {\n        this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n      }\n\n      node.left = init;\n      node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n      this.expect(types$1.parenR);\n      node.body = this.withSmartMixTopicForbiddingContext(function () {\n        return _this57.parseStatement(\"for\");\n      });\n      this.scope.exit();\n      this.state.labels.pop();\n      return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n    }\n  }, {\n    key: \"parseVar\",\n    value: function parseVar(node, isFor, kind) {\n      var declarations = node.declarations = [];\n      var isTypescript = this.hasPlugin(\"typescript\");\n      node.kind = kind;\n\n      for (;;) {\n        var decl = this.startNode();\n        this.parseVarId(decl, kind);\n\n        if (this.eat(types$1.eq)) {\n          decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n        } else {\n          if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n            if (!isTypescript) {\n              this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n            }\n          } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n          }\n\n          decl.init = null;\n        }\n\n        declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n        if (!this.eat(types$1.comma)) break;\n      }\n\n      return node;\n    }\n  }, {\n    key: \"parseVarId\",\n    value: function parseVarId(decl, kind) {\n      decl.id = this.parseBindingAtom();\n      this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n    }\n  }, {\n    key: \"parseFunction\",\n    value: function parseFunction(node) {\n      var _this58 = this;\n\n      var statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n      var isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isStatement = statement & FUNC_STATEMENT;\n      var isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n      var requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n      this.initFunction(node, isAsync);\n\n      if (this.match(types$1.star) && isHangingStatement) {\n        this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n      }\n\n      node.generator = this.eat(types$1.star);\n\n      if (isStatement) {\n        node.id = this.parseFunctionId(requireId);\n      }\n\n      var oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = false;\n      this.scope.enter(SCOPE_FUNCTION);\n      this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n      if (!isStatement) {\n        node.id = this.parseFunctionId();\n      }\n\n      this.parseFunctionParams(node, false);\n      this.withSmartMixTopicForbiddingContext(function () {\n        _this58.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n      });\n      this.prodParam.exit();\n      this.scope.exit();\n\n      if (isStatement && !isHangingStatement) {\n        this.registerFunctionStatementId(node);\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    }\n  }, {\n    key: \"parseFunctionId\",\n    value: function parseFunctionId(requireId) {\n      return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n    }\n  }, {\n    key: \"parseFunctionParams\",\n    value: function parseFunctionParams(node, allowModifiers) {\n      this.expect(types$1.parenL);\n      this.expressionScope.enter(newParameterDeclarationScope());\n      node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n      this.expressionScope.exit();\n    }\n  }, {\n    key: \"registerFunctionStatementId\",\n    value: function registerFunctionStatementId(node) {\n      if (!node.id) return;\n      this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n    }\n  }, {\n    key: \"parseClass\",\n    value: function parseClass(node, isStatement, optionalId) {\n      this.next();\n      this.takeDecorators(node);\n      var oldStrict = this.state.strict;\n      this.state.strict = true;\n      this.parseClassId(node, isStatement, optionalId);\n      this.parseClassSuper(node);\n      node.body = this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n    }\n  }, {\n    key: \"isClassProperty\",\n    value: function isClassProperty() {\n      return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n    }\n  }, {\n    key: \"isClassMethod\",\n    value: function isClassMethod() {\n      return this.match(types$1.parenL);\n    }\n  }, {\n    key: \"isNonstaticConstructor\",\n    value: function isNonstaticConstructor(method) {\n      return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n    }\n  }, {\n    key: \"parseClassBody\",\n    value: function parseClassBody(hadSuperClass, oldStrict) {\n      var _this59 = this;\n\n      this.classScope.enter();\n      var state = {\n        hadConstructor: false,\n        hadSuperClass: hadSuperClass\n      };\n      var decorators = [];\n      var classBody = this.startNode();\n      classBody.body = [];\n      this.expect(types$1.braceL);\n      this.withSmartMixTopicForbiddingContext(function () {\n        while (!_this59.match(types$1.braceR)) {\n          if (_this59.eat(types$1.semi)) {\n            if (decorators.length > 0) {\n              throw _this59.raise(_this59.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n            }\n\n            continue;\n          }\n\n          if (_this59.match(types$1.at)) {\n            decorators.push(_this59.parseDecorator());\n            continue;\n          }\n\n          var member = _this59.startNode();\n\n          if (decorators.length) {\n            member.decorators = decorators;\n\n            _this59.resetStartLocationFromNode(member, decorators[0]);\n\n            decorators = [];\n          }\n\n          _this59.parseClassMember(classBody, member, state);\n\n          if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n            _this59.raise(member.start, ErrorMessages.DecoratorConstructor);\n          }\n        }\n      });\n      this.state.strict = oldStrict;\n      this.next();\n\n      if (decorators.length) {\n        throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n      }\n\n      this.classScope.exit();\n      return this.finishNode(classBody, \"ClassBody\");\n    }\n  }, {\n    key: \"parseClassMemberFromModifier\",\n    value: function parseClassMemberFromModifier(classBody, member) {\n      var key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        var method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return true;\n      } else if (this.isClassProperty()) {\n        var prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return true;\n      }\n\n      this.resetPreviousNodeTrailingComments(key);\n      return false;\n    }\n  }, {\n    key: \"parseClassMember\",\n    value: function parseClassMember(classBody, member, state) {\n      var isStatic = this.isContextual(\"static\");\n\n      if (isStatic) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          return;\n        }\n\n        if (this.eat(types$1.braceL)) {\n          this.parseClassStaticBlock(classBody, member);\n          return;\n        }\n      }\n\n      this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n  }, {\n    key: \"parseClassMemberWithIsStatic\",\n    value: function parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n      var publicMethod = member;\n      var privateMethod = member;\n      var publicProp = member;\n      var privateProp = member;\n      var method = publicMethod;\n      var publicMember = publicMethod;\n      member.static = isStatic;\n\n      if (this.eat(types$1.star)) {\n        method.kind = \"method\";\n        var isPrivateName = this.match(types$1.privateName);\n        this.parseClassElementName(method);\n\n        if (isPrivateName) {\n          this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n          return;\n        }\n\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n        return;\n      }\n\n      var isContextual = this.match(types$1.name) && !this.state.containsEsc;\n      var isPrivate = this.match(types$1.privateName);\n      var key = this.parseClassElementName(member);\n      var maybeQuestionTokenStart = this.state.start;\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (this.isClassMethod()) {\n        method.kind = \"method\";\n\n        if (isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n          return;\n        }\n\n        var isConstructor = this.isNonstaticConstructor(publicMethod);\n        var allowsDirectSuper = false;\n\n        if (isConstructor) {\n          publicMethod.kind = \"constructor\";\n\n          if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n            this.raise(key.start, ErrorMessages.DuplicateConstructor);\n          }\n\n          if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n            this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n          }\n\n          state.hadConstructor = true;\n          allowsDirectSuper = state.hadSuperClass;\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n      } else if (this.isClassProperty()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n        this.resetPreviousNodeTrailingComments(key);\n        var isGenerator = this.eat(types$1.star);\n\n        if (publicMember.optional) {\n          this.unexpected(maybeQuestionTokenStart);\n        }\n\n        method.kind = \"method\";\n\n        var _isPrivate = this.match(types$1.privateName);\n\n        this.parseClassElementName(method);\n        this.parsePostMemberNameModifiers(publicMember);\n\n        if (_isPrivate) {\n          this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n        }\n      } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(types$1.star) && this.isLineTerminator())) {\n        this.resetPreviousNodeTrailingComments(key);\n        method.kind = key.name;\n\n        var _isPrivate2 = this.match(types$1.privateName);\n\n        this.parseClassElementName(publicMethod);\n\n        if (_isPrivate2) {\n          this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        } else {\n          if (this.isNonstaticConstructor(publicMethod)) {\n            this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n          }\n\n          this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n        }\n\n        this.checkGetterSetterParams(publicMethod);\n      } else if (this.isLineTerminator()) {\n        if (isPrivate) {\n          this.pushClassPrivateProperty(classBody, privateProp);\n        } else {\n          this.pushClassProperty(classBody, publicProp);\n        }\n      } else {\n        this.unexpected();\n      }\n    }\n  }, {\n    key: \"parseClassElementName\",\n    value: function parseClassElementName(member) {\n      var _this$state5 = this.state,\n          type = _this$state5.type,\n          value = _this$state5.value,\n          start = _this$state5.start;\n\n      if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n        this.raise(start, ErrorMessages.StaticPrototype);\n      }\n\n      if (type === types$1.privateName && value === \"constructor\") {\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      return this.parsePropertyName(member, true);\n    }\n  }, {\n    key: \"parseClassStaticBlock\",\n    value: function parseClassStaticBlock(classBody, member) {\n      var _member$decorators;\n\n      this.expectPlugin(\"classStaticBlock\", member.start);\n      this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n      var oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(PARAM);\n      var body = member.body = [];\n      this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n      this.prodParam.exit();\n      this.scope.exit();\n      this.state.labels = oldLabels;\n      classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n      if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n        this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n      }\n    }\n  }, {\n    key: \"pushClassProperty\",\n    value: function pushClassProperty(classBody, prop) {\n      if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n        this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n      }\n\n      classBody.body.push(this.parseClassProperty(prop));\n    }\n  }, {\n    key: \"pushClassPrivateProperty\",\n    value: function pushClassPrivateProperty(classBody, prop) {\n      var node = this.parseClassPrivateProperty(prop);\n      classBody.body.push(node);\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n    }\n  }, {\n    key: \"pushClassMethod\",\n    value: function pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n      classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n    }\n  }, {\n    key: \"pushClassPrivateMethod\",\n    value: function pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n      var node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n      classBody.body.push(node);\n      var kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n    }\n  }, {\n    key: \"parsePostMemberNameModifiers\",\n    value: function parsePostMemberNameModifiers(methodOrProp) {}\n  }, {\n    key: \"parseClassPrivateProperty\",\n    value: function parseClassPrivateProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassPrivateProperty\");\n    }\n  }, {\n    key: \"parseClassProperty\",\n    value: function parseClassProperty(node) {\n      this.parseInitializer(node);\n      this.semicolon();\n      return this.finishNode(node, \"ClassProperty\");\n    }\n  }, {\n    key: \"parseInitializer\",\n    value: function parseInitializer(node) {\n      this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n      this.expressionScope.enter(newExpressionScope());\n      this.prodParam.enter(PARAM);\n      node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n      this.expressionScope.exit();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n  }, {\n    key: \"parseClassId\",\n    value: function parseClassId(node, isStatement, optionalId) {\n      var bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n      if (this.match(types$1.name)) {\n        node.id = this.parseIdentifier();\n\n        if (isStatement) {\n          this.checkLVal(node.id, \"class name\", bindingType);\n        }\n      } else {\n        if (optionalId || !isStatement) {\n          node.id = null;\n        } else {\n          this.unexpected(null, ErrorMessages.MissingClassName);\n        }\n      }\n    }\n  }, {\n    key: \"parseClassSuper\",\n    value: function parseClassSuper(node) {\n      node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n    }\n  }, {\n    key: \"parseExport\",\n    value: function parseExport(node) {\n      var hasDefault = this.maybeParseExportDefaultSpecifier(node);\n      var parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n      var hasStar = parseAfterDefault && this.eatExportStar(node);\n      var hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n      var parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n      var isFromRequired = hasDefault || hasStar;\n\n      if (hasStar && !hasNamespace) {\n        if (hasDefault) this.unexpected();\n        this.parseExportFrom(node, true);\n        return this.finishNode(node, \"ExportAllDeclaration\");\n      }\n\n      var hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n      if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n        throw this.unexpected(null, types$1.braceL);\n      }\n\n      var hasDeclaration;\n\n      if (isFromRequired || hasSpecifiers) {\n        hasDeclaration = false;\n        this.parseExportFrom(node, isFromRequired);\n      } else {\n        hasDeclaration = this.maybeParseExportDeclaration(node);\n      }\n\n      if (isFromRequired || hasSpecifiers || hasDeclaration) {\n        this.checkExport(node, true, false, !!node.source);\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      if (this.eat(types$1._default)) {\n        node.declaration = this.parseExportDefaultExpression();\n        this.checkExport(node, true, true);\n        return this.finishNode(node, \"ExportDefaultDeclaration\");\n      }\n\n      throw this.unexpected(null, types$1.braceL);\n    }\n  }, {\n    key: \"eatExportStar\",\n    value: function eatExportStar(node) {\n      return this.eat(types$1.star);\n    }\n  }, {\n    key: \"maybeParseExportDefaultSpecifier\",\n    value: function maybeParseExportDefaultSpecifier(node) {\n      if (this.isExportDefaultSpecifier()) {\n        this.expectPlugin(\"exportDefaultFrom\");\n        var specifier = this.startNode();\n        specifier.exported = this.parseIdentifier(true);\n        node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamespaceSpecifier\",\n    value: function maybeParseExportNamespaceSpecifier(node) {\n      if (this.isContextual(\"as\")) {\n        if (!node.specifiers) node.specifiers = [];\n        var specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n        this.next();\n        specifier.exported = this.parseModuleExportName();\n        node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportNamedSpecifiers\",\n    value: function maybeParseExportNamedSpecifiers(node) {\n      if (this.match(types$1.braceL)) {\n        var _node$specifiers;\n\n        if (!node.specifiers) node.specifiers = [];\n\n        (_node$specifiers = node.specifiers).push.apply(_node$specifiers, _toConsumableArray(this.parseExportSpecifiers()));\n\n        node.source = null;\n        node.declaration = null;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseExportDeclaration\",\n    value: function maybeParseExportDeclaration(node) {\n      if (this.shouldParseExportDeclaration()) {\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.parseExportDeclaration(node);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isAsyncFunction\",\n    value: function isAsyncFunction() {\n      if (!this.isContextual(\"async\")) return false;\n      var next = this.nextTokenStart();\n      return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n    }\n  }, {\n    key: \"parseExportDefaultExpression\",\n    value: function parseExportDefaultExpression() {\n      var expr = this.startNode();\n      var isAsync = this.isAsyncFunction();\n\n      if (this.match(types$1._function) || isAsync) {\n        this.next();\n\n        if (isAsync) {\n          this.next();\n        }\n\n        return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n      } else if (this.match(types$1._class)) {\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types$1.at)) {\n        if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        }\n\n        this.parseDecorators(false);\n        return this.parseClass(expr, true, true);\n      } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n        throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n      } else {\n        var res = this.parseMaybeAssignAllowIn();\n        this.semicolon();\n        return res;\n      }\n    }\n  }, {\n    key: \"parseExportDeclaration\",\n    value: function parseExportDeclaration(node) {\n      return this.parseStatement(null);\n    }\n  }, {\n    key: \"isExportDefaultSpecifier\",\n    value: function isExportDefaultSpecifier() {\n      if (this.match(types$1.name)) {\n        var value = this.state.value;\n\n        if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n          return false;\n        }\n\n        if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n          var l = this.lookahead();\n\n          if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n            this.expectOnePlugin([\"flow\", \"typescript\"]);\n            return false;\n          }\n        }\n      } else if (!this.match(types$1._default)) {\n        return false;\n      }\n\n      var next = this.nextTokenStart();\n      var hasFrom = this.isUnparsedContextual(next, \"from\");\n\n      if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n        return true;\n      }\n\n      if (this.match(types$1._default) && hasFrom) {\n        var nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n        return nextAfterFrom === 34 || nextAfterFrom === 39;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseExportFrom\",\n    value: function parseExportFrom(node, expect) {\n      if (this.eatContextual(\"from\")) {\n        node.source = this.parseImportSource();\n        this.checkExport(node);\n        var assertions = this.maybeParseImportAssertions();\n\n        if (assertions) {\n          node.assertions = assertions;\n        }\n      } else {\n        if (expect) {\n          this.unexpected();\n        } else {\n          node.source = null;\n        }\n      }\n\n      this.semicolon();\n    }\n  }, {\n    key: \"shouldParseExportDeclaration\",\n    value: function shouldParseExportDeclaration() {\n      if (this.match(types$1.at)) {\n        this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n        if (this.hasPlugin(\"decorators\")) {\n          if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n            this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n          } else {\n            return true;\n          }\n        }\n      }\n\n      return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n    }\n  }, {\n    key: \"checkExport\",\n    value: function checkExport(node, checkNames, isDefault, isFrom) {\n      if (checkNames) {\n        if (isDefault) {\n          this.checkDuplicateExports(node, \"default\");\n\n          if (this.hasPlugin(\"exportDefaultFrom\")) {\n            var _declaration$extra;\n\n            var declaration = node.declaration;\n\n            if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n              this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n            }\n          }\n        } else if (node.specifiers && node.specifiers.length) {\n          var _iterator12 = _createForOfIteratorHelper(node.specifiers),\n              _step12;\n\n          try {\n            for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n              var specifier = _step12.value;\n              var exported = specifier.exported;\n              var exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n              this.checkDuplicateExports(specifier, exportedName);\n\n              if (!isFrom && specifier.local) {\n                var local = specifier.local;\n\n                if (local.type !== \"Identifier\") {\n                  this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n                } else {\n                  this.checkReservedWord(local.name, local.start, true, false);\n                  this.scope.checkLocalExport(local);\n                }\n              }\n            }\n          } catch (err) {\n            _iterator12.e(err);\n          } finally {\n            _iterator12.f();\n          }\n        } else if (node.declaration) {\n          if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n            var id = node.declaration.id;\n            if (!id) throw new Error(\"Assertion failure\");\n            this.checkDuplicateExports(node, id.name);\n          } else if (node.declaration.type === \"VariableDeclaration\") {\n            var _iterator13 = _createForOfIteratorHelper(node.declaration.declarations),\n                _step13;\n\n            try {\n              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                var _declaration = _step13.value;\n                this.checkDeclaration(_declaration.id);\n              }\n            } catch (err) {\n              _iterator13.e(err);\n            } finally {\n              _iterator13.f();\n            }\n          }\n        }\n      }\n\n      var currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n      if (currentContextDecorators.length) {\n        throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n      }\n    }\n  }, {\n    key: \"checkDeclaration\",\n    value: function checkDeclaration(node) {\n      if (node.type === \"Identifier\") {\n        this.checkDuplicateExports(node, node.name);\n      } else if (node.type === \"ObjectPattern\") {\n        var _iterator14 = _createForOfIteratorHelper(node.properties),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var prop = _step14.value;\n            this.checkDeclaration(prop);\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n      } else if (node.type === \"ArrayPattern\") {\n        var _iterator15 = _createForOfIteratorHelper(node.elements),\n            _step15;\n\n        try {\n          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n            var elem = _step15.value;\n\n            if (elem) {\n              this.checkDeclaration(elem);\n            }\n          }\n        } catch (err) {\n          _iterator15.e(err);\n        } finally {\n          _iterator15.f();\n        }\n      } else if (node.type === \"ObjectProperty\") {\n        this.checkDeclaration(node.value);\n      } else if (node.type === \"RestElement\") {\n        this.checkDeclaration(node.argument);\n      } else if (node.type === \"AssignmentPattern\") {\n        this.checkDeclaration(node.left);\n      }\n    }\n  }, {\n    key: \"checkDuplicateExports\",\n    value: function checkDuplicateExports(node, name) {\n      if (this.exportedIdentifiers.has(name)) {\n        this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n      }\n\n      this.exportedIdentifiers.add(name);\n    }\n  }, {\n    key: \"parseExportSpecifiers\",\n    value: function parseExportSpecifiers() {\n      var nodes = [];\n      var first = true;\n      this.expect(types$1.braceL);\n\n      while (!this.eat(types$1.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          this.expect(types$1.comma);\n          if (this.eat(types$1.braceR)) break;\n        }\n\n        var node = this.startNode();\n        var isString = this.match(types$1.string);\n        var local = this.parseModuleExportName();\n        node.local = local;\n\n        if (this.eatContextual(\"as\")) {\n          node.exported = this.parseModuleExportName();\n        } else if (isString) {\n          node.exported = cloneStringLiteral(local);\n        } else {\n          node.exported = cloneIdentifier(local);\n        }\n\n        nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"parseModuleExportName\",\n    value: function parseModuleExportName() {\n      if (this.match(types$1.string)) {\n        var result = this.parseStringLiteral(this.state.value);\n        var surrogate = result.value.match(loneSurrogate);\n\n        if (surrogate) {\n          this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n        }\n\n        return result;\n      }\n\n      return this.parseIdentifier(true);\n    }\n  }, {\n    key: \"parseImport\",\n    value: function parseImport(node) {\n      node.specifiers = [];\n\n      if (!this.match(types$1.string)) {\n        var hasDefault = this.maybeParseDefaultImportSpecifier(node);\n        var parseNext = !hasDefault || this.eat(types$1.comma);\n        var hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n        if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n        this.expectContextual(\"from\");\n      }\n\n      node.source = this.parseImportSource();\n      var assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      } else {\n        var attributes = this.maybeParseModuleAttributes();\n\n        if (attributes) {\n          node.attributes = attributes;\n        }\n      }\n\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n  }, {\n    key: \"parseImportSource\",\n    value: function parseImportSource() {\n      if (!this.match(types$1.string)) this.unexpected();\n      return this.parseExprAtom();\n    }\n  }, {\n    key: \"shouldParseDefaultImport\",\n    value: function shouldParseDefaultImport(node) {\n      return this.match(types$1.name);\n    }\n  }, {\n    key: \"parseImportSpecifierLocal\",\n    value: function parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n      specifier.local = this.parseIdentifier();\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n  }, {\n    key: \"parseAssertEntries\",\n    value: function parseAssertEntries() {\n      var attrs = [];\n      var attrNames = new Set();\n\n      do {\n        if (this.match(types$1.braceR)) {\n          break;\n        }\n\n        var node = this.startNode();\n        var keyName = this.state.value;\n\n        if (attrNames.has(keyName)) {\n          this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n        }\n\n        attrNames.add(keyName);\n\n        if (this.match(types$1.string)) {\n          node.key = this.parseStringLiteral(keyName);\n        } else {\n          node.key = this.parseIdentifier(true);\n        }\n\n        this.expect(types$1.colon);\n\n        if (!this.match(types$1.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseStringLiteral(this.state.value);\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types$1.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseModuleAttributes\",\n    value: function maybeParseModuleAttributes() {\n      if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"moduleAttributes\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"moduleAttributes\")) return [];\n        return null;\n      }\n\n      var attrs = [];\n      var attributes = new Set();\n\n      do {\n        var node = this.startNode();\n        node.key = this.parseIdentifier(true);\n\n        if (node.key.name !== \"type\") {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n        }\n\n        if (attributes.has(node.key.name)) {\n          this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n        }\n\n        attributes.add(node.key.name);\n        this.expect(types$1.colon);\n\n        if (!this.match(types$1.string)) {\n          throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n        }\n\n        node.value = this.parseStringLiteral(this.state.value);\n        this.finishNode(node, \"ImportAttribute\");\n        attrs.push(node);\n      } while (this.eat(types$1.comma));\n\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseImportAssertions\",\n    value: function maybeParseImportAssertions() {\n      if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n        this.expectPlugin(\"importAssertions\");\n        this.next();\n      } else {\n        if (this.hasPlugin(\"importAssertions\")) return [];\n        return null;\n      }\n\n      this.eat(types$1.braceL);\n      var attrs = this.parseAssertEntries();\n      this.eat(types$1.braceR);\n      return attrs;\n    }\n  }, {\n    key: \"maybeParseDefaultImportSpecifier\",\n    value: function maybeParseDefaultImportSpecifier(node) {\n      if (this.shouldParseDefaultImport(node)) {\n        this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeParseStarImportSpecifier\",\n    value: function maybeParseStarImportSpecifier(node) {\n      if (this.match(types$1.star)) {\n        var specifier = this.startNode();\n        this.next();\n        this.expectContextual(\"as\");\n        this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"parseNamedImportSpecifiers\",\n    value: function parseNamedImportSpecifiers(node) {\n      var first = true;\n      this.expect(types$1.braceL);\n\n      while (!this.eat(types$1.braceR)) {\n        if (first) {\n          first = false;\n        } else {\n          if (this.eat(types$1.colon)) {\n            throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n          }\n\n          this.expect(types$1.comma);\n          if (this.eat(types$1.braceR)) break;\n        }\n\n        this.parseImportSpecifier(node);\n      }\n    }\n  }, {\n    key: \"parseImportSpecifier\",\n    value: function parseImportSpecifier(node) {\n      var specifier = this.startNode();\n      var importedIsString = this.match(types$1.string);\n      specifier.imported = this.parseModuleExportName();\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        var imported = specifier.imported;\n\n        if (importedIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n        }\n\n        this.checkReservedWord(imported.name, specifier.start, true, true);\n        specifier.local = cloneIdentifier(imported);\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n    }\n  }, {\n    key: \"isThisParam\",\n    value: function isThisParam(param) {\n      return param.type === \"Identifier\" && param.name === \"this\";\n    }\n  }]);\n\n  return StatementParser;\n}(ExpressionParser);\n\nvar Parser = /*#__PURE__*/function (_StatementParser) {\n  _inherits(Parser, _StatementParser);\n\n  var _super20 = _createSuper(Parser);\n\n  function Parser(options, input) {\n    var _this60;\n\n    _classCallCheck(this, Parser);\n\n    options = getOptions(options);\n    _this60 = _super20.call(this, options, input);\n    _this60.options = options;\n\n    _this60.initializeScopes();\n\n    _this60.plugins = pluginsMap(_this60.options.plugins);\n    _this60.filename = options.sourceFilename;\n    return _this60;\n  }\n\n  _createClass(Parser, [{\n    key: \"getScopeHandler\",\n    value: function getScopeHandler() {\n      return ScopeHandler;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      this.enterInitialScopes();\n      var file = this.startNode();\n      var program = this.startNode();\n      this.nextToken();\n      file.errors = null;\n      this.parseTopLevel(file, program);\n      file.errors = this.state.errors;\n      return file;\n    }\n  }]);\n\n  return Parser;\n}(StatementParser);\n\nfunction pluginsMap(plugins) {\n  var pluginMap = new Map();\n\n  var _iterator16 = _createForOfIteratorHelper(plugins),\n      _step16;\n\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var plugin = _step16.value;\n\n      var _ref17 = Array.isArray(plugin) ? plugin : [plugin, {}],\n          _ref18 = _slicedToArray(_ref17, 2),\n          name = _ref18[0],\n          options = _ref18[1];\n\n      if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      var parser = getParser(options, input);\n      var ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  var parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  var cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nvar parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  var pluginList = mixinPluginNames.filter(function (name) {\n    return hasPlugin(pluginsFromOptions, name);\n  });\n  var key = pluginList.join(\"/\");\n  var cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    var _iterator17 = _createForOfIteratorHelper(pluginList),\n        _step17;\n\n    try {\n      for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n        var plugin = _step17.value;\n        cls = mixinPlugins[plugin](cls);\n      }\n    } catch (err) {\n      _iterator17.e(err);\n    } finally {\n      _iterator17.f();\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","name","options","token","set","createBinop","types$1","num","bigint","decimal","regexp","string","privateName","eof","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","slashAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","plugins","has","plugin","hasPlugin","get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","comment","loc","state","push","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","leadingComments","commentStart","charCodeAt","type","properties","arguments","params","specifiers","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","messages","templates","keys","forEach","reasonCode","ParserError","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raiseWithData","getLocationForPosition","message","replace","_","errorRecovery","errors","error","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","pattern","flags","regex","e","estreeParseLiteral","bigInt","BigInt","_unused","String","parseLiteral","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","isAsync","isObjectProperty","checkDeclaration","method","_stmt$expression$extr","parenthesized","addExtra","args","directiveStatements","directives","map","d","directiveToStmt","body","concat","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","getPluginOption","convertPrivateNameToPrivateIdentifier","id","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","propertyNode","prop","isPattern","isAccessor","shorthand","startPos","refExpressionErrors","isBinding","isAssignable","isLHS","toAssignable","raise","key","optional","callee","_node$arguments$","attributes","exported","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","TokContext","preserveSpace","types","brace","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","currentVarScopeFlags","currentThisScopeFlags","treatFunctionsAsVarInScope","currentScope","createScope","scope","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","inPropertyName","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","exprAllowed","containsEsc","strictErrors","tokensLength","strictMode","sourceType","startLine","curPosition","skipArrays","val","Array","isArray","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","tokens","init","checkKeywordEscapes","pushToken","nextToken","curContext","old","createLookaheadState","curr","nextTokenStartSince","nextTokenStart","cp","trail","clear","skipSpace","finishToken","readTmplToken","getTokenFromCode","codePointAtPos","indexOf","startSkip","ch","spaceStart","loop","skipBlockComment","addComment","attachComment","skipLineComment","CommentWhitespace","prevType","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readNumber","width","size","next2","readToken_dot","readToken_question","readRadixNumber","readString","readToken_slash","readToken_mult_modulo","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readToken_numberSign","readWord","fromCodePoint","str","escaped","inClass","content","mods","char","includes","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","readInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","containsInvalid","inTemplate","readCodePoint","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","kw","_this$state$type$upda","_this$state$type","call","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","elementType","classScope","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","ArrowHeadParsingScope","iterator","ExpressionScopeHandler","isCertainlyParameterDeclaration","canBeArrowParameterDeclaration","recordDeclarationError","iterateErrors","clearDeclarationError","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","functionFlags","UtilParser","op","isRelational","unexpected","nameStart","nameEnd","nextCh","isUnparsedContextual","isContextual","eat","eatContextual","hasPrecedingLineBreak","canInsertSemicolon","allowAsi","isLineTerminator","messageOrType","missingPlugin","names","some","join","fn","oldState","clone","abortSignal","failState","thrown","aborted","andThrow","shorthandAssign","doubleProto","optionalParameters","isPrivateName","property","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","paramFlags","enter","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","processComment","locationNode","resetStartLocation","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","OptionalBindingPattern","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","matches","Error","tok","oldInType","expect","flowParseType","moduloPos","expectContextual","parseExpression","predicate","flowParsePredicate","flowParseInterfaceish","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","flowParseTypeAndPredicateInitialiser","returnType","typeAnnotation","resetEndLocation","semicolon","declareName","insideModule","flowParseDeclareClass","flowParseDeclareFunction","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","flowParseDeclare","exit","hasModuleExport","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","liberal","checkReservedType","right","flowParseTypeInitialiser","declare","supertype","impltype","requireDefault","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","flowParseTypeParameter","expectRelational","oldNoAnonFunctionType","flowParseTypeOrImplicitInstantiation","isStatic","static","lookahead","flowParseObjectPropertyKey","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","flowParseObjectTypeInternalSlot","flowParseObjectTypeIndexer","flowParseObjectTypeCallProperty","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParsePrimaryType","first","lh","isThis","checkNotUnderscore","flowParseGenericType","isGroupedType","flowParseInterfaceType","flowIdentToTypeAnnotation","flowParseTupleType","reinterpretTypeAsFunctionTypeParam","parseLiteralAtNode","flowParseTypeofType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParsePostfixType","param","flowParseAnonFunctionWithoutParens","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","allowExpressionBody","forwardNoArrowParamsConversionAt","topLevel","flowParseInterface","shouldParseEnums","flowParseEnumDeclaration","isValidDirective","expr","lookaheadCharCode","setOptionalParametersError","originalNoArrowAt","tryParseConditionalConsequent","consequent","failed","getArrowLikeExpressions","valid","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingComma","parse","result","typeCastNode","decl","declarationNode","parseExportSpecifiers","parseExportFrom","hasNamespace","isStatement","optionalId","member","parseClassMemberFromModifier","fullWord","isIterator","readIterator","typeCastToParameter","exprList","trailingCommaPos","isParenthesizedExpr","_expr$extra","close","canBePattern","isTuple","toReferencedList","isThisParam","superTypeParameters","implemented","getObjectOrClassMethodParams","isPrivateNameAllowed","left","specifier","contextDescription","local","checkLVal","firstIdentIsString","firstIdent","parseModuleExportName","specifierTypeKind","isLookaheadContextual","as_ident","imported","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","allowModifiers","afterLeftParse","_jsx","jsx","tryParse","j_oTag","j_expr","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","resetStartLocationFromNode","maybeUnwrapTypeCastExpression","async","allowDuplicates","isArrowFunction","canBeArrow","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","finishCallExpression","shouldParseTypes","flowParseTypeParameterInstantiationCallOrNew","targs","parseFunctionParams","parseArrow","parseArrowExpression","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","enumName","memberName","toUpperCase","suppliedType","explicitType","endOfInit","literal","parseNumericLiteral","parseStringLiteral","parseBooleanLiteral","flowEnumMemberInit","expectedType","flowEnumErrorInvalidMemberInitializer","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumMemberRaw","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","flowEnumCheckExplicitTypeMismatch","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorNumberMemberNotInitialized","initializedMembers","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumErrorInvalidExplicitType","nameLoc","flowEnumParseExplicitType","flowEnumMembers","flowEnumStringMembers","empty","boolsLen","numsLen","strsLen","defaultedLen","flowEnumErrorInconsistentMemberValues","flowEnumBody","afterNext","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadEntity","jsxReadNewLine","normalizeCRLF","count","entity","jsxParseIdentifier","jsxParseNamespacedName","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseAttributeValue","jsxParseElementName","jsxParseOpeningElementAfterName","jsxParseAttribute","selfClosing","children","openingElement","jsxParseOpeningElementAt","closingElement","contents","jsxParseClosingElementAt","jsxParseElementAt","jsxParseSpreadChild","openingFragment","closingFragment","jsxParseElement","lookaheadState","jsxReadToken","jsxReadWord","jsxReadString","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PatternIsOptional","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","isLiteralPropertyName","tsTokenCanFollowModifier","allowedModifiers","tsTryParse","tsNextTokenCanFollowModifier","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","tsParseModifier","accessibility","hasOwnProperty","parseElement","tsIsListTerminator","tsParseDelimitedListWorker","expectSuccess","element","bracket","skipFirstToken","tsParseDelimitedList","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","typeName","lhs","parameterName","tsParseTypeAnnotation","asserts","exprName","tsParseImportType","tsParseTypeParameterName","constraint","tsEatThenParseType","tsParseTypeParameters","tsParseBracketedList","tsParseTypeParameter","tsParseTypeReference","returnToken","signature","returnTokenRequired","tsTryParseTypeParameters","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsFillSignature","tsParseTypeMemberSemicolon","tsLookAhead","tsIsUnambiguouslyIndexSignature","tsTryParseTypeAnnotation","readonly","nodeAny","firstParameter","tsParseSignatureMember","createIdentifier","tsParsePropertyOrMethodSignature","tsParseModifiers","idx","tsTryParseIndexSignature","parsePropertyName","tsParseObjectTypeMembers","tsParseList","tsParseTypeMember","tsIsIdentifier","tsExpectThenParseType","tsParseMappedTypeParameter","nameType","tsParseType","tsTryParseType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","abstract","parseTemplate","thisKeyword","tsParseThisTypeNode","tsParseThisTypePredicate","tsParseLiteralTypeNode","parseMaybeUnary","tsParseThisTypeOrThisTypePredicate","tsParseTypeQuery","tsIsStartOfMappedType","tsParseMappedType","tsParseTypeLiteral","tsParseTupleType","tsParseParenthesizedType","tsParseTemplateLiteralType","tsParseNonArrayType","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","find","tsParseTypeOperator","tsParseInferType","tsParseArrayTypeOrHigher","parseConstituentType","hasLeadingOperator","tsParseUnionOrIntersectionType","tsParseIntersectionTypeOrHigher","tsIsUnambiguouslyStartOfFunctionType","braceStackCounter","tsSkipParameterStart","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsIsStartOfFunctionType","tsParseFunctionOrConstructorType","isAbstractConstructorSignature","tsParseUnionTypeOrHigher","tsTryNextParseConstantContext","tsNextThenParseType","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseHeritageClause","cb","oldContext","tsDoThenParseType","initializer","tsParseEnumMember","parseBlockOrModuleBlockBody","nested","inner","tsParseModuleOrNamespaceDeclaration","tsParseModuleBlock","global","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","tsParseEnumDeclaration","parseVarStatement","tsParseAmbientExternalModuleDeclaration","tsParseDeclaration","tsTryParseDeclare","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","hasFollowingLineBreak","oldMaybeInArrowParameters","tsTryParseAndCatch","tsTryParseTypeOrTypePredicateAnnotation","tsInNoContext","tsIsDeclarationStart","decorators","override","parseMaybeDefault","parseAssignableListItemTypes","elt","pp","parameter","bodilessType","items","isInParens","tsCheckForInvalidTypeCasts","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","tsTryParseGenericAsyncArrowFunction","parseTaggedTemplateExpression","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","parseExprOp","checkKeywords","ahead","tsParseImportEqualsDeclaration","importNode","isAbstractClass","cls","interfaceNode","modifiers","invalidModifersForStaticBlocks","callParseClassMemberWithIsStatic","tsHasSomeModifiers","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","methodOrProp","tsParseExpressionStatement","isDeclare","shouldParseExportDeclaration","tsTryParseExportDeclaration","definite","parseClassPropertyAnnotation","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","tsParseTypeAssertion","toAssignableParenthesizedExpression","_expr$extra2","baseCount","firstParam","hasContextParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","placeholder","PlaceHolderErrors","ClassNameIsRequired","placeholders","assertNoSpace","finishPlaceholder","isFinished","parsePlaceholder","parseStatement","takeDecorators","oldStrict","parseClassId","parseClassSuper","parseClassBody","startsWith","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","parseV8Intrinsic","option","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","p","tupleSyntaxIsHash","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","recordParenthesizedIdentifierError","last","_node$extra2","isLast","toAssignableObjectExpressionProp","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","refNeedsArrowPos","parseBindingAtom","parseObjectLike","closeCharCode","allowEmpty","elts","parseRestBinding","checkCommaAfterRest","parseDecorator","parseAssignableListItem","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","isObjectMethod","elem","ExpressionParser","isRecord","protoRef","used","enterInitialScopes","finalizeRemainingComments","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","resultError","_resultError$pos","hasYield","parseYield","ownExpressionErrors","parseMaybeConditional","leftIsHackPipeExpression","checkExpressionErrors","parseExprOps","shouldExitDescending","parseConditional","prec","hasIn","checkPipelineAtInfixOperator","logical","coalesce","hasAwait","parseExprOpRightExpr","nextOp","withTopicBindingContext","bodyExpr","parseHackPipeBody","checkHackPipeBodyEarlyErrors","childExpr","parseSmartPipelineBodyInStyle","withSoloAwaitPermittingContext","parseFSharpPipelineBody","parseExprOpBaseRightExpr","bodyIsInGeneratorContext","bodyIsYieldExpression","sawUnary","isAwait","isAwaitAllowed","parseAwait","checkExponentialAfterUnary","update","isDelete","hasPropertyAsPrivateName","parseUpdate","isAmbiguousAwait","raiseOverwrite","parseExprSubscripts","parseSubscripts","maybeAsyncArrow","parseSubscript","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parsePrivateName","usePrivateName","parseNoCallExpr","shouldParseAsyncArrow","validateAsPattern","parseAsyncArrowFromCallExpression","toReferencedArguments","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","resetPreviousNodeTrailingComments","parseSuper","parseImportMetaProperty","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","parseDo","readRegexp","parseRegExpLiteral","parseBigIntLiteral","parseDecimalLiteral","parseNullLiteral","parseParenAndDistinguishExpression","parseArrayLike","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","pipeProposal","tokenType","finishTopicReference","lookaheadCh","codePointAt","expectOnePlugin","testTopicReferenceConfiguration","nodeType","topicReferenceIsAllowedInCurrentContext","registerTopicReference","pluginTopicToken","parseBlock","allowSuper","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","parseParenItem","innerEndPos","innerEndLoc","arrowNode","shouldParseArrow","parenExpression","metaProp","inNonArrowFunction","parseNew","isOptionalChain","parseNewArguments","parseExprList","isTagged","cooked","tail","curElt","parseTemplateElement","quasis","parseTemplateSubstitution","propHash","parsePropertyDefinition","checkProto","parseSpread","maybeAsyncOrAccessorProp","keyName","parseObjPropValue","_params","getGetterSetterExpectedParamCount","checkGetterSetterParams","parseObjectMethod","parseObjectProperty","oldInPropertyName","parseMaybePrivateName","generator","initFunction","parseFunctionBodyAndFinish","setArrowFunctionParameters","parseFunctionBody","isExpression","checkParams","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","inStaticBlock","recordAsyncArrowParametersError","inClassAndNotInNonArrowFunction","reservedTest","inFunction","recordParameterInitializerError","delegating","delegate","topicReferenceWasUsedInCurrentContext","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","initializeScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","StatementParser","interpreter","parseInterpreterDirective","parseBlockBody","isLetKeyword","endCh","parseStatementContent","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","assertModuleNodeAllowed","isAsyncFunction","maybeName","parseLabeledStatement","parseExpressionStatement","allowExport","currentContextDecorators","decorator","canHaveLeadingDecorator","parseMaybeDecoratorArguments","isBreak","verifyBreakContinue","lab","withSmartMixTopicForbiddingContext","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithUnescapedName","isForOf","description","declarationPosition","hasReturn","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","parseCatchClauseParam","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","stmtToDirective","setStrict","isForIn","await","isFor","isTypescript","parseVarId","parseMaybeAssignDisallowIn","statement","isHangingStatement","requireId","parseFunctionId","registerFunctionStatementId","treatFunctionsAsVar","hadConstructor","parseClassMember","isClassMethod","pushClassMethod","isClassProperty","parseClassProperty","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","pushClassPrivateMethod","isNonstaticConstructor","maybeQuestionTokenStart","parsePostMemberNameModifiers","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseClassPrivateProperty","declarePrivateName","getPrivateNameSV","parseInitializer","hasDefault","maybeParseExportDefaultSpecifier","parseAfterDefault","hasStar","eatExportStar","maybeParseExportNamespaceSpecifier","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkExport","parseExportDefaultExpression","isExportDefaultSpecifier","parseExportDeclaration","l","hasFrom","nextAfterFrom","assertions","maybeParseImportAssertions","checkNames","isDefault","isFrom","checkDuplicateExports","_declaration$extra","exportedName","checkLocalExport","nodes","isString","surrogate","toString","maybeParseDefaultImportSpecifier","parseNext","maybeParseModuleAttributes","attrs","attrNames","parseAssertEntries","shouldParseDefaultImport","parseImportSpecifierLocal","parseImportSpecifier","importedIsString","Parser","pluginsMap","parseTopLevel","pluginMap","_options","getParser","ast","moduleError","_unused2","getExpression","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.updateContext = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types$1 = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  decimal: new TokenType(\"decimal\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  privateName: new TokenType(\"#name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: new TokenType(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: new TokenType(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  bracketBarR: new TokenType(\"|]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: new TokenType(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: new TokenType(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else if (comments !== undefined) {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        commentWS.trailingNode.leadingComments = comments;\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\\n or a property of member expression (i.e. this.#p).\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction makeErrorTemplates(messages, code) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode,\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const value = stmt.expression.value;\n    const directive = super.stmtToDirective(stmt);\n    this.addExtra(directive.value, \"expressionValue\", value);\n    return directive;\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseMaybePrivateName(...args) {\n    const node = super.parseMaybePrivateName(...args);\n\n    if (node.type === \"PrivateName\" && this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    return node;\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.isPrivateName(node);\n    }\n\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n      return super.getPrivateNameSV(node);\n    }\n\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n    }\n\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n\n    if (this.getPluginOption(\"estree\", \"classFeatures\")) {\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n    }\n\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  template: new TokContext(\"`\", true)\n};\n\ntypes$1.braceR.updateContext = context => {\n  context.pop();\n};\n\ntypes$1.braceL.updateContext = types$1.braceHashL.updateContext = types$1.dollarBraceL.updateContext = context => {\n  context.push(types.brace);\n};\n\ntypes$1.backQuote.updateContext = context => {\n  if (context[context.length - 1] === types.template) {\n    context.pop();\n  } else {\n    context.push(types.template);\n  }\n};\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08c7\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\u9ffc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7ca\\ua7f5-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf\\u1ac0\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types$1.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.strictMode === true ? true : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types$1.eof);\n      return;\n    }\n\n    if (curContext === types.template) {\n      this.readTmplToken();\n    } else {\n      this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n    }\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(types$1.braceHashL);\n      } else {\n        this.finishToken(types$1.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(types$1.privateName, this.readWord1());\n    } else {\n      this.finishOp(types$1.hash, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types$1.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.dot);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.slashAssign, 2);\n    } else {\n      this.finishOp(types$1.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types$1.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types$1.star : types$1.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types$1.exponent;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? types$1.moduloAssign : types$1.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types$1.pipeline, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.braceBarR);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(types$1.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(types$1.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types$1.assign, 2);\n    } else {\n      this.finishOp(types$1.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types$1.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types$1.bitShift, size);\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types$1.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types$1.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types$1.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types$1.eq : types$1.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(types$1.assign, 3);\n      } else {\n        this.finishOp(types$1.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types$1.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types$1.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types$1.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types$1.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types$1.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types$1.comma);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.bracketL);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types$1.bracketR);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(types$1.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.braceL);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types$1.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types$1.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types$1.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types$1.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types$1.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types$1.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(types$1.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    this.finishToken(types$1.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types$1.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(types$1.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types$1.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types$1.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types$1.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types$1.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types$1.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types$1.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word) || types$1.name;\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, kw);\n    }\n  }\n\n  updateContext(prevType) {\n    var _this$state$type$upda, _this$state$type;\n\n    (_this$state$type$upda = (_this$state$type = this.state.type).updateContext) == null ? void 0 : _this$state$type$upda.call(_this$state$type, this.state.context);\n  }\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const classScope = this.current();\n    let redefined = classScope.privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && classScope.loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) classScope.loneAccessors.delete(name);\n      } else if (!redefined) {\n        classScope.loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    classScope.privateNames.add(name);\n    classScope.undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types$1.relational) && this.state.value === op;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types$1.relational);\n    }\n  }\n\n  isContextual(name) {\n    return this.match(types$1.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types$1.name);\n  }\n\n  expectContextual(name, template) {\n    if (!this.eatContextual(name)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types$1.eof) || this.match(types$1.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(types$1.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(types$1.semi)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (messageOrType instanceof TokenType) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${messageOrType.label}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: [name]\n      }, `This experimental syntax requires enabling the parser plugin: '${name}'`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: names\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n\n    if (!andThrow) {\n      return shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0;\n    }\n\n    if (shorthandAssign >= 0) {\n      this.unexpected(shorthandAssign);\n    }\n\n    if (doubleProto >= 0) {\n      this.raise(doubleProto, ErrorMessages.DuplicateProto);\n    }\n\n    if (optionalParameters >= 0) {\n      this.unexpected(optionalParameters);\n    }\n  }\n\n  isLiteralPropertyName() {\n    return this.match(types$1.name) || !!this.state.type.keyword || this.match(types$1.string) || this.match(types$1.num) || this.match(types$1.bigint) || this.match(types$1.decimal);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = \"StringLiteral\";\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  OptionalBindingPattern: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types$1.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types$1.string && type !== types$1.semi && type !== types$1.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types$1.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(\"checks\");\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(types$1.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types$1.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types$1.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types$1.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types$1.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types$1.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(types$1.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types$1._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types$1._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types$1._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types$1.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types$1._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types$1.braceL);\n\n    while (!this.match(types$1.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types$1._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types$1._typeof)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types$1.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types$1._export);\n\n    if (this.eat(types$1._default)) {\n      if (this.match(types$1._function) || this.match(types$1._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types$1._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(types$1._var) || this.match(types$1._function) || this.match(types$1._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types$1.star) || this.match(types$1.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types$1.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types$1.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types$1.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types$1.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types$1.eq)) {\n      this.eat(types$1.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types$1._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types$1.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types$1.num) || this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types$1.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types$1.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types$1.bracketR);\n    this.expect(types$1.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types$1.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1._this)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(types$1.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types$1.braceBarL)) {\n      this.expect(types$1.braceBarL);\n      endDelim = types$1.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types$1.braceL);\n      endDelim = types$1.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types$1.colon && lookahead.type !== types$1.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types$1.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types$1.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types$1.name || lookahead.type === types$1.string || lookahead.type === types$1.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types$1.ellipsis)) {\n      const isInexactToken = this.match(types$1.comma) || this.match(types$1.semi) || this.match(types$1.braceR) || this.match(types$1.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types$1.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types$1.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types$1.semi) && !this.eat(types$1.comma) && !this.match(types$1.braceR) && !this.match(types$1.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types$1.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types$1.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types$1.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types$1.bracketR)) break;\n      this.expect(types$1.comma);\n    }\n\n    this.expect(types$1.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === types$1._this;\n\n    if (lh.type === types$1.colon || lh.type === types$1.question) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(types$1.question)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(types$1._this)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    while (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(types$1.parenR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    if (this.eat(types$1.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types$1.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types$1.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types$1.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types$1.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types$1.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types$1.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(types$1.parenR);\n          this.expect(types$1.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types$1.parenL:\n        this.next();\n\n        if (!this.match(types$1.parenR) && !this.match(types$1.ellipsis)) {\n          if (this.match(types$1.name) || this.match(types$1._this)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types$1.question && token !== types$1.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types$1.comma) || this.match(types$1.parenR) && this.lookahead().type === types$1.arrow)) {\n            this.expect(types$1.parenR);\n            return type;\n          } else {\n            this.eat(types$1.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(types$1.parenR);\n        this.expect(types$1.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types$1.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types$1._true:\n      case types$1._false:\n        node.value = this.match(types$1._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types$1.num)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(types$1.bigint)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case types$1.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types$1.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types$1._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types$1._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types$1._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types$1.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(types$1.bracketL) || this.match(types$1.questionDot)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(types$1.questionDot);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(types$1.bracketL);\n\n      if (!optional && this.match(types$1.bracketR)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(types$1.bracketR);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types$1.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types$1.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types$1.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types$1.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types$1.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types$1.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types$1.name) && this.state.value === \"interface\") {\n      const lookahead = this.lookahead();\n\n      if (lookahead.type === types$1.name || isKeyword(lookahead.value)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types$1._class) || this.match(types$1.name) || this.match(types$1._function) || this.match(types$1._var) || this.match(types$1._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types$1.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(types$1.question)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(types$1.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types$1.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(types$1.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types$1.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types$1.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(\"declare\")) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(types$1.name, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types$1.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(types$1.questionDot, 2);\n      }\n\n      return this.finishOp(types$1.question, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types$1.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types$1.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types$1.comma));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyName(node, isPrivateNameAllowed) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node, isPrivateNameAllowed);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\") && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types$1.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.OptionalBindingPattern);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types$1.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(types$1.eq) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types$1._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types$1.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types$1.braceL || lh.type === types$1.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentIsString = this.match(types$1.string);\n    const firstIdent = this.parseModuleExportName();\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types$1.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && (this.match(types$1.name) || this.state.type.keyword)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (firstIdentIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types$1.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const curContext = context[context.length - 1];\n\n      if (curContext === types.j_oTag) {\n        context.length -= 2;\n      } else if (curContext === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.isRelational(\"<\")) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types$1.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(types$1.colon) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types$1.questionDot) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types$1.parenL);\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types$1.parenL);\n        node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types$1.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types$1.comma) || this.match(types$1.braceR);\n\n    switch (this.state.type) {\n      case types$1.num:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1.string:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types$1._true:\n      case types$1._false:\n        {\n          const literal = this.parseBooleanLiteral(this.match(types$1._true));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types$1.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(types$1.braceR)) {\n      if (this.eat(types$1.ellipsis)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types$1.braceR)) {\n        this.expect(types$1.comma);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types$1.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types$1.braceL);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types$1.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types$1.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError);\ntypes.j_oTag = new TokContext(\"<tag\");\ntypes.j_cTag = new TokContext(\"</tag\");\ntypes.j_expr = new TokContext(\"<tag>...</tag>\", true);\ntypes$1.jsxName = new TokenType(\"jsxName\");\ntypes$1.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes$1.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes$1.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes$1.jsxTagStart.updateContext = context => {\n  context.push(types.j_expr, types.j_oTag);\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types$1.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types$1.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types$1.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types$1.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types$1.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types$1.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types$1.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types$1.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case types$1.jsxTagStart:\n      case types$1.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types$1.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types$1.braceL)) {\n      this.expect(types$1.ellipsis);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types$1.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types$1.slash) && !this.match(types$1.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types$1.slash);\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types$1.jsxTagEnd)) {\n      this.expect(types$1.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types$1.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types$1.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types$1.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types$1.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types$1.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types$1.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(types$1.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types$1.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types$1.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  createLookaheadState(state) {\n    const lookaheadState = super.createLookaheadState(state);\n    lookaheadState.inPropertyName = state.inPropertyName;\n    return lookaheadState;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types$1.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types$1.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    super.updateContext(prevType);\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === types$1.slash && prevType === types$1.jsxTagStart) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.exprAllowed = false;\n    } else if (type === types$1.jsxTagEnd) {\n      const out = context.pop();\n\n      if (out === types.j_oTag && prevType === types$1.slash || out === types.j_cTag) {\n        context.pop();\n        this.state.exprAllowed = context[context.length - 1] === types.j_expr;\n      } else {\n        this.state.exprAllowed = true;\n      }\n    } else if (type.keyword && (prevType === types$1.dot || prevType === types$1.questionDot)) {\n      this.state.exprAllowed = false;\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError);\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types$1.name);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(types$1.bracketL) || this.match(types$1.braceL) || this.match(types$1.star) || this.match(types$1.ellipsis) || this.match(types$1.privateName) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types$1.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []));\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types$1.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types$1.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types$1.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types$1.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types$1.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types$1.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types$1.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types$1._import);\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types$1.parenR);\n\n    if (this.eat(types$1.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types$1.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types$1._typeof);\n\n    if (this.match(types$1._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(types$1._extends);\n    node.default = this.tsEatThenParseType(types$1.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types$1.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types$1._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types$1.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types$1.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types$1.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types$1.comma) && !this.isLineTerminator()) {\n      this.expect(types$1.semi);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types$1.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types$1.name) && this.match(types$1.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types$1.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types$1.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types$1.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types$1.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.isRelational(\"<\")) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(types$1.colon, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types$1._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node, false);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node, false);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types$1.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types$1.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types$1.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types$1.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types$1._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(types$1._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types$1.braceL);\n\n    if (this.match(types$1.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types$1.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(\"as\") ? this.tsParseType() : null;\n    this.expect(types$1.bracketR);\n\n    if (this.match(types$1.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types$1.question);\n    } else if (this.eat(types$1.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(types$1.ellipsis);\n    let type = this.tsParseType();\n    const optional = this.eat(types$1.question);\n    const labeled = this.eat(types$1.colon);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types$1.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(types$1.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types$1.num:\n        case types$1.bigint:\n        case types$1.string:\n        case types$1._true:\n        case types$1._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types$1.name:\n      case types$1._void:\n      case types$1._null:\n        {\n          const type = this.match(types$1._void) ? \"TSVoidKeyword\" : this.match(types$1._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types$1.string:\n      case types$1.num:\n      case types$1.bigint:\n      case types$1._true:\n      case types$1._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types$1.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== types$1.num && nextToken.type !== types$1.bigint) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types$1._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types$1._typeof:\n        return this.tsParseTypeQuery();\n\n      case types$1._import:\n        return this.tsParseImportType();\n\n      case types$1.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types$1.bracketL:\n        return this.tsParseTupleType();\n\n      case types$1.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types$1.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types$1.bracketL)) {\n      if (this.match(types$1.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types$1.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types$1.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types$1.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types$1.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types$1.name) || this.match(types$1._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types$1.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types$1.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types$1.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types$1.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types$1.parenR) || this.match(types$1.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types$1.colon) || this.match(types$1.comma) || this.match(types$1.question) || this.match(types$1.eq)) {\n        return true;\n      }\n\n      if (this.match(types$1.parenR)) {\n        this.next();\n\n        if (this.match(types$1.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types$1._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types$1.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types$1.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types$1.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types$1.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types$1.name) && !this.match(types$1._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types$1.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types$1._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types$1.question);\n    node.trueType = this.tsParseType();\n    this.expect(types$1.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._new;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types$1._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types$1._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(types$1.eq);\n\n      if (this.isContextual(\"intrinsic\") && this.lookahead().type !== types$1.dot) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types$1.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types$1.eq)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(types$1.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types$1.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types$1.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(types$1.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types$1.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types$1.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(types$1.eq);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types$1.parenL);\n\n    if (!this.match(types$1.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types$1.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case types$1._function:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case types$1._class:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case types$1._const:\n          if (this.match(types$1._const) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(types$1._const);\n            this.expectContextual(\"enum\");\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case types$1._var:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case types$1.name:\n          {\n            const value = this.state.value;\n\n            if (value === \"global\") {\n              return this.tsParseAmbientExternalModuleDeclaration(nany);\n            } else {\n              return this.tsParseDeclaration(nany, value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types$1.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(types$1._class) || this.match(types$1.name))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types$1.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(types$1.string)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (this.match(types$1.name)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && this.match(types$1.name)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types$1.arrow);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types$1.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types$1.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types$1.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(types$1.questionDot) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.isRelational(\"<\")) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(types$1.parenL)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(types$1.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types$1.backQuote)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, types$1.parenL);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types$1.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (nonNull(types$1._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (this.match(types$1.name) || this.match(types$1.star) || this.match(types$1.braceL)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(\"type\") && ahead.type !== types$1.comma && !(ahead.type === types$1.name && ahead.value === \"from\") && ahead.type !== types$1.eq) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (this.match(types$1.name) && ahead.type === types$1.eq) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(types$1._import)) {\n      this.next();\n\n      if (this.isContextual(\"type\") && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types$1.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(\"type\") && this.lookahead().type === types$1.braceL) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types$1._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types$1._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types$1.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types$1._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  parseClassMember(classBody, member, state) {\n    const invalidModifersForStaticBlocks = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\"];\n    this.tsParseModifiers(member, invalidModifersForStaticBlocks.concat([\"static\"]));\n\n    const callParseClassMemberWithIsStatic = () => {\n      const isStatic = !!member.static;\n\n      if (isStatic && this.eat(types$1.braceL)) {\n        if (this.tsHasSomeModifiers(member, invalidModifersForStaticBlocks)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types$1.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(types$1.parenL)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(types$1.question)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types$1.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types$1.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n\n    if (isDeclare && (this.isContextual(\"declare\") || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (this.match(types$1.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types$1.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(types$1.eq)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(types$1.eq)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types$1.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types$1.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types$1.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types$1.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types$1.colon);\n        if (this.canInsertSemicolon() || !this.match(types$1.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types$1.question)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types$1.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types$1.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(types$1.comma) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types$1.bang) || this.match(types$1.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types$1.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  reScan_lt_gt() {\n    if (this.match(types$1.relational)) {\n      const code = this.input.charCodeAt(this.state.start);\n\n      if (code === 60 || code === 62) {\n        this.state.pos -= 1;\n        this.readToken_lt_gt(code);\n      }\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(types$1.colon)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(types$1._class)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(\"interface\")) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, types$1._class);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n});\n\ntypes$1.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types$1.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types$1.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types$1.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === types$1.placeholder) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types$1.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types$1._extends) || this.match(types$1.placeholder) || this.match(types$1.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1._default)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(types$1.placeholder.label, this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types$1.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types$1.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types$1.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types$1.modulo);\n\n      if (this.match(types$1.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types$1.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") === \"hash\";\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types$1.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types$1.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types$1.braceL:\n        return this.parseObjectLike(types$1.braceR, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n      }\n\n      if (allowEmpty && this.match(types$1.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types$1.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types$1.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(types$1.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types$1.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types$1.eof)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(types$1.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types$1.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    if (this.match(types$1.parenL) || this.match(types$1.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      const leftIsHackPipeExpression = left.type === \"BinaryExpression\" && left.operator === \"|>\" && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\";\n\n      if (leftIsHackPipeExpression) {\n        throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, operator);\n      }\n\n      if (this.match(types$1.eq)) {\n        node.left = this.toAssignable(left, true);\n        refExpressionErrors.doubleProto = -1;\n      } else {\n        node.left = left;\n      }\n\n      if (refExpressionErrors.shorthandAssign >= node.left.start) {\n        refExpressionErrors.shorthandAssign = -1;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(types$1.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    let prec = this.state.type.binop;\n\n    if (prec != null && (this.prodParam.hasIn || !this.match(types$1._in))) {\n      if (prec > minPrec) {\n        const op = this.state.type;\n\n        if (op === types$1.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === types$1.logicalOR || op === types$1.logicalAND;\n        const coalesce = op === types$1.nullishCoalescing;\n\n        if (coalesce) {\n          prec = types$1.logicalAND.binop;\n        }\n\n        this.next();\n\n        if (op === types$1.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types$1.name) && this.state.value === \"await\" && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === types$1.logicalOR || nextOp === types$1.logicalAND) || logical && nextOp === types$1.nullishCoalescing) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types$1.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              const bodyExpr = this.parseHackPipeBody(op, prec);\n              this.checkHackPipeBodyEarlyErrors(startPos);\n              return bodyExpr;\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              const childExpr = this.parseHackPipeBody(op, prec);\n              return this.parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody(op, prec) {\n    const bodyIsInGeneratorContext = this.prodParam.hasYield;\n    const bodyIsYieldExpression = bodyIsInGeneratorContext && this.isContextual(\"yield\");\n\n    if (bodyIsYieldExpression) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n    } else {\n      return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(types$1.exponent)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(\"await\");\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(types$1.incDec);\n    const node = this.startNode();\n\n    if (this.state.type.prefix) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(types$1._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(types$1._delete);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(types$1.modulo);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types$1.doubleColon)) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (this.match(types$1.backQuote)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (this.match(types$1.questionDot)) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(types$1.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else if (optional || this.match(types$1.bracketL) || this.eat(types$1.dot)) {\n      return this.parseMember(base, startPos, startLoc, state, optional);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const computed = this.eat(types$1.bracketL);\n    node.object = base;\n    node.computed = computed;\n    const privateName = !computed && this.match(types$1.privateName) && this.state.value;\n    const property = computed ? this.parseExpression() : privateName ? this.parsePrivateName() : this.parseIdentifier(true);\n\n    if (privateName !== false) {\n      if (node.object.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(privateName, property.start);\n    }\n\n    node.property = property;\n\n    if (computed) {\n      this.expect(types$1.bracketR);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types$1.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    setInnerComments(node, call.innerComments);\n    setInnerComments(node, call.callee.trailingComments);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n\n    switch (this.state.type) {\n      case types$1._super:\n        return this.parseSuper();\n\n      case types$1._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types$1.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(types$1.parenL)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types$1._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types$1.name:\n        {\n          if (this.isContextual(\"module\") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            if (this.match(types$1._function)) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (this.match(types$1.name)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (this.match(types$1._do)) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(types$1.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        }\n\n      case types$1._do:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case types$1.slash:\n      case types$1.slashAssign:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case types$1.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case types$1.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case types$1.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case types$1.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case types$1._null:\n        return this.parseNullLiteral();\n\n      case types$1._true:\n        return this.parseBooleanLiteral(true);\n\n      case types$1._false:\n        return this.parseBooleanLiteral(false);\n\n      case types$1.parenL:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case types$1.bracketBarL:\n      case types$1.bracketHashL:\n        {\n          return this.parseArrayLike(this.state.type === types$1.bracketBarL ? types$1.bracketBarR : types$1.bracketR, false, true, refExpressionErrors);\n        }\n\n      case types$1.bracketL:\n        {\n          return this.parseArrayLike(types$1.bracketR, true, false, refExpressionErrors);\n        }\n\n      case types$1.braceBarL:\n      case types$1.braceHashL:\n        {\n          return this.parseObjectLike(this.state.type === types$1.braceBarL ? types$1.braceBarR : types$1.braceR, false, true, refExpressionErrors);\n        }\n\n      case types$1.braceL:\n        {\n          return this.parseObjectLike(types$1.braceR, false, false, refExpressionErrors);\n        }\n\n      case types$1._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case types$1.at:\n        this.parseDecorators();\n\n      case types$1._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types$1._new:\n        return this.parseNewOrNewTarget();\n\n      case types$1.backQuote:\n        return this.parseTemplate(false);\n\n      case types$1.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case types$1.privateName:\n        {\n          const {\n            value,\n            start\n          } = this.state;\n          node = this.parsePrivateName();\n\n          if (this.match(types$1._in)) {\n            this.classScope.usePrivateName(value, start);\n          } else {\n            this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n          }\n\n          return node;\n        }\n\n      case types$1.moduloAssign:\n        if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"hack\" && this.getPluginOption(\"pipelineOperator\", \"topicToken\") === \"%\") {\n          this.state.value = \"%\";\n          this.state.type = types$1.modulo;\n          this.state.pos--;\n          this.state.end--;\n          this.state.endLoc.column--;\n        } else {\n          throw this.unexpected();\n        }\n\n      case types$1.modulo:\n      case types$1.hash:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            node = this.startNode();\n            const start = this.state.start;\n            const tokenType = this.state.type;\n            this.next();\n            return this.finishTopicReference(node, start, pipeProposal, tokenType);\n          }\n        }\n\n      case types$1.relational:\n        {\n          if (this.state.value === \"<\") {\n            const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n            if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n              this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            }\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenType.label);\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          const pluginTopicToken = this.getPluginOption(\"pipelineOperator\", \"topicToken\");\n          return tokenType.label === pluginTopicToken;\n        }\n\n      case \"smart\":\n        return tokenType === types$1.hash;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(types$1.arrow);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(types$1.parenL) && !this.match(types$1.bracketL) && !this.match(types$1.dot)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parseMaybePrivateName(isPrivateNameAllowed) {\n    const isPrivate = this.match(types$1.privateName);\n\n    if (isPrivate) {\n      if (!isPrivateNameAllowed) {\n        this.raise(this.state.start + 1, ErrorMessages.UnexpectedPrivateField);\n      }\n\n      return this.parsePrivateName();\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(\"meta\")) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types$1.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(types$1.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types$1.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(types$1.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      val.end = innerEndPos;\n      val.loc.end = innerEndLoc;\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types$1.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(types$1.dot)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(types$1.questionDot)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types$1.parenL)) {\n      const args = this.parseExprList(types$1.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.start + 1, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types$1.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types$1.dollarBraceL);\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.expect(types$1.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      const prop = this.parsePropertyDefinition(isPattern, refExpressionErrors);\n\n      if (!isPattern) {\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(types$1.bracketL) || this.match(types$1.star));\n  }\n\n  parsePropertyDefinition(isPattern, refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(types$1.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types$1.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types$1.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, false);\n\n    if (!isPattern && !isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(types$1.star);\n        this.parsePropertyName(prop, false);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(types$1.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop, false);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(types$1.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(types$1.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(types$1.eq) && refExpressionErrors) {\n        if (refExpressionErrors.shorthandAssign === -1) {\n          refExpressionErrors.shorthandAssign = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop, isPrivateNameAllowed) {\n    if (this.eat(types$1.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(types$1.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      const type = this.state.type;\n      prop.key = type === types$1.num || type === types$1.string || type === types$1.bigint || type === types$1.decimal ? this.parseExprAtom() : this.parseMaybePrivateName(isPrivateNameAllowed);\n\n      if (type !== types$1.privateName) {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(types$1.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types$1.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.expressionScope.exit();\n      this.state.labels = oldLabels;\n    }\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(types$1.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(types$1.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types$1.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (type === types$1.name) {\n      name = this.state.value;\n    } else if (type.keyword) {\n      name = type.keyword;\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types$1.name;\n    } else {\n      this.checkReservedWord(name, start, !!type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(types$1.star)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    return this.hasPrecedingLineBreak() || this.match(types$1.plusMin) || this.match(types$1.parenL) || this.match(types$1.bracketL) || this.match(types$1.backQuote) || this.match(types$1.regexp) || this.match(types$1.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types$1.modulo);\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(types$1.star);\n\n      switch (this.state.type) {\n        case types$1.semi:\n        case types$1.eof:\n        case types$1.braceR:\n        case types$1.parenR:\n        case types$1.bracketR:\n        case types$1.braceBarR:\n        case types$1.colon:\n        case types$1.comma:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, types$1.arrow.label);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(types$1.arrow)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    const proposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (proposal === \"smart\") {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(types$1.braceL);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, types$1.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(types$1.braceR);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens) {\n  {\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (token.type === types$1.privateName) {\n        const {\n          loc,\n          start,\n          value,\n          end\n        } = token;\n        const hashEndPos = start + 1;\n        const hashEndLoc = new Position(loc.start.line, loc.start.column + 1);\n        tokens.splice(i, 1, new Token({\n          type: types$1.hash,\n          value: \"#\",\n          start: start,\n          end: hashEndPos,\n          startLoc: loc.start,\n          endLoc: hashEndLoc\n        }), new Token({\n          type: types$1.name,\n          value: value,\n          start: hashEndPos,\n          end: end,\n          startLoc: hashEndLoc,\n          endLoc: loc.end\n        }));\n      }\n    }\n  }\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = babel7CompatTokens(this.tokens);\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = types$1.eof, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types$1.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types$1.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types$1._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types$1._break:\n      case types$1._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types$1._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types$1._do:\n        return this.parseDoStatement(node);\n\n      case types$1._for:\n        return this.parseForStatement(node);\n\n      case types$1._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types$1._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types$1._if:\n        return this.parseIfStatement(node);\n\n      case types$1._return:\n        return this.parseReturnStatement(node);\n\n      case types$1._switch:\n        return this.parseSwitchStatement(node);\n\n      case types$1._throw:\n        return this.parseThrowStatement(node);\n\n      case types$1._try:\n        return this.parseTryStatement(node);\n\n      case types$1._const:\n      case types$1._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types$1._while:\n        return this.parseWhileStatement(node);\n\n      case types$1._with:\n        return this.parseWithStatement(node);\n\n      case types$1.braceL:\n        return this.parseBlock();\n\n      case types$1.semi:\n        return this.parseEmptyStatement(node);\n\n      case types$1._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case types$1._export:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types$1._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types$1.name && expr.type === \"Identifier\" && this.eat(types$1.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types$1._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types$1.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types$1._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types$1.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types$1.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types$1.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types$1.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types$1.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types$1.parenL);\n    const val = this.parseExpression();\n    this.expect(types$1.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types$1._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types$1.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types$1.parenL);\n\n    if (this.match(types$1.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(\"let\");\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(types$1._var) || this.match(types$1._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types$1._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithUnescapedName = this.match(types$1.name) && !this.state.containsEsc;\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(\"of\");\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithUnescapedName && init.type === \"Identifier\" && init.name === \"async\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(types$1._in)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types$1._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types$1.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types$1.braceR);) {\n      if (this.match(types$1._case) || this.match(types$1._default)) {\n        const isCase = this.match(types$1._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types$1.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types$1._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types$1.parenL)) {\n        this.expect(types$1.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(types$1.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types$1._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(types$1.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types$1.braceR, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(types$1.semi) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(types$1.parenR) ? null : this.parseExpression();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types$1._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(types$1.parenR);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types$1.eq)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(types$1._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types$1._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types$1.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types$1.star) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(types$1.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types$1.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(types$1.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(types$1.parenR, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types$1.eq) || this.match(types$1.semi) || this.match(types$1.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types$1.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types$1.braceL);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(types$1.braceR)) {\n        if (this.eat(types$1.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(types$1.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(\"static\");\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(types$1.braceL)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types$1.star)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = this.match(types$1.name) && !this.state.containsEsc;\n    const isPrivate = this.match(types$1.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(types$1.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(types$1.star) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(types$1.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === types$1.name || type === types$1.string) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === types$1.privateName && value === \"constructor\") {\n      this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n    }\n\n    return this.parsePropertyName(member, true);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.expectPlugin(\"classStaticBlock\", member.start);\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, types$1.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(types$1.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types$1.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types$1.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types$1.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types$1.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types$1._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types$1.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types$1.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types$1.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types$1._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types$1._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types$1._const) || this.match(types$1._var) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types$1.name)) {\n      const value = this.state.value;\n\n      if (value === \"async\" && !this.state.containsEsc || value === \"let\") {\n        return false;\n      }\n\n      if ((value === \"type\" || value === \"interface\") && !this.state.containsEsc) {\n        const l = this.lookahead();\n\n        if (l.type === types$1.name && l.value !== \"from\" || l.type === types$1.braceL) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(types$1._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || this.match(types$1.name) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(types$1._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types$1.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      const node = this.startNode();\n      const isString = this.match(types$1.string);\n      const local = this.parseModuleExportName();\n      node.local = local;\n\n      if (this.eatContextual(\"as\")) {\n        node.exported = this.parseModuleExportName();\n      } else if (isString) {\n        node.exported = cloneStringLiteral(local);\n      } else {\n        node.exported = cloneIdentifier(local);\n      }\n\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseModuleExportName() {\n    if (this.match(types$1.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types$1.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types$1.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types$1.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types$1.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(types$1.braceR)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(types$1.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(types$1._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(types$1.colon);\n\n      if (!this.match(types$1.string)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(types$1.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(\"assert\") && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(types$1.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(types$1.braceR);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types$1.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types$1.braceL);\n\n    while (!this.eat(types$1.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types$1.colon)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(types$1.comma);\n        if (this.eat(types$1.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const importedIsString = this.match(types$1.string);\n    specifier.imported = this.parseModuleExportName();\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      specifier.local = cloneIdentifier(imported);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types$1;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}