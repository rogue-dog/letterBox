{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\letterBox\\\\src\\\\initialState.jsx\",\n    _s = $RefreshSig$();\n\nimport { act } from '@testing-library/react';\nimport React from 'react';\nimport { useReducer, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet AppContext = /*#__PURE__*/createContext({});\nconst intialState = {\n  appName: \"letterBox\",\n  user: JSON.parse(localStorage.getItem(\"user-details\")),\n  chattingWith: {\n    name: \"\",\n    phone: \"\"\n  }\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"setAppName\":\n      return { ...state,\n        appName: action.payload\n      };\n\n    case \"LoginUser\":\n      var userInfo = action.payload;\n      localStorage.setItem(\"user-details\", JSON.stringify(userInfo));\n      return { ...state,\n        user: userInfo\n      };\n\n    case \"ChatStarted\":\n      return { ...state,\n        chattingWith: {\n          name: action.payload[0],\n          phone: action.payload[1]\n        }\n      };\n\n    default:\n      break;\n  }\n};\n\nfunction AppContextProvider(props) {\n  _s();\n\n  var AppState = { ...intialState\n  };\n  let [state, dispatch] = useReducer(reducer, AppState);\n  let value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AppContextProvider, \"gmr64s7UwnSUUxpIMoxEm637jVU=\");\n\n_c = AppContextProvider;\n;\nexport { AppContext, AppContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/src/initialState.jsx"],"names":["act","React","useReducer","createContext","AppContext","intialState","appName","user","JSON","parse","localStorage","getItem","chattingWith","name","phone","reducer","state","action","type","payload","userInfo","setItem","stringify","AppContextProvider","props","AppState","dispatch","value","children"],"mappings":";;;AAAA,SAASA,GAAT,QAAoB,wBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,OAA1C;;AAEA,IAAIC,UAAU,gBAAGD,aAAa,CAAC,EAAD,CAA9B;AAGA,MAAME,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,WADO;AAEhBC,EAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAX,CAFU;AAGhBC,EAAAA,YAAY,EAAE;AACVC,IAAAA,IAAI,EAAE,EADI;AAEVC,IAAAA,KAAK,EAAE;AAFG;AAHE,CAApB;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,YAAL;AAEI,aAAO,EAAE,GAAGF,KAAL;AAAYV,QAAAA,OAAO,EAAEW,MAAM,CAACE;AAA5B,OAAP;;AAEJ,SAAK,WAAL;AACI,UAAIC,QAAQ,GAAGH,MAAM,CAACE,OAAtB;AACAT,MAAAA,YAAY,CAACW,OAAb,CAAqB,cAArB,EAAqCb,IAAI,CAACc,SAAL,CAAeF,QAAf,CAArC;AACA,aAAO,EACH,GAAGJ,KADA;AACOT,QAAAA,IAAI,EAAEa;AADb,OAAP;;AAIJ,SAAK,aAAL;AACI,aAAO,EACH,GAAGJ,KADA;AACOJ,QAAAA,YAAY,EAAE;AACpBC,UAAAA,IAAI,EAAEI,MAAM,CAACE,OAAP,CAAe,CAAf,CADc;AAEpBL,UAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAe,CAAf;AAFa;AADrB,OAAP;;AAOJ;AACI;AArBR;AAwBH,CAzBD;;AA2BA,SAASI,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA;;AAC/B,MAAIC,QAAQ,GAAG,EACX,GAAGpB;AADQ,GAAf;AAGA,MAAI,CAACW,KAAD,EAAQU,QAAR,IAAoBxB,UAAU,CAACa,OAAD,EAAUU,QAAV,CAAlC;AACA,MAAIE,KAAK,GAAG;AAAEX,IAAAA,KAAF;AAASU,IAAAA;AAAT,GAAZ;AACA,sBACI,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEC,KAA5B;AAAA,cAAoCH,KAAK,CAACI;AAA1C;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;;GATQL,kB;;KAAAA,kB;AASR;AACD,SAASnB,UAAT,EAAqBmB,kBAArB","sourcesContent":["import { act } from '@testing-library/react';\r\nimport React from 'react';\r\nimport { useReducer, createContext } from \"react\";\r\n\r\nlet AppContext = createContext({});\r\n\r\n\r\nconst intialState = {\r\n    appName: \"letterBox\",\r\n    user: JSON.parse(localStorage.getItem(\"user-details\")),\r\n    chattingWith: {\r\n        name: \"\",\r\n        phone: \"\"\r\n    }\r\n\r\n\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"setAppName\":\r\n\r\n            return { ...state, appName: action.payload };\r\n\r\n        case \"LoginUser\":\r\n            var userInfo = action.payload;\r\n            localStorage.setItem(\"user-details\", JSON.stringify(userInfo));\r\n            return {\r\n                ...state, user: userInfo\r\n            };\r\n\r\n        case \"ChatStarted\":\r\n            return {\r\n                ...state, chattingWith: {\r\n                    name: action.payload[0],\r\n                    phone: action.payload[1]\r\n                }\r\n            };\r\n\r\n        default:\r\n            break;\r\n    }\r\n\r\n};\r\n\r\nfunction AppContextProvider(props) {\r\n    var AppState = {\r\n        ...intialState\r\n    };\r\n    let [state, dispatch] = useReducer(reducer, AppState);\r\n    let value = { state, dispatch };\r\n    return (\r\n        <AppContext.Provider value={value}>{props.children}</AppContext.Provider>\r\n    );\r\n};\r\nexport { AppContext, AppContextProvider };"]},"metadata":{},"sourceType":"module"}