{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasExports = hasExports;\nexports.isSideEffectImport = isSideEffectImport;\nexports.validateImportInteropOption = validateImportInteropOption;\nexports.default = normalizeModuleAndLoadMetadata;\n\nvar _path = require(\"path\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nfunction hasExports(metadata) {\n  return metadata.hasExports;\n}\n\nfunction isSideEffectImport(source) {\n  return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;\n}\n\nfunction validateImportInteropOption(importInterop) {\n  if (typeof importInterop !== \"function\" && importInterop !== \"none\" && importInterop !== \"babel\" && importInterop !== \"node\") {\n    throw new Error(\".importInterop must be one of \\\"none\\\", \\\"babel\\\", \\\"node\\\", or a function returning one of those values (received \".concat(importInterop, \").\"));\n  }\n\n  return importInterop;\n}\n\nfunction resolveImportInterop(importInterop, source) {\n  if (typeof importInterop === \"function\") {\n    return validateImportInteropOption(importInterop(source));\n  }\n\n  return importInterop;\n}\n\nfunction normalizeModuleAndLoadMetadata(programPath, exportName, _ref) {\n  var importInterop = _ref.importInterop,\n      _ref$initializeReexpo = _ref.initializeReexports,\n      initializeReexports = _ref$initializeReexpo === void 0 ? false : _ref$initializeReexpo,\n      _ref$lazy = _ref.lazy,\n      lazy = _ref$lazy === void 0 ? false : _ref$lazy,\n      _ref$esNamespaceOnly = _ref.esNamespaceOnly,\n      esNamespaceOnly = _ref$esNamespaceOnly === void 0 ? false : _ref$esNamespaceOnly;\n\n  if (!exportName) {\n    exportName = programPath.scope.generateUidIdentifier(\"exports\").name;\n  }\n\n  var stringSpecifiers = new Set();\n  nameAnonymousExports(programPath);\n\n  var _getModuleMetadata = getModuleMetadata(programPath, {\n    initializeReexports: initializeReexports,\n    lazy: lazy\n  }, stringSpecifiers),\n      local = _getModuleMetadata.local,\n      source = _getModuleMetadata.source,\n      hasExports = _getModuleMetadata.hasExports;\n\n  removeModuleDeclarations(programPath);\n\n  var _iterator = _createForOfIteratorHelper(source),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          metadata = _step$value[1];\n\n      if (metadata.importsNamespace.size > 0) {\n        metadata.name = metadata.importsNamespace.values().next().value;\n      }\n\n      var resolvedInterop = resolveImportInterop(importInterop, metadata.source);\n\n      if (resolvedInterop === \"none\") {\n        metadata.interop = \"none\";\n      } else if (resolvedInterop === \"node\" && metadata.interop === \"namespace\") {\n        metadata.interop = \"node-namespace\";\n      } else if (resolvedInterop === \"node\" && metadata.interop === \"default\") {\n        metadata.interop = \"node-default\";\n      } else if (esNamespaceOnly && metadata.interop === \"namespace\") {\n        metadata.interop = \"default\";\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    exportName: exportName,\n    exportNameListName: null,\n    hasExports: hasExports,\n    local: local,\n    source: source,\n    stringSpecifiers: stringSpecifiers\n  };\n}\n\nfunction getExportSpecifierName(path, stringSpecifiers) {\n  if (path.isIdentifier()) {\n    return path.node.name;\n  } else if (path.isStringLiteral()) {\n    var stringValue = path.node.value;\n\n    if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {\n      stringSpecifiers.add(stringValue);\n    }\n\n    return stringValue;\n  } else {\n    throw new Error(\"Expected export specifier to be either Identifier or StringLiteral, got \".concat(path.node.type));\n  }\n}\n\nfunction assertExportSpecifier(path) {\n  if (path.isExportSpecifier()) {\n    return;\n  } else if (path.isExportNamespaceSpecifier()) {\n    throw path.buildCodeFrameError(\"Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.\");\n  } else {\n    throw path.buildCodeFrameError(\"Unexpected export specifier type\");\n  }\n}\n\nfunction getModuleMetadata(programPath, _ref2, stringSpecifiers) {\n  var lazy = _ref2.lazy,\n      initializeReexports = _ref2.initializeReexports;\n  var localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);\n  var sourceData = new Map();\n\n  var getData = function getData(sourceNode) {\n    var source = sourceNode.value;\n    var data = sourceData.get(source);\n\n    if (!data) {\n      data = {\n        name: programPath.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,\n        interop: \"none\",\n        loc: null,\n        imports: new Map(),\n        importsNamespace: new Set(),\n        reexports: new Map(),\n        reexportNamespace: new Set(),\n        reexportAll: null,\n        lazy: false,\n        source: source\n      };\n      sourceData.set(source, data);\n    }\n\n    return data;\n  };\n\n  var hasExports = false;\n  programPath.get(\"body\").forEach(function (child) {\n    if (child.isImportDeclaration()) {\n      var data = getData(child.node.source);\n      if (!data.loc) data.loc = child.node.loc;\n      child.get(\"specifiers\").forEach(function (spec) {\n        if (spec.isImportDefaultSpecifier()) {\n          var localName = spec.get(\"local\").node.name;\n          data.imports.set(localName, \"default\");\n          var reexport = localData.get(localName);\n\n          if (reexport) {\n            localData.delete(localName);\n            reexport.names.forEach(function (name) {\n              data.reexports.set(name, \"default\");\n            });\n          }\n        } else if (spec.isImportNamespaceSpecifier()) {\n          var _localName = spec.get(\"local\").node.name;\n          data.importsNamespace.add(_localName);\n\n          var _reexport = localData.get(_localName);\n\n          if (_reexport) {\n            localData.delete(_localName);\n\n            _reexport.names.forEach(function (name) {\n              data.reexportNamespace.add(name);\n            });\n          }\n        } else if (spec.isImportSpecifier()) {\n          var importName = getExportSpecifierName(spec.get(\"imported\"), stringSpecifiers);\n          var _localName2 = spec.get(\"local\").node.name;\n          data.imports.set(_localName2, importName);\n\n          var _reexport2 = localData.get(_localName2);\n\n          if (_reexport2) {\n            localData.delete(_localName2);\n\n            _reexport2.names.forEach(function (name) {\n              data.reexports.set(name, importName);\n            });\n          }\n        }\n      });\n    } else if (child.isExportAllDeclaration()) {\n      hasExports = true;\n\n      var _data = getData(child.node.source);\n\n      if (!_data.loc) _data.loc = child.node.loc;\n      _data.reexportAll = {\n        loc: child.node.loc\n      };\n    } else if (child.isExportNamedDeclaration() && child.node.source) {\n      hasExports = true;\n\n      var _data2 = getData(child.node.source);\n\n      if (!_data2.loc) _data2.loc = child.node.loc;\n      child.get(\"specifiers\").forEach(function (spec) {\n        assertExportSpecifier(spec);\n        var importName = getExportSpecifierName(spec.get(\"local\"), stringSpecifiers);\n        var exportName = getExportSpecifierName(spec.get(\"exported\"), stringSpecifiers);\n\n        _data2.reexports.set(exportName, importName);\n\n        if (exportName === \"__esModule\") {\n          throw spec.get(\"exported\").buildCodeFrameError('Illegal export \"__esModule\".');\n        }\n      });\n    } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {\n      hasExports = true;\n    }\n  });\n\n  var _iterator2 = _createForOfIteratorHelper(sourceData.values()),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var metadata = _step2.value;\n      var needsDefault = false;\n      var needsNamed = false;\n\n      if (metadata.importsNamespace.size > 0) {\n        needsDefault = true;\n        needsNamed = true;\n      }\n\n      if (metadata.reexportAll) {\n        needsNamed = true;\n      }\n\n      var _iterator4 = _createForOfIteratorHelper(metadata.imports.values()),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var importName = _step4.value;\n          if (importName === \"default\") needsDefault = true;else needsNamed = true;\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(metadata.reexports.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _importName = _step5.value;\n          if (_importName === \"default\") needsDefault = true;else needsNamed = true;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (needsDefault && needsNamed) {\n        metadata.interop = \"namespace\";\n      } else if (needsDefault) {\n        metadata.interop = \"default\";\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(sourceData),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          source = _step3$value[0],\n          _metadata = _step3$value[1];\n\n      if (lazy !== false && !(isSideEffectImport(_metadata) || _metadata.reexportAll)) {\n        if (lazy === true) {\n          _metadata.lazy = !/\\./.test(source);\n        } else if (Array.isArray(lazy)) {\n          _metadata.lazy = lazy.indexOf(source) !== -1;\n        } else if (typeof lazy === \"function\") {\n          _metadata.lazy = lazy(source);\n        } else {\n          throw new Error(\".lazy must be a boolean, string array, or function\");\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return {\n    hasExports: hasExports,\n    local: localData,\n    source: sourceData\n  };\n}\n\nfunction getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {\n  var bindingKindLookup = new Map();\n  programPath.get(\"body\").forEach(function (child) {\n    var kind;\n\n    if (child.isImportDeclaration()) {\n      kind = \"import\";\n    } else {\n      if (child.isExportDefaultDeclaration()) child = child.get(\"declaration\");\n\n      if (child.isExportNamedDeclaration()) {\n        if (child.node.declaration) {\n          child = child.get(\"declaration\");\n        } else if (initializeReexports && child.node.source && child.get(\"source\").isStringLiteral()) {\n          child.get(\"specifiers\").forEach(function (spec) {\n            assertExportSpecifier(spec);\n            bindingKindLookup.set(spec.get(\"local\").node.name, \"block\");\n          });\n          return;\n        }\n      }\n\n      if (child.isFunctionDeclaration()) {\n        kind = \"hoisted\";\n      } else if (child.isClassDeclaration()) {\n        kind = \"block\";\n      } else if (child.isVariableDeclaration({\n        kind: \"var\"\n      })) {\n        kind = \"var\";\n      } else if (child.isVariableDeclaration()) {\n        kind = \"block\";\n      } else {\n        return;\n      }\n    }\n\n    Object.keys(child.getOuterBindingIdentifiers()).forEach(function (name) {\n      bindingKindLookup.set(name, kind);\n    });\n  });\n  var localMetadata = new Map();\n\n  var getLocalMetadata = function getLocalMetadata(idPath) {\n    var localName = idPath.node.name;\n    var metadata = localMetadata.get(localName);\n\n    if (!metadata) {\n      var kind = bindingKindLookup.get(localName);\n\n      if (kind === undefined) {\n        throw idPath.buildCodeFrameError(\"Exporting local \\\"\".concat(localName, \"\\\", which is not declared.\"));\n      }\n\n      metadata = {\n        names: [],\n        kind: kind\n      };\n      localMetadata.set(localName, metadata);\n    }\n\n    return metadata;\n  };\n\n  programPath.get(\"body\").forEach(function (child) {\n    if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {\n      if (child.node.declaration) {\n        var declaration = child.get(\"declaration\");\n        var ids = declaration.getOuterBindingIdentifierPaths();\n        Object.keys(ids).forEach(function (name) {\n          if (name === \"__esModule\") {\n            throw declaration.buildCodeFrameError('Illegal export \"__esModule\".');\n          }\n\n          getLocalMetadata(ids[name]).names.push(name);\n        });\n      } else {\n        child.get(\"specifiers\").forEach(function (spec) {\n          var local = spec.get(\"local\");\n          var exported = spec.get(\"exported\");\n          var localMetadata = getLocalMetadata(local);\n          var exportName = getExportSpecifierName(exported, stringSpecifiers);\n\n          if (exportName === \"__esModule\") {\n            throw exported.buildCodeFrameError('Illegal export \"__esModule\".');\n          }\n\n          localMetadata.names.push(exportName);\n        });\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      var _declaration = child.get(\"declaration\");\n\n      if (_declaration.isFunctionDeclaration() || _declaration.isClassDeclaration()) {\n        getLocalMetadata(_declaration.get(\"id\")).names.push(\"default\");\n      } else {\n        throw _declaration.buildCodeFrameError(\"Unexpected default expression export.\");\n      }\n    }\n  });\n  return localMetadata;\n}\n\nfunction nameAnonymousExports(programPath) {\n  programPath.get(\"body\").forEach(function (child) {\n    if (!child.isExportDefaultDeclaration()) return;\n    (0, _helperSplitExportDeclaration.default)(child);\n  });\n}\n\nfunction removeModuleDeclarations(programPath) {\n  programPath.get(\"body\").forEach(function (child) {\n    if (child.isImportDeclaration()) {\n      child.remove();\n    } else if (child.isExportNamedDeclaration()) {\n      if (child.node.declaration) {\n        child.node.declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(child.node.declaration);\n      } else {\n        child.remove();\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      var declaration = child.get(\"declaration\");\n\n      if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {\n        declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(declaration);\n      } else {\n        throw declaration.buildCodeFrameError(\"Unexpected default expression export.\");\n      }\n    } else if (child.isExportAllDeclaration()) {\n      child.remove();\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"],"names":["Object","defineProperty","exports","value","hasExports","isSideEffectImport","validateImportInteropOption","default","normalizeModuleAndLoadMetadata","_path","require","_helperValidatorIdentifier","_helperSplitExportDeclaration","metadata","source","imports","size","importsNamespace","reexports","reexportNamespace","reexportAll","importInterop","Error","resolveImportInterop","programPath","exportName","initializeReexports","lazy","esNamespaceOnly","scope","generateUidIdentifier","name","stringSpecifiers","Set","nameAnonymousExports","getModuleMetadata","local","removeModuleDeclarations","values","next","resolvedInterop","interop","exportNameListName","getExportSpecifierName","path","isIdentifier","node","isStringLiteral","stringValue","isIdentifierName","add","type","assertExportSpecifier","isExportSpecifier","isExportNamespaceSpecifier","buildCodeFrameError","localData","getLocalExportMetadata","sourceData","Map","getData","sourceNode","data","get","basename","extname","loc","set","forEach","child","isImportDeclaration","spec","isImportDefaultSpecifier","localName","reexport","delete","names","isImportNamespaceSpecifier","isImportSpecifier","importName","isExportAllDeclaration","isExportNamedDeclaration","isExportDefaultDeclaration","needsDefault","needsNamed","test","Array","isArray","indexOf","bindingKindLookup","kind","declaration","isFunctionDeclaration","isClassDeclaration","isVariableDeclaration","keys","getOuterBindingIdentifiers","localMetadata","getLocalMetadata","idPath","undefined","ids","getOuterBindingIdentifierPaths","push","exported","remove","_blockHoist","replaceWith"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasExports = hasExports;\nexports.isSideEffectImport = isSideEffectImport;\nexports.validateImportInteropOption = validateImportInteropOption;\nexports.default = normalizeModuleAndLoadMetadata;\n\nvar _path = require(\"path\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nfunction hasExports(metadata) {\n  return metadata.hasExports;\n}\n\nfunction isSideEffectImport(source) {\n  return source.imports.size === 0 && source.importsNamespace.size === 0 && source.reexports.size === 0 && source.reexportNamespace.size === 0 && !source.reexportAll;\n}\n\nfunction validateImportInteropOption(importInterop) {\n  if (typeof importInterop !== \"function\" && importInterop !== \"none\" && importInterop !== \"babel\" && importInterop !== \"node\") {\n    throw new Error(`.importInterop must be one of \"none\", \"babel\", \"node\", or a function returning one of those values (received ${importInterop}).`);\n  }\n\n  return importInterop;\n}\n\nfunction resolveImportInterop(importInterop, source) {\n  if (typeof importInterop === \"function\") {\n    return validateImportInteropOption(importInterop(source));\n  }\n\n  return importInterop;\n}\n\nfunction normalizeModuleAndLoadMetadata(programPath, exportName, {\n  importInterop,\n  initializeReexports = false,\n  lazy = false,\n  esNamespaceOnly = false\n}) {\n  if (!exportName) {\n    exportName = programPath.scope.generateUidIdentifier(\"exports\").name;\n  }\n\n  const stringSpecifiers = new Set();\n  nameAnonymousExports(programPath);\n  const {\n    local,\n    source,\n    hasExports\n  } = getModuleMetadata(programPath, {\n    initializeReexports,\n    lazy\n  }, stringSpecifiers);\n  removeModuleDeclarations(programPath);\n\n  for (const [, metadata] of source) {\n    if (metadata.importsNamespace.size > 0) {\n      metadata.name = metadata.importsNamespace.values().next().value;\n    }\n\n    const resolvedInterop = resolveImportInterop(importInterop, metadata.source);\n\n    if (resolvedInterop === \"none\") {\n      metadata.interop = \"none\";\n    } else if (resolvedInterop === \"node\" && metadata.interop === \"namespace\") {\n      metadata.interop = \"node-namespace\";\n    } else if (resolvedInterop === \"node\" && metadata.interop === \"default\") {\n      metadata.interop = \"node-default\";\n    } else if (esNamespaceOnly && metadata.interop === \"namespace\") {\n      metadata.interop = \"default\";\n    }\n  }\n\n  return {\n    exportName,\n    exportNameListName: null,\n    hasExports,\n    local,\n    source,\n    stringSpecifiers\n  };\n}\n\nfunction getExportSpecifierName(path, stringSpecifiers) {\n  if (path.isIdentifier()) {\n    return path.node.name;\n  } else if (path.isStringLiteral()) {\n    const stringValue = path.node.value;\n\n    if (!(0, _helperValidatorIdentifier.isIdentifierName)(stringValue)) {\n      stringSpecifiers.add(stringValue);\n    }\n\n    return stringValue;\n  } else {\n    throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`);\n  }\n}\n\nfunction assertExportSpecifier(path) {\n  if (path.isExportSpecifier()) {\n    return;\n  } else if (path.isExportNamespaceSpecifier()) {\n    throw path.buildCodeFrameError(\"Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.\");\n  } else {\n    throw path.buildCodeFrameError(\"Unexpected export specifier type\");\n  }\n}\n\nfunction getModuleMetadata(programPath, {\n  lazy,\n  initializeReexports\n}, stringSpecifiers) {\n  const localData = getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers);\n  const sourceData = new Map();\n\n  const getData = sourceNode => {\n    const source = sourceNode.value;\n    let data = sourceData.get(source);\n\n    if (!data) {\n      data = {\n        name: programPath.scope.generateUidIdentifier((0, _path.basename)(source, (0, _path.extname)(source))).name,\n        interop: \"none\",\n        loc: null,\n        imports: new Map(),\n        importsNamespace: new Set(),\n        reexports: new Map(),\n        reexportNamespace: new Set(),\n        reexportAll: null,\n        lazy: false,\n        source\n      };\n      sourceData.set(source, data);\n    }\n\n    return data;\n  };\n\n  let hasExports = false;\n  programPath.get(\"body\").forEach(child => {\n    if (child.isImportDeclaration()) {\n      const data = getData(child.node.source);\n      if (!data.loc) data.loc = child.node.loc;\n      child.get(\"specifiers\").forEach(spec => {\n        if (spec.isImportDefaultSpecifier()) {\n          const localName = spec.get(\"local\").node.name;\n          data.imports.set(localName, \"default\");\n          const reexport = localData.get(localName);\n\n          if (reexport) {\n            localData.delete(localName);\n            reexport.names.forEach(name => {\n              data.reexports.set(name, \"default\");\n            });\n          }\n        } else if (spec.isImportNamespaceSpecifier()) {\n          const localName = spec.get(\"local\").node.name;\n          data.importsNamespace.add(localName);\n          const reexport = localData.get(localName);\n\n          if (reexport) {\n            localData.delete(localName);\n            reexport.names.forEach(name => {\n              data.reexportNamespace.add(name);\n            });\n          }\n        } else if (spec.isImportSpecifier()) {\n          const importName = getExportSpecifierName(spec.get(\"imported\"), stringSpecifiers);\n          const localName = spec.get(\"local\").node.name;\n          data.imports.set(localName, importName);\n          const reexport = localData.get(localName);\n\n          if (reexport) {\n            localData.delete(localName);\n            reexport.names.forEach(name => {\n              data.reexports.set(name, importName);\n            });\n          }\n        }\n      });\n    } else if (child.isExportAllDeclaration()) {\n      hasExports = true;\n      const data = getData(child.node.source);\n      if (!data.loc) data.loc = child.node.loc;\n      data.reexportAll = {\n        loc: child.node.loc\n      };\n    } else if (child.isExportNamedDeclaration() && child.node.source) {\n      hasExports = true;\n      const data = getData(child.node.source);\n      if (!data.loc) data.loc = child.node.loc;\n      child.get(\"specifiers\").forEach(spec => {\n        assertExportSpecifier(spec);\n        const importName = getExportSpecifierName(spec.get(\"local\"), stringSpecifiers);\n        const exportName = getExportSpecifierName(spec.get(\"exported\"), stringSpecifiers);\n        data.reexports.set(exportName, importName);\n\n        if (exportName === \"__esModule\") {\n          throw spec.get(\"exported\").buildCodeFrameError('Illegal export \"__esModule\".');\n        }\n      });\n    } else if (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) {\n      hasExports = true;\n    }\n  });\n\n  for (const metadata of sourceData.values()) {\n    let needsDefault = false;\n    let needsNamed = false;\n\n    if (metadata.importsNamespace.size > 0) {\n      needsDefault = true;\n      needsNamed = true;\n    }\n\n    if (metadata.reexportAll) {\n      needsNamed = true;\n    }\n\n    for (const importName of metadata.imports.values()) {\n      if (importName === \"default\") needsDefault = true;else needsNamed = true;\n    }\n\n    for (const importName of metadata.reexports.values()) {\n      if (importName === \"default\") needsDefault = true;else needsNamed = true;\n    }\n\n    if (needsDefault && needsNamed) {\n      metadata.interop = \"namespace\";\n    } else if (needsDefault) {\n      metadata.interop = \"default\";\n    }\n  }\n\n  for (const [source, metadata] of sourceData) {\n    if (lazy !== false && !(isSideEffectImport(metadata) || metadata.reexportAll)) {\n      if (lazy === true) {\n        metadata.lazy = !/\\./.test(source);\n      } else if (Array.isArray(lazy)) {\n        metadata.lazy = lazy.indexOf(source) !== -1;\n      } else if (typeof lazy === \"function\") {\n        metadata.lazy = lazy(source);\n      } else {\n        throw new Error(`.lazy must be a boolean, string array, or function`);\n      }\n    }\n  }\n\n  return {\n    hasExports,\n    local: localData,\n    source: sourceData\n  };\n}\n\nfunction getLocalExportMetadata(programPath, initializeReexports, stringSpecifiers) {\n  const bindingKindLookup = new Map();\n  programPath.get(\"body\").forEach(child => {\n    let kind;\n\n    if (child.isImportDeclaration()) {\n      kind = \"import\";\n    } else {\n      if (child.isExportDefaultDeclaration()) child = child.get(\"declaration\");\n\n      if (child.isExportNamedDeclaration()) {\n        if (child.node.declaration) {\n          child = child.get(\"declaration\");\n        } else if (initializeReexports && child.node.source && child.get(\"source\").isStringLiteral()) {\n          child.get(\"specifiers\").forEach(spec => {\n            assertExportSpecifier(spec);\n            bindingKindLookup.set(spec.get(\"local\").node.name, \"block\");\n          });\n          return;\n        }\n      }\n\n      if (child.isFunctionDeclaration()) {\n        kind = \"hoisted\";\n      } else if (child.isClassDeclaration()) {\n        kind = \"block\";\n      } else if (child.isVariableDeclaration({\n        kind: \"var\"\n      })) {\n        kind = \"var\";\n      } else if (child.isVariableDeclaration()) {\n        kind = \"block\";\n      } else {\n        return;\n      }\n    }\n\n    Object.keys(child.getOuterBindingIdentifiers()).forEach(name => {\n      bindingKindLookup.set(name, kind);\n    });\n  });\n  const localMetadata = new Map();\n\n  const getLocalMetadata = idPath => {\n    const localName = idPath.node.name;\n    let metadata = localMetadata.get(localName);\n\n    if (!metadata) {\n      const kind = bindingKindLookup.get(localName);\n\n      if (kind === undefined) {\n        throw idPath.buildCodeFrameError(`Exporting local \"${localName}\", which is not declared.`);\n      }\n\n      metadata = {\n        names: [],\n        kind\n      };\n      localMetadata.set(localName, metadata);\n    }\n\n    return metadata;\n  };\n\n  programPath.get(\"body\").forEach(child => {\n    if (child.isExportNamedDeclaration() && (initializeReexports || !child.node.source)) {\n      if (child.node.declaration) {\n        const declaration = child.get(\"declaration\");\n        const ids = declaration.getOuterBindingIdentifierPaths();\n        Object.keys(ids).forEach(name => {\n          if (name === \"__esModule\") {\n            throw declaration.buildCodeFrameError('Illegal export \"__esModule\".');\n          }\n\n          getLocalMetadata(ids[name]).names.push(name);\n        });\n      } else {\n        child.get(\"specifiers\").forEach(spec => {\n          const local = spec.get(\"local\");\n          const exported = spec.get(\"exported\");\n          const localMetadata = getLocalMetadata(local);\n          const exportName = getExportSpecifierName(exported, stringSpecifiers);\n\n          if (exportName === \"__esModule\") {\n            throw exported.buildCodeFrameError('Illegal export \"__esModule\".');\n          }\n\n          localMetadata.names.push(exportName);\n        });\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      const declaration = child.get(\"declaration\");\n\n      if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {\n        getLocalMetadata(declaration.get(\"id\")).names.push(\"default\");\n      } else {\n        throw declaration.buildCodeFrameError(\"Unexpected default expression export.\");\n      }\n    }\n  });\n  return localMetadata;\n}\n\nfunction nameAnonymousExports(programPath) {\n  programPath.get(\"body\").forEach(child => {\n    if (!child.isExportDefaultDeclaration()) return;\n    (0, _helperSplitExportDeclaration.default)(child);\n  });\n}\n\nfunction removeModuleDeclarations(programPath) {\n  programPath.get(\"body\").forEach(child => {\n    if (child.isImportDeclaration()) {\n      child.remove();\n    } else if (child.isExportNamedDeclaration()) {\n      if (child.node.declaration) {\n        child.node.declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(child.node.declaration);\n      } else {\n        child.remove();\n      }\n    } else if (child.isExportDefaultDeclaration()) {\n      const declaration = child.get(\"declaration\");\n\n      if (declaration.isFunctionDeclaration() || declaration.isClassDeclaration()) {\n        declaration._blockHoist = child.node._blockHoist;\n        child.replaceWith(declaration);\n      } else {\n        throw declaration.buildCodeFrameError(\"Unexpected default expression export.\");\n      }\n    } else if (child.isExportAllDeclaration()) {\n      child.remove();\n    }\n  });\n}"]},"metadata":{},"sourceType":"script"}