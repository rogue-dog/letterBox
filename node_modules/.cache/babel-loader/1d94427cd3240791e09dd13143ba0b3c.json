{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populatePlaceholders;\n\nvar t = require(\"@babel/types\");\n\nfunction populatePlaceholders(metadata, replacements) {\n  var ast = t.cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(function (placeholder) {\n      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {\n        var placeholderName = placeholder.name;\n        throw new Error(\"Error: No substitution given for \\\"\".concat(placeholderName, \"\\\". If this is not meant to be a\\n            placeholder you may want to consider passing one of the following options to @babel/template:\\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['\").concat(placeholderName, \"'])}\\n            - { placeholderPattern: /^\").concat(placeholderName, \"$/ }\"));\n      }\n    });\n    Object.keys(replacements).forEach(function (key) {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(\"Unknown substitution \\\"\".concat(key, \"\\\" given\"));\n      }\n    });\n  }\n\n  metadata.placeholders.slice().reverse().forEach(function (placeholder) {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = \"@babel/template placeholder \\\"\".concat(placeholder.name, \"\\\": \").concat(e.message);\n      throw e;\n    }\n  });\n  return ast;\n}\n\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(function (node) {\n        return t.cloneNode(node);\n      });\n    } else if (typeof replacement === \"object\") {\n      replacement = t.cloneNode(replacement);\n    }\n  }\n\n  var _placeholder$resolve = placeholder.resolve(ast),\n      parent = _placeholder$resolve.parent,\n      key = _placeholder$resolve.key,\n      index = _placeholder$resolve.index;\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.stringLiteral(replacement);\n    }\n\n    if (!replacement || !t.isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = t.emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = t.blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = t.expressionStatement(t.identifier(replacement));\n      } else if (!t.isStatement(replacement)) {\n        replacement = t.expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = t.identifier(replacement);\n        }\n\n        if (!t.isStatement(replacement)) {\n          replacement = t.expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    t.validate(parent, key, replacement);\n    parent[key] = replacement;\n  } else {\n    var items = parent[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice.apply(items, [index, 1].concat(_toConsumableArray(replacement)));\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    t.validate(parent, key, items);\n    parent[key] = items;\n  }\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/template/lib/populate.js"],"names":["Object","defineProperty","exports","value","default","populatePlaceholders","t","require","metadata","replacements","ast","cloneNode","placeholders","forEach","placeholder","prototype","hasOwnProperty","call","name","placeholderName","Error","keys","key","placeholderNames","has","slice","reverse","applyReplacement","e","message","replacement","isDuplicate","Array","isArray","map","node","resolve","parent","index","type","stringLiteral","isStringLiteral","undefined","emptyStatement","blockStatement","expressionStatement","identifier","isStatement","validate","items","splice"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = populatePlaceholders;\n\nvar t = require(\"@babel/types\");\n\nfunction populatePlaceholders(metadata, replacements) {\n  const ast = t.cloneNode(metadata.ast);\n\n  if (replacements) {\n    metadata.placeholders.forEach(placeholder => {\n      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {\n        const placeholderName = placeholder.name;\n        throw new Error(`Error: No substitution given for \"${placeholderName}\". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`);\n      }\n    });\n    Object.keys(replacements).forEach(key => {\n      if (!metadata.placeholderNames.has(key)) {\n        throw new Error(`Unknown substitution \"${key}\" given`);\n      }\n    });\n  }\n\n  metadata.placeholders.slice().reverse().forEach(placeholder => {\n    try {\n      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);\n    } catch (e) {\n      e.message = `@babel/template placeholder \"${placeholder.name}\": ${e.message}`;\n      throw e;\n    }\n  });\n  return ast;\n}\n\nfunction applyReplacement(placeholder, ast, replacement) {\n  if (placeholder.isDuplicate) {\n    if (Array.isArray(replacement)) {\n      replacement = replacement.map(node => t.cloneNode(node));\n    } else if (typeof replacement === \"object\") {\n      replacement = t.cloneNode(replacement);\n    }\n  }\n\n  const {\n    parent,\n    key,\n    index\n  } = placeholder.resolve(ast);\n\n  if (placeholder.type === \"string\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.stringLiteral(replacement);\n    }\n\n    if (!replacement || !t.isStringLiteral(replacement)) {\n      throw new Error(\"Expected string substitution\");\n    }\n  } else if (placeholder.type === \"statement\") {\n    if (index === undefined) {\n      if (!replacement) {\n        replacement = t.emptyStatement();\n      } else if (Array.isArray(replacement)) {\n        replacement = t.blockStatement(replacement);\n      } else if (typeof replacement === \"string\") {\n        replacement = t.expressionStatement(t.identifier(replacement));\n      } else if (!t.isStatement(replacement)) {\n        replacement = t.expressionStatement(replacement);\n      }\n    } else {\n      if (replacement && !Array.isArray(replacement)) {\n        if (typeof replacement === \"string\") {\n          replacement = t.identifier(replacement);\n        }\n\n        if (!t.isStatement(replacement)) {\n          replacement = t.expressionStatement(replacement);\n        }\n      }\n    }\n  } else if (placeholder.type === \"param\") {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (index === undefined) throw new Error(\"Assertion failure.\");\n  } else {\n    if (typeof replacement === \"string\") {\n      replacement = t.identifier(replacement);\n    }\n\n    if (Array.isArray(replacement)) {\n      throw new Error(\"Cannot replace single expression with an array.\");\n    }\n  }\n\n  if (index === undefined) {\n    t.validate(parent, key, replacement);\n    parent[key] = replacement;\n  } else {\n    const items = parent[key].slice();\n\n    if (placeholder.type === \"statement\" || placeholder.type === \"param\") {\n      if (replacement == null) {\n        items.splice(index, 1);\n      } else if (Array.isArray(replacement)) {\n        items.splice(index, 1, ...replacement);\n      } else {\n        items[index] = replacement;\n      }\n    } else {\n      items[index] = replacement;\n    }\n\n    t.validate(parent, key, items);\n    parent[key] = items;\n  }\n}"]},"metadata":{},"sourceType":"script"}