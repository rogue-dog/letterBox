{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hoistVariables;\n\nvar t = require(\"@babel/types\");\n\nvar visitor = {\n  Scope: function Scope(path, state) {\n    if (state.kind === \"let\") path.skip();\n  },\n  FunctionParent: function FunctionParent(path) {\n    path.skip();\n  },\n  VariableDeclaration: function VariableDeclaration(path, state) {\n    if (state.kind && path.node.kind !== state.kind) return;\n    var nodes = [];\n    var declarations = path.get(\"declarations\");\n    var firstId;\n\n    var _iterator = _createForOfIteratorHelper(declarations),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var declar = _step.value;\n        firstId = declar.node.id;\n\n        if (declar.node.init) {\n          nodes.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.node.id, declar.node.init)));\n        }\n\n        for (var _i = 0, _Object$keys = Object.keys(declar.getBindingIdentifiers()); _i < _Object$keys.length; _i++) {\n          var name = _Object$keys[_i];\n          state.emit(t.identifier(name), name, declar.node.init !== null);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    if (path.parentPath.isFor({\n      left: path.node\n    })) {\n      path.replaceWith(firstId);\n    } else {\n      path.replaceWithMultiple(nodes);\n    }\n  }\n};\n\nfunction hoistVariables(path, emit) {\n  var kind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"var\";\n  path.traverse(visitor, {\n    kind: kind,\n    emit: emit\n  });\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/helper-hoist-variables/lib/index.js"],"names":["Object","defineProperty","exports","value","default","hoistVariables","t","require","visitor","Scope","path","state","kind","skip","FunctionParent","VariableDeclaration","node","nodes","declarations","get","firstId","declar","id","init","push","expressionStatement","assignmentExpression","keys","getBindingIdentifiers","name","emit","identifier","parentPath","isFor","left","replaceWith","replaceWithMultiple","traverse"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAf;;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,KADc,iBACRC,IADQ,EACFC,KADE,EACK;AACjB,QAAIA,KAAK,CAACC,IAAN,KAAe,KAAnB,EAA0BF,IAAI,CAACG,IAAL;AAC3B,GAHa;AAKdC,EAAAA,cALc,0BAKCJ,IALD,EAKO;AACnBA,IAAAA,IAAI,CAACG,IAAL;AACD,GAPa;AASdE,EAAAA,mBATc,+BASML,IATN,EASYC,KATZ,EASmB;AAC/B,QAAIA,KAAK,CAACC,IAAN,IAAcF,IAAI,CAACM,IAAL,CAAUJ,IAAV,KAAmBD,KAAK,CAACC,IAA3C,EAAiD;AACjD,QAAMK,KAAK,GAAG,EAAd;AACA,QAAMC,YAAY,GAAGR,IAAI,CAACS,GAAL,CAAS,cAAT,CAArB;AACA,QAAIC,OAAJ;;AAJ+B,+CAMVF,YANU;AAAA;;AAAA;AAM/B,0DAAmC;AAAA,YAAxBG,MAAwB;AACjCD,QAAAA,OAAO,GAAGC,MAAM,CAACL,IAAP,CAAYM,EAAtB;;AAEA,YAAID,MAAM,CAACL,IAAP,CAAYO,IAAhB,EAAsB;AACpBN,UAAAA,KAAK,CAACO,IAAN,CAAWlB,CAAC,CAACmB,mBAAF,CAAsBnB,CAAC,CAACoB,oBAAF,CAAuB,GAAvB,EAA4BL,MAAM,CAACL,IAAP,CAAYM,EAAxC,EAA4CD,MAAM,CAACL,IAAP,CAAYO,IAAxD,CAAtB,CAAX;AACD;;AAED,wCAAmBvB,MAAM,CAAC2B,IAAP,CAAYN,MAAM,CAACO,qBAAP,EAAZ,CAAnB,kCAAgE;AAA3D,cAAMC,IAAI,mBAAV;AACHlB,UAAAA,KAAK,CAACmB,IAAN,CAAWxB,CAAC,CAACyB,UAAF,CAAaF,IAAb,CAAX,EAA+BA,IAA/B,EAAqCR,MAAM,CAACL,IAAP,CAAYO,IAAZ,KAAqB,IAA1D;AACD;AACF;AAhB8B;AAAA;AAAA;AAAA;AAAA;;AAkB/B,QAAIb,IAAI,CAACsB,UAAL,CAAgBC,KAAhB,CAAsB;AACxBC,MAAAA,IAAI,EAAExB,IAAI,CAACM;AADa,KAAtB,CAAJ,EAEI;AACFN,MAAAA,IAAI,CAACyB,WAAL,CAAiBf,OAAjB;AACD,KAJD,MAIO;AACLV,MAAAA,IAAI,CAAC0B,mBAAL,CAAyBnB,KAAzB;AACD;AACF;AAlCa,CAAhB;;AAsCA,SAASZ,cAAT,CAAwBK,IAAxB,EAA8BoB,IAA9B,EAAkD;AAAA,MAAdlB,IAAc,uEAAP,KAAO;AAChDF,EAAAA,IAAI,CAAC2B,QAAL,CAAc7B,OAAd,EAAuB;AACrBI,IAAAA,IAAI,EAAJA,IADqB;AAErBkB,IAAAA,IAAI,EAAJA;AAFqB,GAAvB;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = hoistVariables;\n\nvar t = require(\"@babel/types\");\n\nconst visitor = {\n  Scope(path, state) {\n    if (state.kind === \"let\") path.skip();\n  },\n\n  FunctionParent(path) {\n    path.skip();\n  },\n\n  VariableDeclaration(path, state) {\n    if (state.kind && path.node.kind !== state.kind) return;\n    const nodes = [];\n    const declarations = path.get(\"declarations\");\n    let firstId;\n\n    for (const declar of declarations) {\n      firstId = declar.node.id;\n\n      if (declar.node.init) {\n        nodes.push(t.expressionStatement(t.assignmentExpression(\"=\", declar.node.id, declar.node.init)));\n      }\n\n      for (const name of Object.keys(declar.getBindingIdentifiers())) {\n        state.emit(t.identifier(name), name, declar.node.init !== null);\n      }\n    }\n\n    if (path.parentPath.isFor({\n      left: path.node\n    })) {\n      path.replaceWith(firstId);\n    } else {\n      path.replaceWithMultiple(nodes);\n    }\n  }\n\n};\n\nfunction hoistVariables(path, emit, kind = \"var\") {\n  path.traverse(visitor, {\n    kind,\n    emit\n  });\n}"]},"metadata":{},"sourceType":"script"}