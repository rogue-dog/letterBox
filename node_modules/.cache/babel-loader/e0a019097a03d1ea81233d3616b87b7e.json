{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renamer = require(\"./lib/renamer\");\n\nvar _index = require(\"../index\");\n\nvar _binding = require(\"./binding\");\n\nvar _globals = require(\"globals\");\n\nvar t = require(\"@babel/types\");\n\nvar _cache = require(\"../cache\");\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if ((t.isExportAllDeclaration(node) || t.isExportNamedDeclaration(node) || t.isImportDeclaration(node)) && node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if ((t.isExportNamedDeclaration(node) || t.isImportDeclaration(node)) && node.specifiers && node.specifiers.length) {\n          var _iterator = _createForOfIteratorHelper(node.specifiers),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var e = _step.value;\n              gatherNodeParts(e, parts);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else if ((t.isExportDefaultDeclaration(node) || t.isExportNamedDeclaration(node)) && node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      var _iterator2 = _createForOfIteratorHelper(node.properties),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _e = _step2.value;\n          gatherNodeParts(_e, parts);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nvar collectorVisitor = {\n  For: function For(path) {\n    var _iterator3 = _createForOfIteratorHelper(t.FOR_INIT_KEYS),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var declar = path.get(key);\n\n        if (declar.isVar()) {\n          var parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n          parentScope.registerBinding(\"var\", declar);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  },\n  Declaration: function Declaration(path) {\n    if (path.isBlockScoped()) return;\n    if (path.isImportDeclaration()) return;\n    if (path.isExportDeclaration()) return;\n    var parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n  ImportDeclaration: function ImportDeclaration(path) {\n    var parent = path.scope.getBlockParent();\n    parent.registerDeclaration(path);\n  },\n  ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n  ForXStatement: function ForXStatement(path, state) {\n    var left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n  ExportDeclaration: {\n    exit: function exit(path) {\n      var node = path.node,\n          scope = path.scope;\n      if (t.isExportAllDeclaration(node)) return;\n      var declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        var id = declar.id;\n        if (!id) return;\n        var binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        var _iterator4 = _createForOfIteratorHelper(declar.declarations),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var decl = _step4.value;\n\n            for (var _i = 0, _Object$keys = Object.keys(t.getBindingIdentifiers(decl)); _i < _Object$keys.length; _i++) {\n              var name = _Object$keys[_i];\n\n              var _binding2 = scope.getBinding(name);\n\n              if (_binding2) _binding2.reference(path);\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n    }\n  },\n  LabeledStatement: function LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n  AssignmentExpression: function AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n  UpdateExpression: function UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n  UnaryExpression: function UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n  BlockScoped: function BlockScoped(path) {\n    var scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    var parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      var id = path.node.id;\n      var name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n  CatchClause: function CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n  Function: function Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    var params = path.get(\"params\");\n\n    var _iterator5 = _createForOfIteratorHelper(params),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var param = _step5.value;\n        path.scope.registerBinding(\"param\", param);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  },\n  ClassExpression: function ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n};\nvar uid = 0;\n\nvar Scope = /*#__PURE__*/function () {\n  function Scope(path) {\n    _classCallCheck(this, Scope);\n\n    this.uid = void 0;\n    this.path = void 0;\n    this.block = void 0;\n    this.labels = void 0;\n    this.inited = void 0;\n    this.bindings = void 0;\n    this.references = void 0;\n    this.globals = void 0;\n    this.uids = void 0;\n    this.data = void 0;\n    this.crawling = void 0;\n    var node = path.node;\n\n    var cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  _createClass(Scope, [{\n    key: \"parent\",\n    get: function get() {\n      var _parent;\n\n      var parent,\n          path = this.path;\n\n      do {\n        var isKey = path.key === \"key\";\n        path = path.parentPath;\n        if (isKey && path.isMethod()) path = path.parentPath;\n        if (path && path.isScope()) parent = path;\n      } while (path && !parent);\n\n      return (_parent = parent) == null ? void 0 : _parent.scope;\n    }\n  }, {\n    key: \"parentBlock\",\n    get: function get() {\n      return this.path.parent;\n    }\n  }, {\n    key: \"hub\",\n    get: function get() {\n      return this.path.hub;\n    }\n  }, {\n    key: \"traverse\",\n    value: function traverse(node, opts, state) {\n      (0, _index.default)(node, opts, this, state, this.path);\n    }\n  }, {\n    key: \"generateDeclaredUidIdentifier\",\n    value: function generateDeclaredUidIdentifier(name) {\n      var id = this.generateUidIdentifier(name);\n      this.push({\n        id: id\n      });\n      return t.cloneNode(id);\n    }\n  }, {\n    key: \"generateUidIdentifier\",\n    value: function generateUidIdentifier(name) {\n      return t.identifier(this.generateUid(name));\n    }\n  }, {\n    key: \"generateUid\",\n    value: function generateUid() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n      name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n      var uid;\n      var i = 1;\n\n      do {\n        uid = this._generateUid(name, i);\n        i++;\n      } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n      var program = this.getProgramParent();\n      program.references[uid] = true;\n      program.uids[uid] = true;\n      return uid;\n    }\n  }, {\n    key: \"_generateUid\",\n    value: function _generateUid(name, i) {\n      var id = name;\n      if (i > 1) id += i;\n      return \"_\".concat(id);\n    }\n  }, {\n    key: \"generateUidBasedOnNode\",\n    value: function generateUidBasedOnNode(node, defaultName) {\n      var parts = [];\n      gatherNodeParts(node, parts);\n      var id = parts.join(\"$\");\n      id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n      return this.generateUid(id.slice(0, 20));\n    }\n  }, {\n    key: \"generateUidIdentifierBasedOnNode\",\n    value: function generateUidIdentifierBasedOnNode(node, defaultName) {\n      return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n    }\n  }, {\n    key: \"isStatic\",\n    value: function isStatic(node) {\n      if (t.isThisExpression(node) || t.isSuper(node)) {\n        return true;\n      }\n\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if (binding) {\n          return binding.constant;\n        } else {\n          return this.hasBinding(node.name);\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"maybeGenerateMemoised\",\n    value: function maybeGenerateMemoised(node, dontPush) {\n      if (this.isStatic(node)) {\n        return null;\n      } else {\n        var id = this.generateUidIdentifierBasedOnNode(node);\n\n        if (!dontPush) {\n          this.push({\n            id: id\n          });\n          return t.cloneNode(id);\n        }\n\n        return id;\n      }\n    }\n  }, {\n    key: \"checkBlockScopedCollisions\",\n    value: function checkBlockScopedCollisions(local, kind, name, id) {\n      if (kind === \"param\") return;\n      if (local.kind === \"local\") return;\n      var duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n      if (duplicate) {\n        throw this.hub.buildError(id, \"Duplicate declaration \\\"\".concat(name, \"\\\"\"), TypeError);\n      }\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(oldName, newName, block) {\n      var binding = this.getBinding(oldName);\n\n      if (binding) {\n        newName = newName || this.generateUidIdentifier(oldName).name;\n        return new _renamer.default(binding, oldName, newName).rename(block);\n      }\n    }\n  }, {\n    key: \"_renameFromMap\",\n    value: function _renameFromMap(map, oldName, newName, value) {\n      if (map[oldName]) {\n        map[newName] = value;\n        map[oldName] = null;\n      }\n    }\n  }, {\n    key: \"dump\",\n    value: function dump() {\n      var sep = \"-\".repeat(60);\n      console.log(sep);\n      var scope = this;\n\n      do {\n        console.log(\"#\", scope.block.type);\n\n        for (var _i2 = 0, _Object$keys2 = Object.keys(scope.bindings); _i2 < _Object$keys2.length; _i2++) {\n          var name = _Object$keys2[_i2];\n          var binding = scope.bindings[name];\n          console.log(\" -\", name, {\n            constant: binding.constant,\n            references: binding.references,\n            violations: binding.constantViolations.length,\n            kind: binding.kind\n          });\n        }\n      } while (scope = scope.parent);\n\n      console.log(sep);\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray(node, i, arrayLikeIsIterable) {\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n\n        if (binding != null && binding.constant && binding.path.isGenericType(\"Array\")) {\n          return node;\n        }\n      }\n\n      if (t.isArrayExpression(node)) {\n        return node;\n      }\n\n      if (t.isIdentifier(node, {\n        name: \"arguments\"\n      })) {\n        return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n      }\n\n      var helperName;\n      var args = [node];\n\n      if (i === true) {\n        helperName = \"toConsumableArray\";\n      } else if (i) {\n        args.push(t.numericLiteral(i));\n        helperName = \"slicedToArray\";\n      } else {\n        helperName = \"toArray\";\n      }\n\n      if (arrayLikeIsIterable) {\n        args.unshift(this.hub.addHelper(helperName));\n        helperName = \"maybeArrayLike\";\n      }\n\n      return t.callExpression(this.hub.addHelper(helperName), args);\n    }\n  }, {\n    key: \"hasLabel\",\n    value: function hasLabel(name) {\n      return !!this.getLabel(name);\n    }\n  }, {\n    key: \"getLabel\",\n    value: function getLabel(name) {\n      return this.labels.get(name);\n    }\n  }, {\n    key: \"registerLabel\",\n    value: function registerLabel(path) {\n      this.labels.set(path.node.label.name, path);\n    }\n  }, {\n    key: \"registerDeclaration\",\n    value: function registerDeclaration(path) {\n      if (path.isLabeledStatement()) {\n        this.registerLabel(path);\n      } else if (path.isFunctionDeclaration()) {\n        this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n      } else if (path.isVariableDeclaration()) {\n        var declarations = path.get(\"declarations\");\n\n        var _iterator6 = _createForOfIteratorHelper(declarations),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var declar = _step6.value;\n            this.registerBinding(path.node.kind, declar);\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      } else if (path.isClassDeclaration()) {\n        this.registerBinding(\"let\", path);\n      } else if (path.isImportDeclaration()) {\n        var specifiers = path.get(\"specifiers\");\n\n        var _iterator7 = _createForOfIteratorHelper(specifiers),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var specifier = _step7.value;\n            this.registerBinding(\"module\", specifier);\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      } else if (path.isExportDeclaration()) {\n        var _declar = path.get(\"declaration\");\n\n        if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {\n          this.registerDeclaration(_declar);\n        }\n      } else {\n        this.registerBinding(\"unknown\", path);\n      }\n    }\n  }, {\n    key: \"buildUndefinedNode\",\n    value: function buildUndefinedNode() {\n      return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n    }\n  }, {\n    key: \"registerConstantViolation\",\n    value: function registerConstantViolation(path) {\n      var ids = path.getBindingIdentifiers();\n\n      for (var _i3 = 0, _Object$keys3 = Object.keys(ids); _i3 < _Object$keys3.length; _i3++) {\n        var name = _Object$keys3[_i3];\n        var binding = this.getBinding(name);\n        if (binding) binding.reassign(path);\n      }\n    }\n  }, {\n    key: \"registerBinding\",\n    value: function registerBinding(kind, path) {\n      var bindingPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path;\n      if (!kind) throw new ReferenceError(\"no `kind`\");\n\n      if (path.isVariableDeclaration()) {\n        var declarators = path.get(\"declarations\");\n\n        var _iterator8 = _createForOfIteratorHelper(declarators),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            var declar = _step8.value;\n            this.registerBinding(kind, declar);\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n\n        return;\n      }\n\n      var parent = this.getProgramParent();\n      var ids = path.getOuterBindingIdentifiers(true);\n\n      for (var _i4 = 0, _Object$keys4 = Object.keys(ids); _i4 < _Object$keys4.length; _i4++) {\n        var name = _Object$keys4[_i4];\n        parent.references[name] = true;\n\n        var _iterator9 = _createForOfIteratorHelper(ids[name]),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var id = _step9.value;\n            var local = this.getOwnBinding(name);\n\n            if (local) {\n              if (local.identifier === id) continue;\n              this.checkBlockScopedCollisions(local, kind, name, id);\n            }\n\n            if (local) {\n              this.registerConstantViolation(bindingPath);\n            } else {\n              this.bindings[name] = new _binding.default({\n                identifier: id,\n                scope: this,\n                path: bindingPath,\n                kind: kind\n              });\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n    }\n  }, {\n    key: \"addGlobal\",\n    value: function addGlobal(node) {\n      this.globals[node.name] = node;\n    }\n  }, {\n    key: \"hasUid\",\n    value: function hasUid(name) {\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasGlobal\",\n    value: function hasGlobal(name) {\n      var scope = this;\n\n      do {\n        if (scope.globals[name]) return true;\n      } while (scope = scope.parent);\n\n      return false;\n    }\n  }, {\n    key: \"hasReference\",\n    value: function hasReference(name) {\n      return !!this.getProgramParent().references[name];\n    }\n  }, {\n    key: \"isPure\",\n    value: function isPure(node, constantsOnly) {\n      if (t.isIdentifier(node)) {\n        var binding = this.getBinding(node.name);\n        if (!binding) return false;\n        if (constantsOnly) return binding.constant;\n        return true;\n      } else if (t.isClass(node)) {\n        if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n          return false;\n        }\n\n        return this.isPure(node.body, constantsOnly);\n      } else if (t.isClassBody(node)) {\n        var _iterator10 = _createForOfIteratorHelper(node.body),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var method = _step10.value;\n            if (!this.isPure(method, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        return true;\n      } else if (t.isBinary(node)) {\n        return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n      } else if (t.isArrayExpression(node)) {\n        var _iterator11 = _createForOfIteratorHelper(node.elements),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var elem = _step11.value;\n            if (!this.isPure(elem, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n\n        return true;\n      } else if (t.isObjectExpression(node)) {\n        var _iterator12 = _createForOfIteratorHelper(node.properties),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var prop = _step12.value;\n            if (!this.isPure(prop, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n\n        return true;\n      } else if (t.isMethod(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        if (node.kind === \"get\" || node.kind === \"set\") return false;\n        return true;\n      } else if (t.isProperty(node)) {\n        if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n        return this.isPure(node.value, constantsOnly);\n      } else if (t.isUnaryExpression(node)) {\n        return this.isPure(node.argument, constantsOnly);\n      } else if (t.isTaggedTemplateExpression(node)) {\n        return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n      } else if (t.isTemplateLiteral(node)) {\n        var _iterator13 = _createForOfIteratorHelper(node.expressions),\n            _step13;\n\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var expression = _step13.value;\n            if (!this.isPure(expression, constantsOnly)) return false;\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n\n        return true;\n      } else {\n        return t.isPureish(node);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(key, val) {\n      return this.data[key] = val;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) return data;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"removeData\",\n    value: function removeData(key) {\n      var scope = this;\n\n      do {\n        var data = scope.data[key];\n        if (data != null) scope.data[key] = null;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      if (!this.inited) {\n        this.inited = true;\n        this.crawl();\n      }\n    }\n  }, {\n    key: \"crawl\",\n    value: function crawl() {\n      var path = this.path;\n      this.references = Object.create(null);\n      this.bindings = Object.create(null);\n      this.globals = Object.create(null);\n      this.uids = Object.create(null);\n      this.data = Object.create(null);\n      var programParent = this.getProgramParent();\n      if (programParent.crawling) return;\n      var state = {\n        references: [],\n        constantViolations: [],\n        assignments: []\n      };\n      this.crawling = true;\n\n      if (path.type !== \"Program\" && collectorVisitor._exploded) {\n        var _iterator14 = _createForOfIteratorHelper(collectorVisitor.enter),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var _visit = _step14.value;\n\n            _visit(path, state);\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        var typeVisitors = collectorVisitor[path.type];\n\n        if (typeVisitors) {\n          var _iterator15 = _createForOfIteratorHelper(typeVisitors.enter),\n              _step15;\n\n          try {\n            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n              var visit = _step15.value;\n              visit(path, state);\n            }\n          } catch (err) {\n            _iterator15.e(err);\n          } finally {\n            _iterator15.f();\n          }\n        }\n      }\n\n      path.traverse(collectorVisitor, state);\n      this.crawling = false;\n\n      var _iterator16 = _createForOfIteratorHelper(state.assignments),\n          _step16;\n\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var _path = _step16.value;\n\n          var ids = _path.getBindingIdentifiers();\n\n          for (var _i5 = 0, _Object$keys5 = Object.keys(ids); _i5 < _Object$keys5.length; _i5++) {\n            var name = _Object$keys5[_i5];\n            if (_path.scope.getBinding(name)) continue;\n            programParent.addGlobal(ids[name]);\n          }\n\n          _path.scope.registerConstantViolation(_path);\n        }\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n\n      var _iterator17 = _createForOfIteratorHelper(state.references),\n          _step17;\n\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var ref = _step17.value;\n          var binding = ref.scope.getBinding(ref.node.name);\n\n          if (binding) {\n            binding.reference(ref);\n          } else {\n            programParent.addGlobal(ref.node);\n          }\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n\n      var _iterator18 = _createForOfIteratorHelper(state.constantViolations),\n          _step18;\n\n      try {\n        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n          var _path2 = _step18.value;\n\n          _path2.scope.registerConstantViolation(_path2);\n        }\n      } catch (err) {\n        _iterator18.e(err);\n      } finally {\n        _iterator18.f();\n      }\n    }\n  }, {\n    key: \"push\",\n    value: function push(opts) {\n      var path = this.path;\n\n      if (!path.isBlockStatement() && !path.isProgram()) {\n        path = this.getBlockParent().path;\n      }\n\n      if (path.isSwitchStatement()) {\n        path = (this.getFunctionParent() || this.getProgramParent()).path;\n      }\n\n      if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n        path.ensureBlock();\n        path = path.get(\"body\");\n      }\n\n      var unique = opts.unique;\n      var kind = opts.kind || \"var\";\n      var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n      var dataKey = \"declaration:\".concat(kind, \":\").concat(blockHoist);\n      var declarPath = !unique && path.getData(dataKey);\n\n      if (!declarPath) {\n        var declar = t.variableDeclaration(kind, []);\n        declar._blockHoist = blockHoist;\n\n        var _path$unshiftContaine = path.unshiftContainer(\"body\", [declar]);\n\n        var _path$unshiftContaine2 = _slicedToArray(_path$unshiftContaine, 1);\n\n        declarPath = _path$unshiftContaine2[0];\n        if (!unique) path.setData(dataKey, declarPath);\n      }\n\n      var declarator = t.variableDeclarator(opts.id, opts.init);\n      declarPath.node.declarations.push(declarator);\n      this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n    }\n  }, {\n    key: \"getProgramParent\",\n    value: function getProgramParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isProgram()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"Couldn't find a Program\");\n    }\n  }, {\n    key: \"getFunctionParent\",\n    value: function getFunctionParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isFunctionParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      return null;\n    }\n  }, {\n    key: \"getBlockParent\",\n    value: function getBlockParent() {\n      var scope = this;\n\n      do {\n        if (scope.path.isBlockParent()) {\n          return scope;\n        }\n      } while (scope = scope.parent);\n\n      throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n    }\n  }, {\n    key: \"getAllBindings\",\n    value: function getAllBindings() {\n      var ids = Object.create(null);\n      var scope = this;\n\n      do {\n        for (var _i6 = 0, _Object$keys6 = Object.keys(scope.bindings); _i6 < _Object$keys6.length; _i6++) {\n          var key = _Object$keys6[_i6];\n\n          if (key in ids === false) {\n            ids[key] = scope.bindings[key];\n          }\n        }\n\n        scope = scope.parent;\n      } while (scope);\n\n      return ids;\n    }\n  }, {\n    key: \"getAllBindingsOfKind\",\n    value: function getAllBindingsOfKind() {\n      var ids = Object.create(null);\n\n      for (var _len = arguments.length, kinds = new Array(_len), _key = 0; _key < _len; _key++) {\n        kinds[_key] = arguments[_key];\n      }\n\n      for (var _i7 = 0, _kinds = kinds; _i7 < _kinds.length; _i7++) {\n        var kind = _kinds[_i7];\n        var scope = this;\n\n        do {\n          for (var _i8 = 0, _Object$keys7 = Object.keys(scope.bindings); _i8 < _Object$keys7.length; _i8++) {\n            var name = _Object$keys7[_i8];\n            var binding = scope.bindings[name];\n            if (binding.kind === kind) ids[name] = binding;\n          }\n\n          scope = scope.parent;\n        } while (scope);\n      }\n\n      return ids;\n    }\n  }, {\n    key: \"bindingIdentifierEquals\",\n    value: function bindingIdentifierEquals(name, node) {\n      return this.getBindingIdentifier(name) === node;\n    }\n  }, {\n    key: \"getBinding\",\n    value: function getBinding(name) {\n      var scope = this;\n      var previousPath;\n\n      do {\n        var binding = scope.getOwnBinding(name);\n\n        if (binding) {\n          var _previousPath;\n\n          if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== \"param\") {} else {\n            return binding;\n          }\n        }\n\n        previousPath = scope.path;\n      } while (scope = scope.parent);\n    }\n  }, {\n    key: \"getOwnBinding\",\n    value: function getOwnBinding(name) {\n      return this.bindings[name];\n    }\n  }, {\n    key: \"getBindingIdentifier\",\n    value: function getBindingIdentifier(name) {\n      var _this$getBinding;\n\n      return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n    }\n  }, {\n    key: \"getOwnBindingIdentifier\",\n    value: function getOwnBindingIdentifier(name) {\n      var binding = this.bindings[name];\n      return binding == null ? void 0 : binding.identifier;\n    }\n  }, {\n    key: \"hasOwnBinding\",\n    value: function hasOwnBinding(name) {\n      return !!this.getOwnBinding(name);\n    }\n  }, {\n    key: \"hasBinding\",\n    value: function hasBinding(name, noGlobals) {\n      if (!name) return false;\n      if (this.hasOwnBinding(name)) return true;\n      if (this.parentHasBinding(name, noGlobals)) return true;\n      if (this.hasUid(name)) return true;\n      if (!noGlobals && Scope.globals.includes(name)) return true;\n      if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n      return false;\n    }\n  }, {\n    key: \"parentHasBinding\",\n    value: function parentHasBinding(name, noGlobals) {\n      var _this$parent;\n\n      return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n    }\n  }, {\n    key: \"moveBindingTo\",\n    value: function moveBindingTo(name, scope) {\n      var info = this.getBinding(name);\n\n      if (info) {\n        info.scope.removeOwnBinding(name);\n        info.scope = scope;\n        scope.bindings[name] = info;\n      }\n    }\n  }, {\n    key: \"removeOwnBinding\",\n    value: function removeOwnBinding(name) {\n      delete this.bindings[name];\n    }\n  }, {\n    key: \"removeBinding\",\n    value: function removeBinding(name) {\n      var _this$getBinding2;\n\n      (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n      var scope = this;\n\n      do {\n        if (scope.uids[name]) {\n          scope.uids[name] = false;\n        }\n      } while (scope = scope.parent);\n    }\n  }]);\n\n  return Scope;\n}();\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/traverse/lib/scope/index.js"],"names":["Object","defineProperty","exports","value","default","_renamer","require","_index","_binding","_globals","t","_cache","gatherNodeParts","node","parts","type","isModuleDeclaration","isExportAllDeclaration","isExportNamedDeclaration","isImportDeclaration","source","specifiers","length","e","isExportDefaultDeclaration","declaration","isModuleSpecifier","local","isLiteral","push","object","property","name","callee","properties","argument","key","left","id","expression","meta","openingElement","openingFragment","namespace","collectorVisitor","For","path","FOR_INIT_KEYS","declar","get","isVar","parentScope","scope","getFunctionParent","getProgramParent","registerBinding","Declaration","isBlockScoped","isExportDeclaration","parent","registerDeclaration","ImportDeclaration","getBlockParent","ReferencedIdentifier","state","references","ForXStatement","isPattern","isIdentifier","constantViolations","ExportDeclaration","exit","isClassDeclaration","isFunctionDeclaration","binding","getBinding","reference","isVariableDeclaration","declarations","decl","keys","getBindingIdentifiers","LabeledStatement","AssignmentExpression","assignments","UpdateExpression","UnaryExpression","operator","BlockScoped","bindings","CatchClause","Function","isFunctionExpression","has","NOT_LOCAL_BINDING","params","param","ClassExpression","uid","Scope","block","labels","inited","globals","uids","data","crawling","cached","set","Map","_parent","isKey","parentPath","isMethod","isScope","hub","opts","generateUidIdentifier","cloneNode","identifier","generateUid","toIdentifier","replace","i","_generateUid","hasLabel","hasBinding","hasGlobal","hasReference","program","defaultName","join","slice","generateUidBasedOnNode","isThisExpression","isSuper","constant","dontPush","isStatic","generateUidIdentifierBasedOnNode","kind","duplicate","buildError","TypeError","oldName","newName","rename","map","sep","repeat","console","log","violations","arrayLikeIsIterable","isGenericType","isArrayExpression","callExpression","memberExpression","helperName","args","numericLiteral","unshift","addHelper","getLabel","label","isLabeledStatement","registerLabel","specifier","unaryExpression","ids","reassign","bindingPath","ReferenceError","declarators","getOuterBindingIdentifiers","getOwnBinding","checkBlockScopedCollisions","registerConstantViolation","constantsOnly","isClass","superClass","isPure","body","isClassBody","method","isBinary","right","elements","elem","isObjectExpression","prop","computed","isProperty","isUnaryExpression","isTaggedTemplateExpression","matchesPattern","tag","quasi","isTemplateLiteral","expressions","isPureish","val","crawl","create","programParent","_exploded","enter","visit","typeVisitors","traverse","addGlobal","ref","isBlockStatement","isProgram","isSwitchStatement","isLoop","isCatchClause","isFunction","ensureBlock","unique","blockHoist","_blockHoist","dataKey","declarPath","getData","variableDeclaration","unshiftContainer","setData","declarator","variableDeclarator","init","pop","Error","isFunctionParent","isBlockParent","kinds","getBindingIdentifier","previousPath","_previousPath","_this$getBinding","noGlobals","hasOwnBinding","parentHasBinding","hasUid","includes","contextVariables","_this$parent","info","removeOwnBinding","_this$getBinding2","builtin"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _renamer = require(\"./lib/renamer\");\n\nvar _index = require(\"../index\");\n\nvar _binding = require(\"./binding\");\n\nvar _globals = require(\"globals\");\n\nvar t = require(\"@babel/types\");\n\nvar _cache = require(\"../cache\");\n\nfunction gatherNodeParts(node, parts) {\n  switch (node == null ? void 0 : node.type) {\n    default:\n      if (t.isModuleDeclaration(node)) {\n        if ((t.isExportAllDeclaration(node) || t.isExportNamedDeclaration(node) || t.isImportDeclaration(node)) && node.source) {\n          gatherNodeParts(node.source, parts);\n        } else if ((t.isExportNamedDeclaration(node) || t.isImportDeclaration(node)) && node.specifiers && node.specifiers.length) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if ((t.isExportDefaultDeclaration(node) || t.isExportNamedDeclaration(node)) && node.declaration) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (t.isModuleSpecifier(node)) {\n        gatherNodeParts(node.local, parts);\n      } else if (t.isLiteral(node)) {\n        parts.push(node.value);\n      }\n\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      parts.push(node.name);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\nconst collectorVisitor = {\n  For(path) {\n    for (const key of t.FOR_INIT_KEYS) {\n      const declar = path.get(key);\n\n      if (declar.isVar()) {\n        const parentScope = path.scope.getFunctionParent() || path.scope.getProgramParent();\n        parentScope.registerBinding(\"var\", declar);\n      }\n    }\n  },\n\n  Declaration(path) {\n    if (path.isBlockScoped()) return;\n    if (path.isImportDeclaration()) return;\n    if (path.isExportDeclaration()) return;\n    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ImportDeclaration(path) {\n    const parent = path.scope.getBlockParent();\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const {\n        node,\n        scope\n      } = path;\n      if (t.isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n\n      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n        const binding = scope.getBinding(id.name);\n        if (binding) binding.reference(path);\n      } else if (t.isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(t.getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            if (binding) binding.reference(path);\n          }\n        }\n      }\n    }\n\n  },\n\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    if (path.isFunctionExpression() && path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n\n    const params = path.get(\"params\");\n\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n  },\n\n  ClassExpression(path) {\n    if (path.has(\"id\") && !path.get(\"id\").node[t.NOT_LOCAL_BINDING]) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  }\n\n};\nlet uid = 0;\n\nclass Scope {\n  constructor(path) {\n    this.uid = void 0;\n    this.path = void 0;\n    this.block = void 0;\n    this.labels = void 0;\n    this.inited = void 0;\n    this.bindings = void 0;\n    this.references = void 0;\n    this.globals = void 0;\n    this.uids = void 0;\n    this.data = void 0;\n    this.crawling = void 0;\n    const {\n      node\n    } = path;\n\n    const cached = _cache.scope.get(node);\n\n    if ((cached == null ? void 0 : cached.path) === path) {\n      return cached;\n    }\n\n    _cache.scope.set(node, this);\n\n    this.uid = uid++;\n    this.block = node;\n    this.path = path;\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  get parent() {\n    var _parent;\n\n    let parent,\n        path = this.path;\n\n    do {\n      const isKey = path.key === \"key\";\n      path = path.parentPath;\n      if (isKey && path.isMethod()) path = path.parentPath;\n      if (path && path.isScope()) parent = path;\n    } while (path && !parent);\n\n    return (_parent = parent) == null ? void 0 : _parent.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse(node, opts, state) {\n    (0, _index.default)(node, opts, this, state, this.path);\n  }\n\n  generateDeclaredUidIdentifier(name) {\n    const id = this.generateUidIdentifier(name);\n    this.push({\n      id\n    });\n    return t.cloneNode(id);\n  }\n\n  generateUidIdentifier(name) {\n    return t.identifier(this.generateUid(name));\n  }\n\n  generateUid(name = \"temp\") {\n    name = t.toIdentifier(name).replace(/^_+/, \"\").replace(/[0-9]+$/g, \"\");\n    let uid;\n    let i = 1;\n\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n    return uid;\n  }\n\n  _generateUid(name, i) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node, defaultName) {\n    const parts = [];\n    gatherNodeParts(node, parts);\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  generateUidIdentifierBasedOnNode(node, defaultName) {\n    return t.identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  isStatic(node) {\n    if (t.isThisExpression(node) || t.isSuper(node)) {\n      return true;\n    }\n\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  maybeGenerateMemoised(node, dontPush) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n\n      if (!dontPush) {\n        this.push({\n          id\n        });\n        return t.cloneNode(id);\n      }\n\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(local, kind, name, id) {\n    if (kind === \"param\") return;\n    if (local.kind === \"local\") return;\n    const duplicate = kind === \"let\" || local.kind === \"let\" || local.kind === \"const\" || local.kind === \"module\" || local.kind === \"param\" && (kind === \"let\" || kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(id, `Duplicate declaration \"${name}\"`, TypeError);\n    }\n  }\n\n  rename(oldName, newName, block) {\n    const binding = this.getBinding(oldName);\n\n    if (binding) {\n      newName = newName || this.generateUidIdentifier(oldName).name;\n      return new _renamer.default(binding, oldName, newName).rename(block);\n    }\n  }\n\n  _renameFromMap(map, oldName, newName, value) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope = this;\n\n    do {\n      console.log(\"#\", scope.block.type);\n\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind\n        });\n      }\n    } while (scope = scope.parent);\n\n    console.log(sep);\n  }\n\n  toArray(node, i, arrayLikeIsIterable) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n\n      if (binding != null && binding.constant && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (t.isArrayExpression(node)) {\n      return node;\n    }\n\n    if (t.isIdentifier(node, {\n      name: \"arguments\"\n    })) {\n      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier(\"Array\"), t.identifier(\"prototype\")), t.identifier(\"slice\")), t.identifier(\"call\")), [node]);\n    }\n\n    let helperName;\n    const args = [node];\n\n    if (i === true) {\n      helperName = \"toConsumableArray\";\n    } else if (i) {\n      args.push(t.numericLiteral(i));\n      helperName = \"slicedToArray\";\n    } else {\n      helperName = \"toArray\";\n    }\n\n    if (arrayLikeIsIterable) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    return t.callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n\n      for (const declar of declarations) {\n        this.registerBinding(path.node.kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const specifiers = path.get(\"specifiers\");\n\n      for (const specifier of specifiers) {\n        this.registerBinding(\"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      const declar = path.get(\"declaration\");\n\n      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return t.unaryExpression(\"void\", t.numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path) {\n    const ids = path.getBindingIdentifiers();\n\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(kind, path, bindingPath = path) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators = path.get(\"declarations\");\n\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          if (local.identifier === id) continue;\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new _binding.default({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name) {\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasGlobal(name) {\n    let scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while (scope = scope.parent);\n\n    return false;\n  }\n\n  hasReference(name) {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node, constantsOnly) {\n    if (t.isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (t.isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n\n      return this.isPure(node.body, constantsOnly);\n    } else if (t.isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isBinary(node)) {\n      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);\n    } else if (t.isArrayExpression(node)) {\n      for (const elem of node.elements) {\n        if (!this.isPure(elem, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isObjectExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n\n      return true;\n    } else if (t.isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.kind === \"get\" || node.kind === \"set\") return false;\n      return true;\n    } else if (t.isProperty(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      return this.isPure(node.value, constantsOnly);\n    } else if (t.isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (t.isTaggedTemplateExpression(node)) {\n      return t.matchesPattern(node.tag, \"String.raw\") && !this.hasBinding(\"String\", true) && this.isPure(node.quasi, constantsOnly);\n    } else if (t.isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n\n      return true;\n    } else {\n      return t.isPureish(node);\n    }\n  }\n\n  setData(key, val) {\n    return this.data[key] = val;\n  }\n\n  getData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while (scope = scope.parent);\n  }\n\n  removeData(key) {\n    let scope = this;\n\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while (scope = scope.parent);\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n    const state = {\n      references: [],\n      constantViolations: [],\n      assignments: []\n    };\n    this.crawling = true;\n\n    if (path.type !== \"Program\" && collectorVisitor._exploded) {\n      for (const visit of collectorVisitor.enter) {\n        visit(path, state);\n      }\n\n      const typeVisitors = collectorVisitor[path.type];\n\n      if (typeVisitors) {\n        for (const visit of typeVisitors.enter) {\n          visit(path, state);\n        }\n      }\n    }\n\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    for (const path of state.assignments) {\n      const ids = path.getBindingIdentifiers();\n\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      path.scope.registerConstantViolation(path);\n    }\n\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts) {\n    let path = this.path;\n\n    if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      path.ensureBlock();\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = t.variableDeclaration(kind, []);\n      declar._blockHoist = blockHoist;\n      [declarPath] = path.unshiftContainer(\"body\", [declar]);\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = t.variableDeclarator(opts.id, opts.init);\n    declarPath.node.declarations.push(declarator);\n    this.registerBinding(kind, declarPath.get(\"declarations\").pop());\n  }\n\n  getProgramParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  getFunctionParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    return null;\n  }\n\n  getBlockParent() {\n    let scope = this;\n\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while (scope = scope.parent);\n\n    throw new Error(\"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\");\n  }\n\n  getAllBindings() {\n    const ids = Object.create(null);\n    let scope = this;\n\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  getAllBindingsOfKind(...kinds) {\n    const ids = Object.create(null);\n\n    for (const kind of kinds) {\n      let scope = this;\n\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name, node) {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name) {\n    let scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n\n      if (binding) {\n        var _previousPath;\n\n        if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== \"param\") {} else {\n          return binding;\n        }\n      }\n\n      previousPath = scope.path;\n    } while (scope = scope.parent);\n  }\n\n  getOwnBinding(name) {\n    return this.bindings[name];\n  }\n\n  getBindingIdentifier(name) {\n    var _this$getBinding;\n\n    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;\n  }\n\n  getOwnBindingIdentifier(name) {\n    const binding = this.bindings[name];\n    return binding == null ? void 0 : binding.identifier;\n  }\n\n  hasOwnBinding(name) {\n    return !!this.getOwnBinding(name);\n  }\n\n  hasBinding(name, noGlobals) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    if (this.parentHasBinding(name, noGlobals)) return true;\n    if (this.hasUid(name)) return true;\n    if (!noGlobals && Scope.globals.includes(name)) return true;\n    if (!noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(name, noGlobals) {\n    var _this$parent;\n\n    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, noGlobals);\n  }\n\n  moveBindingTo(name, scope) {\n    const info = this.getBinding(name);\n\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name) {\n    var _this$getBinding2;\n\n    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);\n    let scope = this;\n\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while (scope = scope.parent);\n  }\n\n}\n\nexports.default = Scope;\nScope.globals = Object.keys(_globals.builtin);\nScope.contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];"]},"metadata":{},"sourceType":"script"}