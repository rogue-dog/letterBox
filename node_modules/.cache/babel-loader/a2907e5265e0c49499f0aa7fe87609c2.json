{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext}from\"react\";import{AppContext}from\"../initialState\";import{useState}from\"react\";import\"./LoginPage.css\";import{IonContent,IonFooter,IonGrid,IonHeader,IonPage,IonRow,IonToolbar,IonCol,IonInput,IonButton}from\"@ionic/react\";import db from\"../Firestore\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ChatPage=function ChatPage(){var _useContext=useContext(AppContext),state=_useContext.state,dispatch=_useContext.dispatch;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),message=_useState2[0],setMessage=_useState2[1];var channel=state.user['phone']+\"/\"+state.chattingWith.phone;var sendMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var message_body,k;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:message_body={content:message,channel:channel,dateTime:+Date.now(),sentBy:state.user['phone']};if(!message){_context.next=7;break;}_context.next=4;return db.collection(\"messages\").add(message_body).then(function(){alert(state.chattingWith.phone);}).catch(function(error){alert(error);});case 4:k=_context.sent;_context.next=8;break;case 7:alert(\"Cannot Send Empty messages!\");case 8:case\"end\":return _context.stop();}}},_callee);}));return function sendMessage(){return _ref.apply(this,arguments);};}();var fetchMessages=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var SentMessages;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return db.collection(\"messages\").doc().get;case 2:SentMessages=_context2.sent;case 3:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchMessages(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(IonPage,{children:[/*#__PURE__*/_jsx(IonHeader,{children:state.chattingWith.name}),/*#__PURE__*/_jsxs(IonContent,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"This is thegh chadtpage bro..\"}),/*#__PURE__*/_jsx(IonFooter,{children:/*#__PURE__*/_jsx(IonToolbar,{children:/*#__PURE__*/_jsx(IonGrid,{children:/*#__PURE__*/_jsxs(IonRow,{children:[/*#__PURE__*/_jsx(IonCol,{size:\"11\",children:/*#__PURE__*/_jsx(\"input\",{className:\"input-style\",placeholder:\"Pour your heart out..\",onChange:function onChange(e){setMessage(e.target.value);}})}),/*#__PURE__*/_jsx(IonCol,{children:/*#__PURE__*/_jsx(IonButton,{size:\"2\",onClick:function onClick(e){sendMessage();},children:\"Send\"})})]})})})})]})]});};export default ChatPage;","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/src/pages/ChatPage.jsx"],"names":["React","useContext","AppContext","useState","IonContent","IonFooter","IonGrid","IonHeader","IonPage","IonRow","IonToolbar","IonCol","IonInput","IonButton","db","ChatPage","state","dispatch","message","setMessage","channel","user","chattingWith","phone","sendMessage","message_body","content","dateTime","Date","now","sentBy","collection","add","then","alert","catch","error","k","fetchMessages","doc","get","SentMessages","name","e","target","value"],"mappings":"6aAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,KAAkC,OAAlC,CACA,OAASC,UAAT,KAA2B,iBAA3B,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAO,iBAAP,CACA,OAASC,UAAT,CAAqBC,SAArB,CAAgCC,OAAhC,CAAyCC,SAAzC,CAAoDC,OAApD,CAA6DC,MAA7D,CAAqEC,UAArE,CAAiFC,MAAjF,CAAyFC,QAAzF,CAAmGC,SAAnG,KAAoH,cAApH,CACA,MAAOC,CAAAA,EAAP,KAAe,cAAf,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,gBAA0Bd,UAAU,CAACC,UAAD,CAApC,CAAMc,KAAN,aAAMA,KAAN,CAAaC,QAAb,aAAaA,QAAb,CACA,cAA4Bd,QAAQ,CAAC,EAAD,CAApC,wCAAKe,OAAL,eAAcC,UAAd,eACA,GAAIC,CAAAA,OAAO,CAAGJ,KAAK,CAACK,IAAN,CAAW,OAAX,EAAsB,GAAtB,CAA4BL,KAAK,CAACM,YAAN,CAAmBC,KAA7D,CACA,GAAMC,CAAAA,WAAW,0FAAG,sJAEZC,YAFY,CAEG,CACfC,OAAO,CAAER,OADM,CAEfE,OAAO,CAAEA,OAFM,CAGfO,QAAQ,CAAE,CAACC,IAAI,CAACC,GAAL,EAHI,CAIfC,MAAM,CAAEd,KAAK,CAACK,IAAN,CAAW,OAAX,CAJO,CAFH,KAQZH,OARY,+CASEJ,CAAAA,EAAE,CAACiB,UAAH,CAAc,UAAd,EAA0BC,GAA1B,CAA8BP,YAA9B,EAA4CQ,IAA5C,CAAiD,UAAM,CACjEC,KAAK,CAAClB,KAAK,CAACM,YAAN,CAAmBC,KAApB,CAAL,CACH,CAFa,EAEXY,KAFW,CAEL,SAACC,KAAD,CAAW,CAChBF,KAAK,CAACE,KAAD,CAAL,CACH,CAJa,CATF,QASRC,CATQ,4CAgBZH,KAAK,CAAC,6BAAD,CAAL,CAhBY,sDAAH,kBAAXV,CAAAA,WAAW,0CAAjB,CAoBA,GAAMc,CAAAA,aAAa,2FAAG,gLACOxB,CAAAA,EAAE,CAACiB,UAAH,CAAc,UAAd,EAA0BQ,GAA1B,GAAgCC,GADvC,QACdC,YADc,wEAAH,kBAAbH,CAAAA,aAAa,2CAAnB,CAKA,mBACI,MAAC,OAAD,yBACI,KAAC,SAAD,WAAYtB,KAAK,CAACM,YAAN,CAAmBoB,IAA/B,EADJ,cAEI,MAAC,UAAD,yBACI,oDADJ,cAGI,KAAC,SAAD,wBACI,KAAC,UAAD,wBACI,KAAC,OAAD,wBACI,MAAC,MAAD,yBACI,KAAC,MAAD,EAAQ,IAAI,CAAC,IAAb,uBAEI,cACI,SAAS,CAAC,aADd,CAC4B,WAAW,CAAC,uBADxC,CAEI,QAAQ,CAAE,kBAACC,CAAD,CAAO,CAAExB,UAAU,CAACwB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,CAA4B,CAFnD,EAFJ,EADJ,cASI,KAAC,MAAD,wBAEI,KAAC,SAAD,EAAW,IAAI,CAAC,GAAhB,CAAoB,OAAO,CAAE,iBAACF,CAAD,CAAO,CAAEnB,WAAW,GAAI,CAArD,kBAFJ,EATJ,GADJ,EADJ,EADJ,EAHJ,GAFJ,GADJ,CA8BH,CA3DD,CA6DA,cAAeT,CAAAA,QAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../initialState\";\r\nimport { useState } from \"react\";\r\nimport \"./LoginPage.css\";\r\nimport { IonContent, IonFooter, IonGrid, IonHeader, IonPage, IonRow, IonToolbar, IonCol, IonInput, IonButton } from \"@ionic/react\";\r\nimport db from \"../Firestore\";\r\n\r\nconst ChatPage = () => {\r\n    let { state, dispatch } = useContext(AppContext);\r\n    let [message, setMessage] = useState(\"\");\r\n    let channel = state.user['phone'] + \"/\" + state.chattingWith.phone;\r\n    const sendMessage = async () => {\r\n\r\n        let message_body = {\r\n            content: message,\r\n            channel: channel,\r\n            dateTime: +Date.now(),\r\n            sentBy: state.user['phone']\r\n        };\r\n        if (message) {\r\n            let k = await db.collection(\"messages\").add(message_body).then(() => {\r\n                alert(state.chattingWith.phone);\r\n            }).catch((error) => {\r\n                alert(error);\r\n            });\r\n        }\r\n        else {\r\n            alert(\"Cannot Send Empty messages!\");\r\n        }\r\n    }\r\n\r\n    const fetchMessages = async () => {\r\n        let SentMessages = await db.collection(\"messages\").doc().get\r\n\r\n    }\r\n\r\n    return (\r\n        <IonPage>\r\n            <IonHeader>{state.chattingWith.name}</IonHeader>\r\n            <IonContent>\r\n                <p>This is thegh chadtpage bro..</p>\r\n\r\n                <IonFooter>\r\n                    <IonToolbar>\r\n                        <IonGrid>\r\n                            <IonRow>\r\n                                <IonCol size=\"11\" >\r\n\r\n                                    <input\r\n                                        className=\"input-style\" placeholder=\"Pour your heart out..\"\r\n                                        onChange={(e) => { setMessage(e.target.value) }}\r\n\r\n                                    ></input>\r\n                                </IonCol>\r\n                                <IonCol >\r\n\r\n                                    <IonButton size=\"2\" onClick={(e) => { sendMessage() }}>Send</IonButton>\r\n                                </IonCol>\r\n                            </IonRow>\r\n                        </IonGrid>\r\n                    </IonToolbar>\r\n\r\n                </IonFooter>\r\n            </IonContent>\r\n        </IonPage>\r\n    );\r\n}\r\n\r\nexport default ChatPage;\r\n"]},"metadata":{},"sourceType":"module"}