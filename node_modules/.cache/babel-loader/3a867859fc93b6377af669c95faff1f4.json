{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/lenovo/letterBox/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _binding = require(\"../binding\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nvar t = require(\"@babel/types\");\n\nvar renameVisitor = {\n  ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {\n    var node = _ref.node;\n\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n  Scope: function Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      skipAllButComputedMethodKey(path);\n    }\n  },\n  \"AssignmentExpression|Declaration|VariableDeclarator\": function AssignmentExpressionDeclarationVariableDeclarator(path, state) {\n    if (path.isVariableDeclaration()) return;\n    var ids = path.getOuterBindingIdentifiers();\n\n    for (var name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n};\n\nvar Renamer = /*#__PURE__*/function () {\n  function Renamer(binding, oldName, newName) {\n    _classCallCheck(this, Renamer);\n\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  _createClass(Renamer, [{\n    key: \"maybeConvertFromExportDeclaration\",\n    value: function maybeConvertFromExportDeclaration(parentDeclar) {\n      var maybeExportDeclar = parentDeclar.parentPath;\n\n      if (!maybeExportDeclar.isExportDeclaration()) {\n        return;\n      }\n\n      if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\n        return;\n      }\n\n      (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n    }\n  }, {\n    key: \"maybeConvertFromClassFunctionDeclaration\",\n    value: function maybeConvertFromClassFunctionDeclaration(path) {\n      return;\n      if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n      if (this.binding.kind !== \"hoisted\") return;\n      path.node.id = t.identifier(this.oldName);\n      path.node._blockHoist = 3;\n      path.replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));\n    }\n  }, {\n    key: \"maybeConvertFromClassFunctionExpression\",\n    value: function maybeConvertFromClassFunctionExpression(path) {\n      return;\n      if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n      if (this.binding.kind !== \"local\") return;\n      path.node.id = t.identifier(this.oldName);\n      this.binding.scope.parent.push({\n        id: t.identifier(this.newName)\n      });\n      path.replaceWith(t.assignmentExpression(\"=\", t.identifier(this.newName), path.node));\n    }\n  }, {\n    key: \"rename\",\n    value: function rename(block) {\n      var _this = this;\n\n      var binding = this.binding,\n          oldName = this.oldName,\n          newName = this.newName;\n      var scope = binding.scope,\n          path = binding.path;\n      var parentDeclar = path.find(function (path) {\n        return path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression();\n      });\n\n      if (parentDeclar) {\n        var bindingIds = parentDeclar.getOuterBindingIdentifiers();\n\n        if (bindingIds[oldName] === binding.identifier) {\n          this.maybeConvertFromExportDeclaration(parentDeclar);\n        }\n      }\n\n      var blockToTraverse = block || scope.block;\n\n      if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === \"SwitchStatement\") {\n        blockToTraverse.cases.forEach(function (c) {\n          scope.traverse(c, renameVisitor, _this);\n        });\n      } else {\n        scope.traverse(blockToTraverse, renameVisitor, this);\n      }\n\n      if (!block) {\n        scope.removeOwnBinding(oldName);\n        scope.bindings[newName] = binding;\n        this.binding.identifier.name = newName;\n      }\n\n      if (parentDeclar) {\n        this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\n        this.maybeConvertFromClassFunctionExpression(parentDeclar);\n      }\n    }\n  }]);\n\n  return Renamer;\n}();\n\nexports.default = Renamer;\n\nfunction skipAllButComputedMethodKey(path) {\n  if (!path.isMethod() || !path.node.computed) {\n    path.skip();\n    return;\n  }\n\n  var keys = t.VISITOR_KEYS[path.type];\n\n  var _iterator = _createForOfIteratorHelper(keys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      if (key !== \"key\") path.skipKey(key);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/node_modules/@babel/traverse/lib/scope/lib/renamer.js"],"names":["Object","defineProperty","exports","value","default","_binding","require","_helperSplitExportDeclaration","t","renameVisitor","ReferencedIdentifier","state","node","name","oldName","newName","Scope","path","scope","bindingIdentifierEquals","binding","identifier","skipAllButComputedMethodKey","isVariableDeclaration","ids","getOuterBindingIdentifiers","Renamer","parentDeclar","maybeExportDeclar","parentPath","isExportDeclaration","isExportDefaultDeclaration","get","id","isFunctionDeclaration","isClassDeclaration","kind","_blockHoist","replaceWith","variableDeclaration","variableDeclarator","toExpression","isFunctionExpression","isClassExpression","parent","push","assignmentExpression","block","find","isDeclaration","bindingIds","maybeConvertFromExportDeclaration","blockToTraverse","type","cases","forEach","c","traverse","removeOwnBinding","bindings","maybeConvertFromClassFunctionDeclaration","maybeConvertFromClassFunctionExpression","isMethod","computed","skip","keys","VISITOR_KEYS","key","skipKey"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _binding = require(\"../binding\");\n\nvar _helperSplitExportDeclaration = require(\"@babel/helper-split-export-declaration\");\n\nvar t = require(\"@babel/types\");\n\nconst renameVisitor = {\n  ReferencedIdentifier({\n    node\n  }, state) {\n    if (node.name === state.oldName) {\n      node.name = state.newName;\n    }\n  },\n\n  Scope(path, state) {\n    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {\n      skipAllButComputedMethodKey(path);\n    }\n  },\n\n  \"AssignmentExpression|Declaration|VariableDeclarator\"(path, state) {\n    if (path.isVariableDeclaration()) return;\n    const ids = path.getOuterBindingIdentifiers();\n\n    for (const name in ids) {\n      if (name === state.oldName) ids[name].name = state.newName;\n    }\n  }\n\n};\n\nclass Renamer {\n  constructor(binding, oldName, newName) {\n    this.newName = newName;\n    this.oldName = oldName;\n    this.binding = binding;\n  }\n\n  maybeConvertFromExportDeclaration(parentDeclar) {\n    const maybeExportDeclar = parentDeclar.parentPath;\n\n    if (!maybeExportDeclar.isExportDeclaration()) {\n      return;\n    }\n\n    if (maybeExportDeclar.isExportDefaultDeclaration() && !maybeExportDeclar.get(\"declaration\").node.id) {\n      return;\n    }\n\n    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);\n  }\n\n  maybeConvertFromClassFunctionDeclaration(path) {\n    return;\n    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;\n    if (this.binding.kind !== \"hoisted\") return;\n    path.node.id = t.identifier(this.oldName);\n    path.node._blockHoist = 3;\n    path.replaceWith(t.variableDeclaration(\"let\", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));\n  }\n\n  maybeConvertFromClassFunctionExpression(path) {\n    return;\n    if (!path.isFunctionExpression() && !path.isClassExpression()) return;\n    if (this.binding.kind !== \"local\") return;\n    path.node.id = t.identifier(this.oldName);\n    this.binding.scope.parent.push({\n      id: t.identifier(this.newName)\n    });\n    path.replaceWith(t.assignmentExpression(\"=\", t.identifier(this.newName), path.node));\n  }\n\n  rename(block) {\n    const {\n      binding,\n      oldName,\n      newName\n    } = this;\n    const {\n      scope,\n      path\n    } = binding;\n    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());\n\n    if (parentDeclar) {\n      const bindingIds = parentDeclar.getOuterBindingIdentifiers();\n\n      if (bindingIds[oldName] === binding.identifier) {\n        this.maybeConvertFromExportDeclaration(parentDeclar);\n      }\n    }\n\n    const blockToTraverse = block || scope.block;\n\n    if ((blockToTraverse == null ? void 0 : blockToTraverse.type) === \"SwitchStatement\") {\n      blockToTraverse.cases.forEach(c => {\n        scope.traverse(c, renameVisitor, this);\n      });\n    } else {\n      scope.traverse(blockToTraverse, renameVisitor, this);\n    }\n\n    if (!block) {\n      scope.removeOwnBinding(oldName);\n      scope.bindings[newName] = binding;\n      this.binding.identifier.name = newName;\n    }\n\n    if (parentDeclar) {\n      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);\n      this.maybeConvertFromClassFunctionExpression(parentDeclar);\n    }\n  }\n\n}\n\nexports.default = Renamer;\n\nfunction skipAllButComputedMethodKey(path) {\n  if (!path.isMethod() || !path.node.computed) {\n    path.skip();\n    return;\n  }\n\n  const keys = t.VISITOR_KEYS[path.type];\n\n  for (const key of keys) {\n    if (key !== \"key\") path.skipKey(key);\n  }\n}"]},"metadata":{},"sourceType":"script"}