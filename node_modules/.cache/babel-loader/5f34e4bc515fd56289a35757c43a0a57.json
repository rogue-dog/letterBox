{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\letterBox\\\\src\\\\pages\\\\ChatItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useRef, useState } from 'react';\nimport { IonList, IonItem, IonLabel, IonInput, IonToggle, IonRadio, IonCheckbox, IonItemSliding, IonItemOption, IonItemOptions, IonContent, IonPage, IonAvatar, IonButton, useIonViewWillEnter, useIonViewDidLeave } from '@ionic/react';\nimport { Redirect, useHistory } from 'react-router';\nimport { AppContext } from \"../initialState\";\nimport \"../pages/button.css\";\nimport db from '../Firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChatItem = ({\n  user\n}) => {\n  _s();\n\n  let history = useHistory();\n  let {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  let [lastmsg, setLastmsg] = useState(\"Loading...\");\n  let k = useRef(null);\n\n  function OpenChatPage() {\n    var action = {\n      type: \"ChatStarted\",\n      payload: user\n    };\n    dispatch(action);\n    history.push({\n      pathname: '/chatpage'\n    });\n  }\n\n  ;\n  let channel1 = state.user.phone + \"/\" + user[1]; //alert(channel1);\n\n  let channel2 = user[1] + \"/\" + state.user.phone; //alert(\"Here\");\n\n  k = db.collection(\"messages\").where(\"channel\", \"in\", [channel1, channel2]).orderBy(\"dateTime\", \"desc\").limit(1).onSnapshot(querySnapshot => {\n    let last = \"\";\n    alert(\"cool\");\n    querySnapshot.forEach(doc => {\n      last = doc.data()['content'];\n    });\n    setLastmsg(last);\n    alert(last);\n    last = \"\";\n  });\n  useIonViewDidLeave(() => {\n    k = null;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(IonItem, {\n      children: [/*#__PURE__*/_jsxDEV(IonAvatar, {\n        slot: \"start\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"./avatar-han.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(IonLabel, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: user[0]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: user[1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", lastmsg]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => {\n            OpenChatPage();\n          },\n          className: \"button-style\",\n          children: \" Talk \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 13\n  }, this);\n};\n\n_s(ChatItem, \"NkUeqkwV79+lyLETpHNWALbg8Zo=\", false, function () {\n  return [useHistory, useIonViewDidLeave];\n});\n\n_c = ChatItem;\nexport default ChatItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatItem\");","map":{"version":3,"sources":["C:/Users/lenovo/letterBox/src/pages/ChatItem.jsx"],"names":["React","useContext","useRef","useState","IonList","IonItem","IonLabel","IonInput","IonToggle","IonRadio","IonCheckbox","IonItemSliding","IonItemOption","IonItemOptions","IonContent","IonPage","IonAvatar","IonButton","useIonViewWillEnter","useIonViewDidLeave","Redirect","useHistory","AppContext","db","ChatItem","user","history","state","dispatch","lastmsg","setLastmsg","k","OpenChatPage","action","type","payload","push","pathname","channel1","phone","channel2","collection","where","orderBy","limit","onSnapshot","querySnapshot","last","alert","forEach","doc","data","e"],"mappings":"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","sourcesContent":["import React, { useContext, useRef, useState } from 'react';\r\nimport {\r\n    IonList, IonItem, IonLabel, IonInput, IonToggle, IonRadio, IonCheckbox, IonItemSliding,\r\n    IonItemOption, IonItemOptions, IonContent, IonPage, IonAvatar, IonButton, useIonViewWillEnter, useIonViewDidLeave\r\n} from '@ionic/react';\r\nimport { Redirect, useHistory } from 'react-router';\r\nimport { AppContext } from \"../initialState\";\r\nimport \"../pages/button.css\";\r\nimport db from '../Firestore';\r\n\r\nconst ChatItem = ({ user }) => {\r\n\r\n    let history = useHistory();\r\n    let { state, dispatch } = useContext(AppContext);\r\n    let [lastmsg, setLastmsg] = useState(\"Loading...\");\r\n    let k = useRef(null);\r\n\r\n    function OpenChatPage() {\r\n\r\n\r\n        var action = {\r\n            type: \"ChatStarted\",\r\n            payload: user\r\n        };\r\n        dispatch(action);\r\n        history.push({ pathname: '/chatpage' });\r\n\r\n\r\n    };\r\n    let channel1 = state.user.phone + \"/\" + user[1];\r\n    //alert(channel1);\r\n    let channel2 = user[1] + \"/\" + state.user.phone;\r\n    //alert(\"Here\");\r\n    k = db.collection(\"messages\").where(\"channel\", \"in\", [channel1, channel2])\r\n        .orderBy(\"dateTime\", \"desc\").limit(1).onSnapshot((querySnapshot) => {\r\n            let last = \"\";\r\n            alert(\"cool\");\r\n            querySnapshot.forEach((doc) => {\r\n\r\n                last = doc.data()['content'];\r\n\r\n\r\n            })\r\n            setLastmsg(last);\r\n            alert(last);\r\n            last = \"\";\r\n        })\r\n\r\n    useIonViewDidLeave(() => {\r\n        k = null;\r\n    })\r\n\r\n\r\n    return (<div>\r\n        <IonItem  >\r\n\r\n            <IonAvatar slot=\"start\">\r\n                <img src=\"./avatar-han.png\"></img>\r\n            </IonAvatar>\r\n            <IonLabel>\r\n                <h2><strong>{user[0]}</strong></h2>\r\n                <h3>{user[1]}</h3>\r\n                <p> {lastmsg}</p>\r\n                <button onClick={(e) => { OpenChatPage() }} className=\"button-style\"> Talk </button>\r\n            </IonLabel>\r\n\r\n\r\n\r\n        </IonItem>\r\n    </div>\r\n    );\r\n}\r\nexport default ChatItem;"]},"metadata":{},"sourceType":"module"}